{
  "swagger": "2.0",
  "info": {
    "title": "OpenBankProjectAPI",
    "description": "An Open Source API for Banks. (c) TESOBE Ltd. 2011 - 2018. Licensed under the AGPL and commercial licences.",
    "contact": {
      "name": "TESOBE Ltd. / Open Bank Project",
      "url": "https://openbankproject.com",
      "email": "contact@tesobe.com"
    },
    "version": "v3_1_0"
  },
  "host": "api.openbankproject.com",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "directLogin": {
      "type": "apiKey",
      "description": "https://github.com/OpenBankProject/OBP-API/wiki/Direct-Login",
      "in": "header",
      "name": "Authorization"
    },
    "gatewayLogin": {
      "type": "apiKey",
      "description": "https://github.com/OpenBankProject/OBP-API/wiki/Gateway-Login",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "directLogin": [],
      "gatewayLogin": []
    }
  ],
  "paths": {
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update Account Label.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate the label for the account. The label is how the account is known to the account owner e.g. \u0027My savings account\u0027\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv1_2_1-updateAccountLabel",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountJSON"
            }
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidJsonFormat"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata": {
      "get": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Get Other Account Metadata.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet metadata of one other account. Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getOtherAccountMetadata",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OtherAccountMetadataJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/corporate_location": {
      "delete": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Delete Counterparty Corporate Location.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDelete corporate location of other bank account. Delete the geolocation of the counterparty\u0027s registered address\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteCounterpartyCorporateLocation",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Add Corporate Location to Counterparty",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd the geolocation of the counterparty\u0027s registered address\u003c/p\u003e",
        "operationId": "vv1_2_1-addCounterpartyCorporateLocation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorporateLocationJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Update Counterparty Corporate Location",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate the geolocation of the counterparty\u0027s registered address\u003c/p\u003e",
        "operationId": "vv1_2_1-updateCounterpartyCorporateLocation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorporateLocationJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/image_url": {
      "delete": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Delete Counterparty Image URL",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDelete image url of other bank account.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteCounterpartyImageUrl",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Add image url to other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd a url that points to the logo of the counterparty\u003c/p\u003e",
        "operationId": "vv1_2_1-addCounterpartyImageUrl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageUrlJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Update Counterparty Image Url",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate the url that points to the logo of the counterparty\u003c/p\u003e",
        "operationId": "vv1_2_1-updateCounterpartyImageUrl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageUrlJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/more_info": {
      "delete": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Delete more info of other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "",
        "operationId": "vv1_2_1-deleteCounterpartyMoreInfo",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Add Counterparty More Info",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd a description of the counter party from the perpestive of the account e.g. My dentist.\u003c/p\u003e",
        "operationId": "vv1_2_1-addCounterpartyMoreInfo",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoreInfoJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Update Counterparty More Info",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate the more info description of the counter party from the perpestive of the account e.g. My dentist.\u003c/p\u003e",
        "operationId": "vv1_2_1-updateCounterpartyMoreInfo",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoreInfoJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/open_corporates_url": {
      "delete": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Delete Counterparty Open Corporates URL",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDelete open corporate url of other bank account.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteCounterpartyOpenCorporatesUrl",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Add Open Corporates URL to Counterparty",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd open corporates url to other bank account.\u003c/p\u003e",
        "operationId": "vv1_2_1-addCounterpartyOpenCorporatesUrl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenCorporateUrlJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Update Open Corporates Url of Counterparty",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate open corporate url of other bank account.\u003c/p\u003e",
        "operationId": "vv1_2_1-updateCounterpartyOpenCorporatesUrl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenCorporateUrlJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/physical_location": {
      "delete": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Delete Counterparty Physical Location.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDelete physical location of other bank account.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteCounterpartyPhysicalLocation",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Add physical location to other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd geocoordinates of the counterparty\u0027s main location\u003c/p\u003e",
        "operationId": "vv1_2_1-addCounterpartyPhysicalLocation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalLocationJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Update Counterparty Physical Location",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate geocoordinates of the counterparty\u0027s main location\u003c/p\u003e",
        "operationId": "vv1_2_1-updateCounterpartyPhysicalLocation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalLocationJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/metadata/url": {
      "delete": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Delete url of other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "",
        "operationId": "vv1_2_1-deleteCounterpartyUrl",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Add url to other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eA url which represents the counterparty (home page url etc.)\u003c/p\u003e",
        "operationId": "vv1_2_1-addCounterpartyUrl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UrlJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Update url of other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eA url which represents the counterparty (home page url etc.)\u003c/p\u003e",
        "operationId": "vv1_2_1-updateCounterpartyUrl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UrlJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/private_alias": {
      "delete": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Delete Counterparty Private Alias",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDeletes the private alias of the other account OTHER_ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteCounterpartyPrivateAlias",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Get Other Account Private Alias",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the private alias of the other account OTHER_ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getOtherAccountPrivateAlias",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AliasJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Create Other Account Private Alias",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreates a private alias for the other account OTHER_ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-addOtherAccountPrivateAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AliasJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Update Counterparty Private Alias",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-updateCounterpartyPrivateAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AliasJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}/public_alias": {
      "delete": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Delete Counterparty Public Alias",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDeletes the public alias of the other account OTHER_ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteCounterpartyPublicAlias",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Get public alias of other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the public alias of the other account OTHER_ACCOUNT_ID. Authentication is Optional Authentication is Mandatory if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getCounterpartyPublicAlias",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AliasJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Add public alias to other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreates the public alias for the other account OTHER_ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e\u003cp\u003eNote: Public aliases are automatically generated for new \u0027other accounts / counterparties\u0027, so this call should only be used if the public alias was deleted.\u003c/p\u003e\u003cp\u003eThe VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.\u003c/p\u003e",
        "operationId": "vv1_2_1-addCounterpartyPublicAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AliasJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Counterparty-Metadata",
          "Counterparty"
        ],
        "summary": "Update public alias of other bank account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-updateCounterpartyPublicAlias",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AliasJSON"
            }
          },
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/metadata/comments": {
      "get": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Get comments.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the transaction TRANSACTION_ID comments made on a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e (VIEW_ID).\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getCommentsForViewOnTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionCommentsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Add comment.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003ePosts a comment about a transaction TRANSACTION_ID on a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e VIEW_ID.\u003c/p\u003e\u003cp\u003e${authenticationRequiredMessage(false)}\u003c/p\u003e\u003cp\u003eAuthentication is required since the comment is linked with the user.\u003c/p\u003e",
        "operationId": "vv1_2_1-addCommentForViewOnTransaction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostTransactionCommentJSON"
            }
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionCommentJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/metadata/comments/{COMMENT_ID}": {
      "delete": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Delete comment.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDelete the comment COMMENT_ID about the transaction TRANSACTION_ID made on \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the comment.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteCommentForViewOnTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "COMMENT_ID",
            "description": "The comment id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/metadata/images": {
      "get": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Get images.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the transaction TRANSACTION_ID images made on a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e (VIEW_ID).  Authentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getImagesForViewOnTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionImagesJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Add an image.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003ePosts an image about a transaction TRANSACTION_ID on a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e VIEW_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eThe image is linked with the user.\u003c/p\u003e",
        "operationId": "vv1_2_1-addImageForViewOnTransaction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostTransactionImageJSON"
            }
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionImageJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidJsonFormat"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/metadata/images/{IMAGE_ID}": {
      "delete": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Delete an image",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDeletes the image IMAGE_ID about the transaction TRANSACTION_ID made on \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the image.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteImageForViewOnTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "IMAGE_ID",
            "description": "The image id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/metadata/narrative": {
      "delete": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Delete narrative.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDeletes the description of the transaction TRANSACTION_ID.\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteTransactionNarrative",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Get narrative.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the account owner description of the transaction \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003emoderated\u003c/a\u003e by the view.\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getTransactionNarrative",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionNarrativeJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Add narrative.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreates a description of the transaction TRANSACTION_ID.\u003c/p\u003e\u003cp\u003eNote: Unlike other items of metadata, there is only one \"narrative\" per transaction accross all views. If you set narrative via a view e.g. view-x it will be seen via view-y (as long as view-y has permission to see the narrative).\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-addTransactionNarrative",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionNarrativeJSON"
            }
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidJsonFormat"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Update narrative.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdates the description of the transaction TRANSACTION_ID.\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-updateTransactionNarrative",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionNarrativeJSON"
            }
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidJsonFormat"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/metadata/tags": {
      "get": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Get tags.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the transaction TRANSACTION_ID tags made on a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e (VIEW_ID).  Authentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getTagsForViewOnTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionTagJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Add a tag.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003ePosts a tag about a transaction TRANSACTION_ID on a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e VIEW_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eAuthentication is required as the tag is linked with the user.\u003c/p\u003e",
        "operationId": "vv1_2_1-addTagForViewOnTransaction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostTransactionTagJSON"
            }
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionTagJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/metadata/tags/{TAG_ID}": {
      "delete": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Delete a tag.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDeletes the tag TAG_ID about the transaction TRANSACTION_ID made on \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e. Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the tag.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteTagForViewOnTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "TAG_ID",
            "description": "The tag id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorNoViewPermission"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/metadata/where": {
      "delete": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Delete where tag.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDeletes the where tag of the transaction TRANSACTION_ID made on \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eThe user must either have owner privileges for this account, or must be the user that posted the geo tag.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteWhereTagForViewOnTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Get where tag.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the \"where\" Geo tag added to the transaction TRANSACTION_ID made on a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e (VIEW_ID). It represents the location where the transaction has been initiated.\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getWhereTagForViewOnTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionWhereJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Add where tag.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreates a \"where\" Geo tag on a transaction TRANSACTION_ID in a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eThe geo tag is linked with the user.\u003c/p\u003e",
        "operationId": "vv1_2_1-addWhereTagForViewOnTransaction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostTransactionWhereJSON"
            }
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Transaction-Metadata",
          "Transaction"
        ],
        "summary": "Update where tag.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdates the \"where\" Geo tag on a transaction TRANSACTION_ID in a \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eThe geo tag is linked with the user.\u003c/p\u003e",
        "operationId": "vv1_2_1-updateWhereTagForViewOnTransaction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostTransactionWhereJSON"
            }
          },
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/other_account": {
      "get": {
        "tags": [
          "Transaction",
          "Counterparty"
        ],
        "summary": "Get Other Account of Transaction",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet other account of a transaction. Returns details of the other party involved in the transaction, moderated by the \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003eview\u003c/a\u003e (VIEW_ID).  Authentication via OAuth is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getOtherAccountForTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OtherAccountJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions/{TRANSACTION_ID}/transaction": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get Transaction by Id.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns one transaction specified by TRANSACTION_ID of the account ACCOUNT_ID and \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003emoderated\u003c/a\u003e by the view (VIEW_ID).\u003c/p\u003e\u003cp\u003eAuthentication is Optional Authentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv1_2_1-getTransactionByIdForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "TRANSACTION_ID",
            "description": "The transaction id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/permissions/PROVIDER/{PROVIDER_ID}/views": {
      "post": {
        "tags": [
          "Account-View",
          "Account",
          "User",
          "OwnerViewRequired"
        ],
        "summary": "Grant User access to a list of views.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGrants the user identified by PROVIDER_ID at their provider PROVIDER access to a list of views at BANK_ID for account ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAll url parameters must be \u003ca href\u003d\"http://en.wikipedia.org/wiki/Percent-encoding\"\u003e%-encoded\u003c/a\u003e, which is often especially relevant for PROVIDER_ID and PROVIDER.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eThe User needs to have access to the owner view.\u003c/p\u003e",
        "operationId": "vv1_2_1-addPermissionForUserForBankAccountForMultipleViews",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ViewIdsJson"
            }
          },
          {
            "in": "path",
            "name": "PROVIDER_ID",
            "description": "The provider id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ViewsJSONV121"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/permissions/PROVIDER/{PROVIDER_ID}/views/{VIEW_ID}": {
      "post": {
        "tags": [
          "Account-View",
          "Account",
          "User",
          "OwnerViewRequired"
        ],
        "summary": "Grant User access to View.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGrants the User identified by PROVIDER_ID at PROVIDER access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAll url parameters must be \u003ca href\u003d\"http://en.wikipedia.org/wiki/Percent-encoding\"\u003e%-encoded\u003c/a\u003e, which is often especially relevant for PROVIDER and PROVIDER_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory and the user needs to have access to the owner view.\u003c/p\u003e\u003cp\u003eGranting access to a public view will return an error message, as the user already has access.\u003c/p\u003e",
        "operationId": "vv1_2_1-addPermissionForUserForBankAccountForOneView",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          {
            "in": "path",
            "name": "PROVIDER_ID",
            "description": "The provider id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ViewJSONV121"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/permissions/{PROVIDER_ID}/{USER_ID}/views": {
      "delete": {
        "tags": [
          "Account-View",
          "Account",
          "User",
          "OwnerViewRequired"
        ],
        "summary": "Revoke access to all Views on Account",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eRevokes the user identified by PROVIDER_ID at their provider PROVIDER access to all the views at BANK_ID for account ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory and the user needs to have access to the owner view.\u003c/p\u003e",
        "operationId": "vv1_2_1-removePermissionForUserForBankAccountForAllViews",
        "parameters": [
          {
            "in": "path",
            "name": "PROVIDER_ID",
            "description": "The provider id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "USER_ID",
            "description": "The user id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/permissions/{PROVIDER_ID}/{USER_ID}/views/{VIEW_ID}": {
      "delete": {
        "tags": [
          "Account-View",
          "Account",
          "User",
          "Entitlement",
          "OwnerViewRequired"
        ],
        "summary": "Revoke access to one View.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eRevokes the user identified by PROVIDER_ID at their provider PROVIDER access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eRevoking a user access to a public view will return an error message.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory and the user needs to have access to the owner view.\u003c/p\u003e",
        "operationId": "vv1_2_1-removePermissionForUserForBankAccountForOneView",
        "parameters": [
          {
            "in": "path",
            "name": "PROVIDER_ID",
            "description": "The provider id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "USER_ID",
            "description": "The user id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/views/{VIEW_ID}": {
      "delete": {
        "tags": [
          "Account-View",
          "Account"
        ],
        "summary": "Delete View",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDeletes the view specified by VIEW_ID on the bank account specified by ACCOUNT_ID at bank BANK_ID.\u003c/p\u003e",
        "operationId": "vv1_2_1-deleteViewForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.2.1/root": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get API Info (root)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eAPI version\u003c/li\u003e  \u003cli\u003eHosted by information\u003c/li\u003e  \u003cli\u003eGit Commit\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "vv1_2_1-root",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/APIInfoJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      }
    },
    "/obp/v1.3.0/banks/{BANK_ID}/cards": {
      "get": {
        "tags": [
          "Card"
        ],
        "summary": "Get cards for the specified bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "",
        "operationId": "vv1_3_0-getCardsForBank",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PhysicalCardsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.3.0/cards": {
      "get": {
        "tags": [
          "Card",
          "User"
        ],
        "summary": "Get cards for the current user",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns data about all the physical cards a user has been issued. These could be debit cards, credit cards, etc.\u003c/p\u003e",
        "operationId": "vv1_3_0-getCards",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PhysicalCardsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.4.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transaction-request-types": {
      "get": {
        "tags": [
          "Transaction-Request"
        ],
        "summary": "Get Transaction Request Types for Account",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the Transation Request Types that the account specified by ACCOUNT_ID and view specified by VIEW_ID has access to.\u003c/p\u003e\u003cp\u003eThese are the ways this API Server can create a Transaction via a Transaction Request (as opposed to Transaction Types which include external types too e.g. for Transactions created by core banking etc.)\u003c/p\u003e\u003cp\u003eA Transaction Request Type internally determines:\u003c/p\u003e\u003cul\u003e  \u003cli\u003ethe required Transaction Request \u0027body\u0027 i.e. fields that define the \u0027what\u0027 and \u0027to\u0027 of a Transaction Request,\u003c/li\u003e  \u003cli\u003ethe type of security challenge that may be be raised before the Transaction Request proceeds, and\u003c/li\u003e  \u003cli\u003ethe threshold of that challenge.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFor instance in a \u0027SANDBOX_TAN\u0027 Transaction Request, for amounts over 1000 currency units, the user must supply a positive integer to complete the Transaction Request and create a Transaction.\u003c/p\u003e\u003cp\u003eThis approach aims to provide only one endpoint for initiating transactions, and one that handles challenges, whilst still allowing flexibility with the payload and internal logic.\u003c/p\u003e",
        "operationId": "vv1_4_0-getTransactionRequestTypes",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionRequestTypesJsonV140"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.4.0/banks/{BANK_ID}/crm-events": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get CRM Events",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "",
        "operationId": "vv1_4_0-getCrmEvents",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CrmEventsJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.4.0/banks/{BANK_ID}/customer/{CUSTOMER_ID}/messages": {
      "post": {
        "tags": [
          "Customer-Message",
          "Customer",
          "Person"
        ],
        "summary": "Add Customer Message.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd a message for the customer specified by CUSTOMER_ID\u003c/p\u003e",
        "operationId": "vv1_4_0-addCustomerMessage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCustomerMessageJson"
            }
          },
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.4.0/banks/{BANK_ID}/customer/messages": {
      "get": {
        "tags": [
          "Customer-Message",
          "Customer"
        ],
        "summary": "Get Customer Messages (current)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet messages for the logged in customer Messages sent to the currently authenticated user.\u003c/p\u003e\u003cp\u003eAuthentication via OAuth is required.\u003c/p\u003e",
        "operationId": "vv1_4_0-getCustomerMessages",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CustomerMessagesJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v1.4.0/resource-docs/{API_VERSION}/obp": {
      "get": {
        "tags": [
          "API-Documentation",
          "API"
        ],
        "summary": "Get Resource Docs.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet documentation about the RESTful resources on this server including example bodies for POST and PUT requests.\u003c/p\u003e\u003cp\u003eThis is the native data format used to document OBP endpoints. Each endpoint has a Resource Doc (a Scala case class) defined in the source code.\u003c/p\u003e\u003cp\u003eThis endpoint is used by OBP API Explorer to display and work with the API documentation.\u003c/p\u003e\u003cp\u003eMost (but not all) fields are also available in swagger format. (The Swagger endpoint is built from Resource Docs.)\u003c/p\u003e\u003cp\u003eAPI_VERSION is the version you want documentation about e.g. v3.0.0\u003c/p\u003e\u003cp\u003eYou may filter this endpoint with tags parameter e.g. ?tags\u003dAccount,Bank\u003c/p\u003e\u003cp\u003eYou may filter this endpoint with functions parameter e.g. ?functions\u003denableDisableConsumers,getConnectorMetrics\u003c/p\u003e\u003cp\u003eFor possible function values, see implemented_by.function in the JSON returned by this endpoint or the OBP source code or the footer of the API Explorer which produces a comma separated list of functions that reflect the server or filtering by API Explorer based on tags etc.\u003c/p\u003e\u003cul\u003e\u003cli\u003e operation_id is concatenation of \"v\", version and function and should be unique (used for DOM element IDs etc. maybe used to link to source code) \u003c/li\u003e\u003cli\u003e version references the version that the API call is defined in.\u003c/li\u003e\u003cli\u003e function is the (scala) partial function that implements this endpoint. It is unique per version of the API.\u003c/li\u003e\u003cli\u003e request_url is empty for the root call, else the path.\u003c/li\u003e\u003cli\u003e summary is a short description inline with the swagger terminology. \u003c/li\u003e\u003cli\u003e description may contain html markup (generated from markdown on the server).\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "vv1_4_0-getResourceDocsObp",
        "parameters": [
          {
            "in": "path",
            "name": "API_VERSION",
            "description": "eg:v2.2.0, v3.0.0",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      }
    },
    "/obp/v1.4.0/resource-docs/{API_VERSION}/swagger": {
      "get": {
        "tags": [
          "API-Documentation",
          "API"
        ],
        "summary": "Get Swagger documentation",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns documentation about the RESTful resources on this server in Swagger format.\u003c/p\u003e\u003cp\u003eAPI_VERSION is the version you want documentation about e.g. v3.0.0\u003c/p\u003e\u003cp\u003eYou may filter this endpoint using the \u0027tags\u0027 url parameter e.g. ?tags\u003dAccount,Bank\u003c/p\u003e\u003cp\u003e(All endpoints are given one or more tags which for used in grouping)\u003c/p\u003e\u003cp\u003eYou may filter this endpoint using the \u0027functions\u0027 url parameter e.g. ?functions\u003denableDisableConsumers,getConnectorMetrics\u003c/p\u003e\u003cp\u003e(Each endpoint is implemented in the OBP Scala code by a \u0027function\u0027)\u003c/p\u003e\u003cp\u003eSee the Resource Doc endpoint for more information.\u003c/p\u003e",
        "operationId": "vv1_4_0-getResourceDocsSwagger",
        "parameters": [
          {
            "in": "path",
            "name": "API_VERSION",
            "description": "eg:v2.2.0, v3.0.0",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/accounts/public": {
      "get": {
        "tags": [
          "Account-Public",
          "Account",
          "PublicData"
        ],
        "summary": "Get Public Accounts at all Banks.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet public accounts at all banks (Anonymous access). Returns accounts that contain at least one public view (a view where is_public is true) For each account the API returns the ID and the available views.\u003c/p\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv2_0_0-publicAccountsAllBanks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BasicAccountsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/accounts": {
      "get": {
        "tags": [
          "Account",
          "PrivateData",
          "PublicData"
        ],
        "summary": "Get Accounts at Bank.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the list of accounts at BANK_ID that the user has access to. For each account the API returns the account ID and the views available to the user.. Each account must have at least one private View.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_0_0-getPrivateAccountsAtOneBank",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BasicAccountsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankNotFound"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/permissions": {
      "get": {
        "tags": [
          "Account-View",
          "Account",
          "User",
          "Entitlement"
        ],
        "summary": "Get access.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the list of the permissions at BANK_ID for account ACCOUNT_ID, with each time a pair composed of the user and the views that he has access to.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory and the user needs to have access to the owner view.\u003c/p\u003e",
        "operationId": "vv2_0_0-getPermissionsForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PermissionsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/accounts/public": {
      "get": {
        "tags": [
          "Account-Public",
          "Account",
          "PublicData"
        ],
        "summary": "Get Public Accounts at Bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns a list of the public accounts (Anonymous access) at BANK_ID. For each account the API returns the ID and the available views.\u003c/p\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv2_0_0-publicAccountsAtOneBank",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BasicAccountsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_check/{KYC_CHECK_ID}": {
      "put": {
        "tags": [
          "KYC",
          "Customer"
        ],
        "summary": "Add KYC Check",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status.\u003c/p\u003e",
        "operationId": "vv2_0_0-addKycCheck",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostKycCheckJSON"
            }
          },
          {
            "in": "path",
            "name": "KYC_CHECK_ID",
            "description": "The kyc check id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/KycCheckJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_documents/{KYC_DOCUMENT_ID}": {
      "put": {
        "tags": [
          "KYC",
          "Customer"
        ],
        "summary": "Add KYC Document.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc. \u003c/p\u003e",
        "operationId": "vv2_0_0-addKycDocument",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostKycDocumentJSON"
            }
          },
          {
            "in": "path",
            "name": "KYC_DOCUMENT_ID",
            "description": "The kyc document id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/KycDocumentJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_media/{KYC_MEDIA_ID}": {
      "put": {
        "tags": [
          "KYC",
          "Customer"
        ],
        "summary": "Add KYC Media.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc.\u003c/p\u003e",
        "operationId": "vv2_0_0-addKycMedia",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostKycMediaJSON"
            }
          },
          {
            "in": "path",
            "name": "KYC_MEDIA_ID",
            "description": "The kyc media id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/KycMediaJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/kyc_statuses": {
      "put": {
        "tags": [
          "KYC",
          "Customer"
        ],
        "summary": "Add KYC Status",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer\u003c/p\u003e",
        "operationId": "vv2_0_0-addKycStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostKycStatusJSON"
            }
          },
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/KycStatusJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/social_media_handles": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get Customer Social Media Handles",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet social media handles for a customer specified by CUSTOMER_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_0_0-getSocialMediaHandles",
        "parameters": [
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SocialMediasJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Add Social Media Handle",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd a social media handle for the customer specified by CUSTOMER_ID.\u003c/p\u003e",
        "operationId": "vv2_0_0-addSocialMediaHandle",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SocialMediaJSON"
            }
          },
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/meetings": {
      "get": {
        "tags": [
          "Customer-Meeting",
          "KYC",
          "Customer",
          "User",
          "Experimental"
        ],
        "summary": "Get Meetings",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eMeetings contain meta data about, and are used to facilitate, video conferences / chats etc.\u003c/p\u003e\u003cp\u003eThe actual conference/chats are handled by external services.\u003c/p\u003e\u003cp\u003eLogin is required.\u003c/p\u003e\u003cp\u003eThis call is \u003cstrong\u003eexperimental\u003c/strong\u003e and will require further authorisation in the future.\u003c/p\u003e",
        "operationId": "vv2_0_0-getMeetings",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MeetingsJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customer-Meeting",
          "KYC",
          "Customer",
          "User",
          "Experimental"
        ],
        "summary": "Create Meeting (video conference/call)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Meeting: Initiate a video conference/call with the bank.\u003c/p\u003e\u003cp\u003eThe Meetings resource contains meta data about video/other conference sessions, not the video/audio/chat itself.\u003c/p\u003e\u003cp\u003eThe actual conferencing is handled by external providers. Currently OBP supports tokbox video conferences (WIP).\u003c/p\u003e\u003cp\u003eThis is not a recomendation of tokbox per se.\u003c/p\u003e\u003cp\u003eprovider_id determines the provider of the meeting / video chat service. MUST be url friendly (no spaces).\u003c/p\u003e\u003cp\u003epurpose_id explains the purpose of the chat. onboarding | mortgage | complaint etc. MUST be url friendly (no spaces).\u003c/p\u003e\u003cp\u003eLogin is required.\u003c/p\u003e\u003cp\u003eThis call is \u003cstrong\u003eexperimental\u003c/strong\u003e. Currently staff_user_id is not set. Further calls will be needed to correctly set this.\u003c/p\u003e",
        "operationId": "vv2_0_0-createMeeting",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMeetingJson"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MeetingJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/meetings/MEETING_ID": {
      "get": {
        "tags": [
          "Customer-Meeting",
          "KYC",
          "Customer",
          "User",
          "Experimental"
        ],
        "summary": "Get Meeting",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Meeting specified by BANK_ID / MEETING_ID Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.\u003c/p\u003e\u003cp\u003eThe actual conference/chats are handled by external services.\u003c/p\u003e\u003cp\u003eLogin is required.\u003c/p\u003e\u003cp\u003eThis call is \u003cstrong\u003eexperimental\u003c/strong\u003e and will require further authorisation in the future.\u003c/p\u003e",
        "operationId": "vv2_0_0-getMeeting",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MeetingJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/transaction-types": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Get Transaction Types at Bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Transaction Types for the bank specified by BANK_ID:\u003c/p\u003e\u003cp\u003eLists the possible Transaction Types available at the bank (as opposed to Transaction Request Types which are the possible ways Transactions can be created by this API Server).\u003c/p\u003e\u003cul\u003e  \u003cli\u003eid : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.\u003c/li\u003e  \u003cli\u003ebank_id : The bank that supports this TransactionType\u003c/li\u003e  \u003cli\u003eshort_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here\u003c/li\u003e  \u003cli\u003esummary : A succinct summary\u003c/li\u003e  \u003cli\u003edescription : A longer description\u003c/li\u003e  \u003cli\u003echarge : The charge to the customer for each one of these\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv2_0_0-getTransactionTypes",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionTypesJsonV200"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankNotFound"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/banks/{BANK_ID}/user_customer_links": {
      "post": {
        "tags": [
          "Customer",
          "User"
        ],
        "summary": "Create User Customer Link.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eLink a User to a Customer\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eCanCreateUserCustomerLink OR CanCreateUserCustomerLinkAtAnyBank entitlements are required.\u003c/p\u003e",
        "operationId": "vv2_0_0-createUserCustomerLinks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserCustomerLinkJson"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserCustomerLinkJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/customers/{CUSTOMER_ID}/kyc_checks": {
      "get": {
        "tags": [
          "KYC",
          "Customer"
        ],
        "summary": "Get Customer KYC Checks",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet KYC checks for the Customer specified by CUSTOMER_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_0_0-getKycChecks",
        "parameters": [
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/KycChecksJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/customers/{CUSTOMER_ID}/kyc_documents": {
      "get": {
        "tags": [
          "KYC",
          "Customer"
        ],
        "summary": "Get Customer KYC Documents",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet KYC (know your customer) documents for a customer specified by CUSTOMER_ID Get a list of documents that affirm the identity of the customer Passport, driving licence etc. Authentication is Optional\u003c/p\u003e",
        "operationId": "vv2_0_0-getKycDocuments",
        "parameters": [
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/KycDocumentsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/customers/{CUSTOMER_ID}/kyc_media": {
      "get": {
        "tags": [
          "KYC",
          "Customer"
        ],
        "summary": "Get KYC Media for a customer",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet KYC media (scans, pictures, videos) that affirms the identity of the customer.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_0_0-getKycMedia",
        "parameters": [
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/KycMediasJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/customers/{CUSTOMER_ID}/kyc_statuses": {
      "get": {
        "tags": [
          "KYC",
          "Customer"
        ],
        "summary": "Get Customer KYC statuses",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the KYC statuses for a customer specified by CUSTOMER_ID over time.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_0_0-getKycStatuses",
        "parameters": [
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/KycStatusesJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/entitlements": {
      "get": {
        "tags": [
          "API-Role",
          "Entitlement"
        ],
        "summary": "Get all Entitlements",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eLogin is required.\u003c/p\u003e",
        "operationId": "vv2_0_0-getAllEntitlements",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementJSONs"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/search/metrics": {
      "get": {
        "tags": [
          "API-Metric",
          "API"
        ],
        "summary": "Search API Metrics via Elasticsearch.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eSearch the API calls made to this API instance via Elastic Search.\u003c/p\u003e\u003cp\u003eLogin is required.\u003c/p\u003e\u003cp\u003eCanSearchMetrics entitlement is required to search metrics data.\u003c/p\u003e\u003cp\u003eparameters:\u003c/p\u003e\u003cp\u003eesType - elasticsearch type\u003c/p\u003e\u003cp\u003esimple query:\u003c/p\u003e\u003cp\u003eq - plain_text_query\u003c/p\u003e\u003cp\u003edf - default field to search\u003c/p\u003e\u003cp\u003esort - field to sort on\u003c/p\u003e\u003cp\u003esize - number of hits returned, default 10\u003c/p\u003e\u003cp\u003efrom - show hits starting from\u003c/p\u003e\u003cp\u003ejson query:\u003c/p\u003e\u003cp\u003esource - JSON_query_(URL-escaped)\u003c/p\u003e\u003cp\u003eexample usage:\u003c/p\u003e\u003cp\u003e/search/metrics/q\u003dfindThis\u003c/p\u003e\u003cp\u003eor:\u003c/p\u003e\u003cp\u003e/search/metrics/source\u003d{\"query\":{\"query_string\":{\"query\":\"findThis\"}}}\u003c/p\u003e\u003cp\u003eNote!!\u003c/p\u003e\u003cp\u003eThe whole JSON query string MUST be URL-encoded:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eFor { use %7B\u003c/li\u003e  \u003cli\u003eFor } use %7D\u003c/li\u003e  \u003cli\u003eFor : use %3A\u003c/li\u003e  \u003cli\u003eFor \" use %22\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eetc..\u003c/p\u003e\u003cp\u003eOnly q, source and esType are passed to Elastic\u003c/p\u003e\u003cp\u003eElastic simple query: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html\u003c/p\u003e\u003cp\u003eElastic JSON query: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html\u003c/p\u003e",
        "operationId": "vv2_0_0-elasticSearchMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/users": {
      "post": {
        "tags": [
          "User",
          "Onboarding"
        ],
        "summary": "Create User.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreates OBP user.  No authorisation (currently) required.\u003c/p\u003e\u003cp\u003eMimics current webform to Register.\u003c/p\u003e\u003cp\u003eRequires username(email) and password.\u003c/p\u003e\u003cp\u003eReturns 409 error if username not unique.\u003c/p\u003e\u003cp\u003eMay require validation of email address.\u003c/p\u003e",
        "operationId": "vv2_0_0-createUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserJson"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserJsonV200"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/users/{USER_ID}/entitlement/{ENTITLEMENT_ID}": {
      "delete": {
        "tags": [
          "API-Role",
          "User",
          "Entitlement"
        ],
        "summary": "Delete Entitlement",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDelete Entitlement specified by ENTITLEMENT_ID for an user specified by USER_ID\u003c/p\u003e\u003cp\u003eAuthentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.\u003c/p\u003e",
        "operationId": "vv2_0_0-deleteEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "ENTITLEMENT_ID",
            "description": "The entitblement id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "USER_ID",
            "description": "The user id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.0.0/users/{USER_ID}/entitlements": {
      "get": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Get Entitlements for User",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_0_0-getEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "USER_ID",
            "description": "The user id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementJSONs"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Add Entitlement for a User.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Entitlement. Grant Role to User.\u003c/p\u003e\u003cp\u003eEntitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)\u003c/p\u003e\u003cp\u003eFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. \"bank_id\":\"\"\u003c/p\u003e\u003cp\u003eFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. \"bank_id\":\"my-bank-id\"\u003c/p\u003e\u003cp\u003eAuthentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.\u003c/p\u003e",
        "operationId": "vv2_0_0-addEntitlement",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEntitlementJSON"
            }
          },
          {
            "in": "path",
            "name": "USER_ID",
            "description": "The user id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transaction-request-types/COUNTERPARTY/transaction-requests": {
      "post": {
        "tags": [
          "Transaction-Request"
        ],
        "summary": "Create Transaction Request (COUNTERPARTY)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eSpecial instructions for COUNTERPARTY:\u003c/p\u003e\u003cp\u003eWhen using a COUNTERPARTY to create a Transaction Request, specificy the counterparty_id in the body of the request. The routing details of the counterparty will be forwarded for the transfer.\u003c/p\u003e\u003cp\u003eInitiate a Payment via creating a Transaction Request.\u003c/p\u003e\u003cp\u003eIn OBP, a \u003ccode\u003etransaction request\u003c/code\u003e may or may not result in a \u003ccode\u003etransaction\u003c/code\u003e. However, a \u003ccode\u003etransaction\u003c/code\u003e only has one possible state: completed.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003eTransaction Request\u003c/code\u003e can have one of several states.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTransactions\u003c/code\u003e are modeled on items in a bank statement that represent the movement of money.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTransaction Requests\u003c/code\u003e are requests to move money which may or may not succeeed and thus result in a \u003ccode\u003eTransaction\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003eTransaction Request\u003c/code\u003e might create a security challenge that needs to be answered before the \u003ccode\u003eTransaction Request\u003c/code\u003e proceeds.\u003c/p\u003e\u003cp\u003eTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\u003c/p\u003e\u003cp\u003eTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response. This provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\u003c/p\u003e\u003cp\u003eThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\u003c/p\u003e\u003cp\u003eIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to SANDBOX_TAN. See getTransactionRequestTypesSupportedByBank for all supported types.\u003c/p\u003e\u003cp\u003eIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\u003c/p\u003e\u003cp\u003eIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\u003c/p\u003e\u003cp\u003eYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\u003c/p\u003e\u003cp\u003eThe following static FX rates are available in sandbox mode:\u003c/p\u003e\u003cp\u003e{  \"XAF\":{  \"AUD\":0.00228226,  \"KRW\":1.87975,  \"JOD\":0.00127784,  \"GBP\":0.00131092,  \"AED\":0.00601555,  \"INR\":0.110241,  \"JPY\":0.185328,  \"USD\":0.00163773,  \"ILS\":0.00641333,  \"EUR\":0.00152449  },  \"AUD\":{  \"XAF\":438.162,  \"KRW\":895.304,  \"JOD\":0.556152,  \"GBP\":0.609788,  \"AED\":2.88368,  \"INR\":50.4238,  \"JPY\":87.0936,  \"USD\":0.785256,  \"ILS\":2.83558,  \"EUR\":0.667969  },  \"KRW\":{  \"XAF\":0.531986,  \"AUD\":0.00111694,  \"JOD\":6.30634E-4,  \"GBP\":6.97389E-4,  \"AED\":0.00320019,  \"INR\":0.0586469,  \"JPY\":0.0985917,  \"USD\":8.7125E-4,  \"ILS\":0.00316552,  \"EUR\":8.11008E-4  },  \"JOD\":{  \"XAF\":782.572,  \"AUD\":1.63992,  \"KRW\":1585.68,  \"GBP\":1.06757,  \"AED\":5.18231,  \"INR\":90.1236,  \"JPY\":156.304,  \"USD\":1.41112,  \"ILS\":5.02018,  \"EUR\":0.237707  },  \"GBP\":{  \"XAF\":762.826,  \"AUD\":1.63992,  \"KRW\":1433.92,  \"JOD\":0.936707,  \"AED\":4.58882,  \"INR\":84.095,  \"JPY\":141.373,  \"USD\":1.2493,  \"ILS\":4.7002,  \"EUR\":1.16278  },  \"AED\":{  \"XAF\":166.236,  \"AUD\":0.346779,  \"KRW\":312.482,  \"GBP\":0.217921,  \"AED\":0.192964,  \"INR\":18.3255,  \"JPY\":30.8081,  \"USD\":0.27225,  \"ILS\":0.968033,  \"EUR\":0.253425  },  \"INR\":{  \"XAF\":9.07101,  \"AUD\":0.0198319,  \"KRW\":17.0512,  \"JOD\":0.0110959,  \"GBP\":0.0118913,  \"AED\":0.0545671,  \"JPY\":1.68111,  \"USD\":0.0148559,  \"ILS\":0.0556764,  \"EUR\":0.0138287  },  \"JPY\":{  \"XAF\":5.39585,  \"AUD\":0.0114819,  \"KRW\":10.1428,  \"JOD\":0.00639777,  \"GBP\":0.0070735,  \"AED\":0.032459,  \"INR\":0.594846,  \"USD\":0.00883695,  \"ILS\":0.0320926,  \"EUR\":0.00822592  },  \"USD\":{  \"XAF\":610.601,  \"AUD\":1.27347,  \"KRW\":1147.78,  \"JOD\":0.708659,  \"GBP\":0.800446,  \"AED\":3.6731,  \"INR\":67.3135,  \"JPY\":113.161,  \"ILS\":3.55495,  \"EUR\":0.930886  },  \"ILS\":{  \"XAF\":155.925,  \"AUD\":0.352661,  \"KRW\":315.903,  \"JOD\":0.199196,  \"GBP\":0.212763,  \"AED\":1.03302,  \"INR\":17.9609,  \"JPY\":31.1599,  \"USD\":0.281298,  \"EUR\":1.19318  },  \"EUR\":{  \"XAF\":655.957,  \"AUD\":1.49707,  \"KRW\":1233.03,  \"JOD\":0.838098,  \"GBP\":0.860011,  \"AED\":3.94594,  \"INR\":72.3136,  \"JPY\":121.567,  \"USD\":1.07428,  \"ILS\":4.20494  } }\u003c/p\u003e\u003cp\u003eTransaction Requests satisfy PSD2 requirements thus:\u003c/p\u003e\u003cp\u003e1) A transaction can be initiated by a third party application.\u003c/p\u003e\u003cp\u003e2) The customer is informed of the charge that will incurred.\u003c/p\u003e\u003cp\u003e3) The call supports delegated authentication (OAuth)\u003c/p\u003e\u003cp\u003eSee \u003ca href\u003d\"https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py\"\u003ethis python code\u003c/a\u003e for a complete example of this flow.\u003c/p\u003e\u003cp\u003eThere is further documentation \u003ca href\u003d\"https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-createTransactionRequestCouterparty",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRequestBodyCounterpartyJSON"
            }
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionRequestWithChargeJSON210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transaction-request-types/FREE_FORM/transaction-requests": {
      "post": {
        "tags": [
          "Transaction-Request"
        ],
        "summary": "Create Transaction Request (FREE_FORM).",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eInitiate a Payment via creating a Transaction Request.\u003c/p\u003e\u003cp\u003eIn OBP, a \u003ccode\u003etransaction request\u003c/code\u003e may or may not result in a \u003ccode\u003etransaction\u003c/code\u003e. However, a \u003ccode\u003etransaction\u003c/code\u003e only has one possible state: completed.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003eTransaction Request\u003c/code\u003e can have one of several states.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTransactions\u003c/code\u003e are modeled on items in a bank statement that represent the movement of money.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTransaction Requests\u003c/code\u003e are requests to move money which may or may not succeeed and thus result in a \u003ccode\u003eTransaction\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003eTransaction Request\u003c/code\u003e might create a security challenge that needs to be answered before the \u003ccode\u003eTransaction Request\u003c/code\u003e proceeds.\u003c/p\u003e\u003cp\u003eTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\u003c/p\u003e\u003cp\u003eTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response. This provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\u003c/p\u003e\u003cp\u003eThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\u003c/p\u003e\u003cp\u003eIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to SANDBOX_TAN. See getTransactionRequestTypesSupportedByBank for all supported types.\u003c/p\u003e\u003cp\u003eIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\u003c/p\u003e\u003cp\u003eIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\u003c/p\u003e\u003cp\u003eYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\u003c/p\u003e\u003cp\u003eThe following static FX rates are available in sandbox mode:\u003c/p\u003e\u003cp\u003e{  \"XAF\":{  \"AUD\":0.00228226,  \"KRW\":1.87975,  \"JOD\":0.00127784,  \"GBP\":0.00131092,  \"AED\":0.00601555,  \"INR\":0.110241,  \"JPY\":0.185328,  \"USD\":0.00163773,  \"ILS\":0.00641333,  \"EUR\":0.00152449  },  \"AUD\":{  \"XAF\":438.162,  \"KRW\":895.304,  \"JOD\":0.556152,  \"GBP\":0.609788,  \"AED\":2.88368,  \"INR\":50.4238,  \"JPY\":87.0936,  \"USD\":0.785256,  \"ILS\":2.83558,  \"EUR\":0.667969  },  \"KRW\":{  \"XAF\":0.531986,  \"AUD\":0.00111694,  \"JOD\":6.30634E-4,  \"GBP\":6.97389E-4,  \"AED\":0.00320019,  \"INR\":0.0586469,  \"JPY\":0.0985917,  \"USD\":8.7125E-4,  \"ILS\":0.00316552,  \"EUR\":8.11008E-4  },  \"JOD\":{  \"XAF\":782.572,  \"AUD\":1.63992,  \"KRW\":1585.68,  \"GBP\":1.06757,  \"AED\":5.18231,  \"INR\":90.1236,  \"JPY\":156.304,  \"USD\":1.41112,  \"ILS\":5.02018,  \"EUR\":0.237707  },  \"GBP\":{  \"XAF\":762.826,  \"AUD\":1.63992,  \"KRW\":1433.92,  \"JOD\":0.936707,  \"AED\":4.58882,  \"INR\":84.095,  \"JPY\":141.373,  \"USD\":1.2493,  \"ILS\":4.7002,  \"EUR\":1.16278  },  \"AED\":{  \"XAF\":166.236,  \"AUD\":0.346779,  \"KRW\":312.482,  \"GBP\":0.217921,  \"AED\":0.192964,  \"INR\":18.3255,  \"JPY\":30.8081,  \"USD\":0.27225,  \"ILS\":0.968033,  \"EUR\":0.253425  },  \"INR\":{  \"XAF\":9.07101,  \"AUD\":0.0198319,  \"KRW\":17.0512,  \"JOD\":0.0110959,  \"GBP\":0.0118913,  \"AED\":0.0545671,  \"JPY\":1.68111,  \"USD\":0.0148559,  \"ILS\":0.0556764,  \"EUR\":0.0138287  },  \"JPY\":{  \"XAF\":5.39585,  \"AUD\":0.0114819,  \"KRW\":10.1428,  \"JOD\":0.00639777,  \"GBP\":0.0070735,  \"AED\":0.032459,  \"INR\":0.594846,  \"USD\":0.00883695,  \"ILS\":0.0320926,  \"EUR\":0.00822592  },  \"USD\":{  \"XAF\":610.601,  \"AUD\":1.27347,  \"KRW\":1147.78,  \"JOD\":0.708659,  \"GBP\":0.800446,  \"AED\":3.6731,  \"INR\":67.3135,  \"JPY\":113.161,  \"ILS\":3.55495,  \"EUR\":0.930886  },  \"ILS\":{  \"XAF\":155.925,  \"AUD\":0.352661,  \"KRW\":315.903,  \"JOD\":0.199196,  \"GBP\":0.212763,  \"AED\":1.03302,  \"INR\":17.9609,  \"JPY\":31.1599,  \"USD\":0.281298,  \"EUR\":1.19318  },  \"EUR\":{  \"XAF\":655.957,  \"AUD\":1.49707,  \"KRW\":1233.03,  \"JOD\":0.838098,  \"GBP\":0.860011,  \"AED\":3.94594,  \"INR\":72.3136,  \"JPY\":121.567,  \"USD\":1.07428,  \"ILS\":4.20494  } }\u003c/p\u003e\u003cp\u003eTransaction Requests satisfy PSD2 requirements thus:\u003c/p\u003e\u003cp\u003e1) A transaction can be initiated by a third party application.\u003c/p\u003e\u003cp\u003e2) The customer is informed of the charge that will incurred.\u003c/p\u003e\u003cp\u003e3) The call supports delegated authentication (OAuth)\u003c/p\u003e\u003cp\u003eSee \u003ca href\u003d\"https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py\"\u003ethis python code\u003c/a\u003e for a complete example of this flow.\u003c/p\u003e\u003cp\u003eThere is further documentation \u003ca href\u003d\"https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-createTransactionRequestFreeForm",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRequestBodyJsonV200"
            }
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionRequestWithChargeJSON210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transaction-request-types/SANDBOX_TAN/transaction-requests": {
      "post": {
        "tags": [
          "Transaction-Request"
        ],
        "summary": "Create Transaction Request (SANDBOX_TAN)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eWhen using SANDBOX_TAN, the payee is set in the request body.\u003c/p\u003e\u003cp\u003eMoney goes into the BANK_ID and ACCOUNT_ID specified in the request body.\u003c/p\u003e\u003cp\u003eInitiate a Payment via creating a Transaction Request.\u003c/p\u003e\u003cp\u003eIn OBP, a \u003ccode\u003etransaction request\u003c/code\u003e may or may not result in a \u003ccode\u003etransaction\u003c/code\u003e. However, a \u003ccode\u003etransaction\u003c/code\u003e only has one possible state: completed.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003eTransaction Request\u003c/code\u003e can have one of several states.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTransactions\u003c/code\u003e are modeled on items in a bank statement that represent the movement of money.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTransaction Requests\u003c/code\u003e are requests to move money which may or may not succeeed and thus result in a \u003ccode\u003eTransaction\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003eTransaction Request\u003c/code\u003e might create a security challenge that needs to be answered before the \u003ccode\u003eTransaction Request\u003c/code\u003e proceeds.\u003c/p\u003e\u003cp\u003eTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\u003c/p\u003e\u003cp\u003eTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response. This provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\u003c/p\u003e\u003cp\u003eThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\u003c/p\u003e\u003cp\u003eIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to SANDBOX_TAN. See getTransactionRequestTypesSupportedByBank for all supported types.\u003c/p\u003e\u003cp\u003eIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\u003c/p\u003e\u003cp\u003eIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\u003c/p\u003e\u003cp\u003eYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\u003c/p\u003e\u003cp\u003eThe following static FX rates are available in sandbox mode:\u003c/p\u003e\u003cp\u003e{  \"XAF\":{  \"AUD\":0.00228226,  \"KRW\":1.87975,  \"JOD\":0.00127784,  \"GBP\":0.00131092,  \"AED\":0.00601555,  \"INR\":0.110241,  \"JPY\":0.185328,  \"USD\":0.00163773,  \"ILS\":0.00641333,  \"EUR\":0.00152449  },  \"AUD\":{  \"XAF\":438.162,  \"KRW\":895.304,  \"JOD\":0.556152,  \"GBP\":0.609788,  \"AED\":2.88368,  \"INR\":50.4238,  \"JPY\":87.0936,  \"USD\":0.785256,  \"ILS\":2.83558,  \"EUR\":0.667969  },  \"KRW\":{  \"XAF\":0.531986,  \"AUD\":0.00111694,  \"JOD\":6.30634E-4,  \"GBP\":6.97389E-4,  \"AED\":0.00320019,  \"INR\":0.0586469,  \"JPY\":0.0985917,  \"USD\":8.7125E-4,  \"ILS\":0.00316552,  \"EUR\":8.11008E-4  },  \"JOD\":{  \"XAF\":782.572,  \"AUD\":1.63992,  \"KRW\":1585.68,  \"GBP\":1.06757,  \"AED\":5.18231,  \"INR\":90.1236,  \"JPY\":156.304,  \"USD\":1.41112,  \"ILS\":5.02018,  \"EUR\":0.237707  },  \"GBP\":{  \"XAF\":762.826,  \"AUD\":1.63992,  \"KRW\":1433.92,  \"JOD\":0.936707,  \"AED\":4.58882,  \"INR\":84.095,  \"JPY\":141.373,  \"USD\":1.2493,  \"ILS\":4.7002,  \"EUR\":1.16278  },  \"AED\":{  \"XAF\":166.236,  \"AUD\":0.346779,  \"KRW\":312.482,  \"GBP\":0.217921,  \"AED\":0.192964,  \"INR\":18.3255,  \"JPY\":30.8081,  \"USD\":0.27225,  \"ILS\":0.968033,  \"EUR\":0.253425  },  \"INR\":{  \"XAF\":9.07101,  \"AUD\":0.0198319,  \"KRW\":17.0512,  \"JOD\":0.0110959,  \"GBP\":0.0118913,  \"AED\":0.0545671,  \"JPY\":1.68111,  \"USD\":0.0148559,  \"ILS\":0.0556764,  \"EUR\":0.0138287  },  \"JPY\":{  \"XAF\":5.39585,  \"AUD\":0.0114819,  \"KRW\":10.1428,  \"JOD\":0.00639777,  \"GBP\":0.0070735,  \"AED\":0.032459,  \"INR\":0.594846,  \"USD\":0.00883695,  \"ILS\":0.0320926,  \"EUR\":0.00822592  },  \"USD\":{  \"XAF\":610.601,  \"AUD\":1.27347,  \"KRW\":1147.78,  \"JOD\":0.708659,  \"GBP\":0.800446,  \"AED\":3.6731,  \"INR\":67.3135,  \"JPY\":113.161,  \"ILS\":3.55495,  \"EUR\":0.930886  },  \"ILS\":{  \"XAF\":155.925,  \"AUD\":0.352661,  \"KRW\":315.903,  \"JOD\":0.199196,  \"GBP\":0.212763,  \"AED\":1.03302,  \"INR\":17.9609,  \"JPY\":31.1599,  \"USD\":0.281298,  \"EUR\":1.19318  },  \"EUR\":{  \"XAF\":655.957,  \"AUD\":1.49707,  \"KRW\":1233.03,  \"JOD\":0.838098,  \"GBP\":0.860011,  \"AED\":3.94594,  \"INR\":72.3136,  \"JPY\":121.567,  \"USD\":1.07428,  \"ILS\":4.20494  } }\u003c/p\u003e\u003cp\u003eTransaction Requests satisfy PSD2 requirements thus:\u003c/p\u003e\u003cp\u003e1) A transaction can be initiated by a third party application.\u003c/p\u003e\u003cp\u003e2) The customer is informed of the charge that will incurred.\u003c/p\u003e\u003cp\u003e3) The call supports delegated authentication (OAuth)\u003c/p\u003e\u003cp\u003eSee \u003ca href\u003d\"https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py\"\u003ethis python code\u003c/a\u003e for a complete example of this flow.\u003c/p\u003e\u003cp\u003eThere is further documentation \u003ca href\u003d\"https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-createTransactionRequestSandboxTan",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRequestBodyJsonV200"
            }
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionRequestWithChargeJSON210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transaction-request-types/SEPA/transaction-requests": {
      "post": {
        "tags": [
          "Transaction-Request"
        ],
        "summary": "Create Transaction Request (SEPA)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eSpecial instructions for SEPA:\u003c/p\u003e\u003cp\u003eWhen using a SEPA Transaction Request, you specify the IBAN of a Counterparty in the body of the request. The routing details (IBAN) of the counterparty will be forwarded to the core banking system for the transfer.\u003c/p\u003e\u003cp\u003eInitiate a Payment via creating a Transaction Request.\u003c/p\u003e\u003cp\u003eIn OBP, a \u003ccode\u003etransaction request\u003c/code\u003e may or may not result in a \u003ccode\u003etransaction\u003c/code\u003e. However, a \u003ccode\u003etransaction\u003c/code\u003e only has one possible state: completed.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003eTransaction Request\u003c/code\u003e can have one of several states.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTransactions\u003c/code\u003e are modeled on items in a bank statement that represent the movement of money.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eTransaction Requests\u003c/code\u003e are requests to move money which may or may not succeeed and thus result in a \u003ccode\u003eTransaction\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eA \u003ccode\u003eTransaction Request\u003c/code\u003e might create a security challenge that needs to be answered before the \u003ccode\u003eTransaction Request\u003c/code\u003e proceeds.\u003c/p\u003e\u003cp\u003eTransaction Requests contain charge information giving the client the opportunity to proceed or not (as long as the challenge level is appropriate).\u003c/p\u003e\u003cp\u003eTransaction Requests can have one of several Transaction Request Types which expect different bodies. The escaped body is returned in the details key of the GET response. This provides some commonality and one URL for many different payment or transfer types with enough flexibility to validate them differently.\u003c/p\u003e\u003cp\u003eThe payer is set in the URL. Money comes out of the BANK_ID and ACCOUNT_ID specified in the URL.\u003c/p\u003e\u003cp\u003eIn sandbox mode, TRANSACTION_REQUEST_TYPE is commonly set to SANDBOX_TAN. See getTransactionRequestTypesSupportedByBank for all supported types.\u003c/p\u003e\u003cp\u003eIn sandbox mode, if the amount is less than 1000 EUR (any currency, unless it is set differently on this server), the transaction request will create a transaction without a challenge, else the Transaction Request will be set to INITIALISED and a challenge will need to be answered.\u003c/p\u003e\u003cp\u003eIf a challenge is created you must answer it using Answer Transaction Request Challenge before the Transaction is created.\u003c/p\u003e\u003cp\u003eYou can transfer between different currency accounts. (new in 2.0.0). The currency in body must match the sending account.\u003c/p\u003e\u003cp\u003eThe following static FX rates are available in sandbox mode:\u003c/p\u003e\u003cp\u003e{  \"XAF\":{  \"AUD\":0.00228226,  \"KRW\":1.87975,  \"JOD\":0.00127784,  \"GBP\":0.00131092,  \"AED\":0.00601555,  \"INR\":0.110241,  \"JPY\":0.185328,  \"USD\":0.00163773,  \"ILS\":0.00641333,  \"EUR\":0.00152449  },  \"AUD\":{  \"XAF\":438.162,  \"KRW\":895.304,  \"JOD\":0.556152,  \"GBP\":0.609788,  \"AED\":2.88368,  \"INR\":50.4238,  \"JPY\":87.0936,  \"USD\":0.785256,  \"ILS\":2.83558,  \"EUR\":0.667969  },  \"KRW\":{  \"XAF\":0.531986,  \"AUD\":0.00111694,  \"JOD\":6.30634E-4,  \"GBP\":6.97389E-4,  \"AED\":0.00320019,  \"INR\":0.0586469,  \"JPY\":0.0985917,  \"USD\":8.7125E-4,  \"ILS\":0.00316552,  \"EUR\":8.11008E-4  },  \"JOD\":{  \"XAF\":782.572,  \"AUD\":1.63992,  \"KRW\":1585.68,  \"GBP\":1.06757,  \"AED\":5.18231,  \"INR\":90.1236,  \"JPY\":156.304,  \"USD\":1.41112,  \"ILS\":5.02018,  \"EUR\":0.237707  },  \"GBP\":{  \"XAF\":762.826,  \"AUD\":1.63992,  \"KRW\":1433.92,  \"JOD\":0.936707,  \"AED\":4.58882,  \"INR\":84.095,  \"JPY\":141.373,  \"USD\":1.2493,  \"ILS\":4.7002,  \"EUR\":1.16278  },  \"AED\":{  \"XAF\":166.236,  \"AUD\":0.346779,  \"KRW\":312.482,  \"GBP\":0.217921,  \"AED\":0.192964,  \"INR\":18.3255,  \"JPY\":30.8081,  \"USD\":0.27225,  \"ILS\":0.968033,  \"EUR\":0.253425  },  \"INR\":{  \"XAF\":9.07101,  \"AUD\":0.0198319,  \"KRW\":17.0512,  \"JOD\":0.0110959,  \"GBP\":0.0118913,  \"AED\":0.0545671,  \"JPY\":1.68111,  \"USD\":0.0148559,  \"ILS\":0.0556764,  \"EUR\":0.0138287  },  \"JPY\":{  \"XAF\":5.39585,  \"AUD\":0.0114819,  \"KRW\":10.1428,  \"JOD\":0.00639777,  \"GBP\":0.0070735,  \"AED\":0.032459,  \"INR\":0.594846,  \"USD\":0.00883695,  \"ILS\":0.0320926,  \"EUR\":0.00822592  },  \"USD\":{  \"XAF\":610.601,  \"AUD\":1.27347,  \"KRW\":1147.78,  \"JOD\":0.708659,  \"GBP\":0.800446,  \"AED\":3.6731,  \"INR\":67.3135,  \"JPY\":113.161,  \"ILS\":3.55495,  \"EUR\":0.930886  },  \"ILS\":{  \"XAF\":155.925,  \"AUD\":0.352661,  \"KRW\":315.903,  \"JOD\":0.199196,  \"GBP\":0.212763,  \"AED\":1.03302,  \"INR\":17.9609,  \"JPY\":31.1599,  \"USD\":0.281298,  \"EUR\":1.19318  },  \"EUR\":{  \"XAF\":655.957,  \"AUD\":1.49707,  \"KRW\":1233.03,  \"JOD\":0.838098,  \"GBP\":0.860011,  \"AED\":3.94594,  \"INR\":72.3136,  \"JPY\":121.567,  \"USD\":1.07428,  \"ILS\":4.20494  } }\u003c/p\u003e\u003cp\u003eTransaction Requests satisfy PSD2 requirements thus:\u003c/p\u003e\u003cp\u003e1) A transaction can be initiated by a third party application.\u003c/p\u003e\u003cp\u003e2) The customer is informed of the charge that will incurred.\u003c/p\u003e\u003cp\u003e3) The call supports delegated authentication (OAuth)\u003c/p\u003e\u003cp\u003eSee \u003ca href\u003d\"https://github.com/OpenBankProject/Hello-OBP-DirectLogin-Python/blob/master/hello_payments.py\"\u003ethis python code\u003c/a\u003e for a complete example of this flow.\u003c/p\u003e\u003cp\u003eThere is further documentation \u003ca href\u003d\"https://github.com/OpenBankProject/OBP-API/wiki/Transaction-Requests\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-createTransactionRequestSepa",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRequestBodySEPAJSON"
            }
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionRequestWithChargeJSON210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transaction-request-types/{TRANSACTION_REQUEST_TYPE}/transaction-requests/{TRANSACTION_REQUEST_ID}/challenge": {
      "post": {
        "tags": [
          "Transaction-Request"
        ],
        "summary": "Answer Transaction Request Challenge.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eIn Sandbox mode, any string that can be converted to a positive integer will be accepted as an answer.\u003c/p\u003e\u003cp\u003eThis endpoint totally depends on createTransactionRequest, it need get the following data from createTransactionRequest response body.\u003c/p\u003e\u003cp\u003e1)\u003ccode\u003eTRANSACTION_REQUEST_TYPE\u003c/code\u003e : is the same as createTransactionRequest request URL . \u003c/p\u003e\u003cp\u003e2)\u003ccode\u003eTRANSACTION_REQUEST_ID\u003c/code\u003e : is the \u003ccode\u003eid\u003c/code\u003e field in createTransactionRequest response body.\u003c/p\u003e\u003cp\u003e3) \u003ccode\u003eid\u003c/code\u003e : is \u003ccode\u003echallenge.id\u003c/code\u003e field in createTransactionRequest response body. \u003c/p\u003e\u003cp\u003e4) \u003ccode\u003eanswer\u003c/code\u003e : must be \u003ccode\u003e123\u003c/code\u003e. if it is in sandbox mode. If it kafka mode, the answer can be got by phone message or other security ways.\u003c/p\u003e",
        "operationId": "vv2_1_0-answerTransactionRequestChallenge",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChallengeAnswerJSON"
            }
          },
          {
            "in": "path",
            "name": "TRANSACTION_REQUEST_ID",
            "description": "The transaction request id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "TRANSACTION_REQUEST_TYPE",
            "description": "The transaction request type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionRequestWithChargeJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transaction-requests": {
      "get": {
        "tags": [
          "Transaction-Request"
        ],
        "summary": "Get Transaction Requests.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns transaction requests for account specified by ACCOUNT_ID at bank specified by BANK_ID.\u003c/p\u003e\u003cp\u003eThe VIEW_ID specified must be \u0027owner\u0027 and the user must have access to this view.\u003c/p\u003e\u003cp\u003eVersion 2.0.0 now returns charge information.\u003c/p\u003e\u003cp\u003eTransaction Requests serve to initiate transactions that may or may not proceed. They contain information including:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eTransaction Request Id\u003c/li\u003e  \u003cli\u003eType\u003c/li\u003e  \u003cli\u003eStatus (INITIATED, COMPLETED)\u003c/li\u003e  \u003cli\u003eChallenge (in order to confirm the request)\u003c/li\u003e  \u003cli\u003eFrom Bank / Account\u003c/li\u003e  \u003cli\u003eDetails including Currency, Value, Description and other initiation information specific to each type. (Could potentialy include a list of future transactions.)\u003c/li\u003e  \u003cli\u003eRelated Transactions\u003c/li\u003e\u003c/ul\u003e\u003cp\u003ePSD2 Context: PSD2 requires transparency of charges to the customer. This endpoint provides the charge that would be applied if the Transaction Request proceeds - and a record of that charge there after. The customer can proceed with the Transaction by answering the security challenge.\u003c/p\u003e",
        "operationId": "vv2_1_0-getTransactionRequests",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionRequestWithChargeJSONs210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/branches/{BRANCH_ID}": {
      "put": {
        "tags": [
          "Bank-Branch"
        ],
        "summary": "Update Branch",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate an existing branch for a bank account (Authenticated access). Authentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-updateBranch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BranchJsonPutV210"
            }
          },
          {
            "in": "path",
            "name": "BRANCH_ID",
            "description": "The branch id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BranchJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/cards": {
      "post": {
        "tags": [
          "Card"
        ],
        "summary": "Create Card",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Card at bank specified by BANK_ID .\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-addCardsForBank",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPhysicalCardJSON"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PhysicalCardJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/customers": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get Customers for current User at Bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eRetuns a list of Customers at the Bank that are linked to the currently authenticated User.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-getCustomersForCurrentUserAtBank",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CustomerJsonV210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customer",
          "Person"
        ],
        "summary": "Create Customer.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eAdd a customer linked to the user specified by user_id The Customer resource stores the customer number, legal name, email, phone number, their date of birth, relationship status, education attained, a url for a profile image, KYC status etc. Dates need to be in the format 2013-01-21T23:08:00Z\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eCanCreateCustomer and CanCreateUserCustomerLink OR CanCreateCustomerAtAnyBank and CanCreateUserCustomerLinkAtAnyBank\u003c/p\u003e",
        "operationId": "vv2_1_0-createCustomer",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCustomerJsonV210"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CustomerJsonV210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/products": {
      "get": {
        "tags": [
          "Bank-Product"
        ],
        "summary": "Get Bank Products",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about the financial products offered by a bank specified by BANK_ID including:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eName\u003c/li\u003e  \u003cli\u003eCode\u003c/li\u003e  \u003cli\u003eCategory\u003c/li\u003e  \u003cli\u003eFamily\u003c/li\u003e  \u003cli\u003eSuper Family\u003c/li\u003e  \u003cli\u003eMore info URL\u003c/li\u003e  \u003cli\u003eDescription\u003c/li\u003e  \u003cli\u003eTerms and Conditions\u003c/li\u003e  \u003cli\u003eLicense the data under this endpoint is released under Authentication is Optional\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "vv2_1_0-getProducts",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductsJsonV210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/products/PRODUCT_CODE": {
      "get": {
        "tags": [
          "Bank-Product"
        ],
        "summary": "Get Bank Product",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about the financial products offered by a bank specified by BANK_ID and PRODUCT_CODE including:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eName\u003c/li\u003e  \u003cli\u003eCode\u003c/li\u003e  \u003cli\u003eCategory\u003c/li\u003e  \u003cli\u003eFamily\u003c/li\u003e  \u003cli\u003eSuper Family\u003c/li\u003e  \u003cli\u003eMore info URL\u003c/li\u003e  \u003cli\u003eDescription\u003c/li\u003e  \u003cli\u003eTerms and Conditions\u003c/li\u003e  \u003cli\u003eLicense the data under this endpoint is released under Authentication is Optional\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "vv2_1_0-getProduct",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductJsonV210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/transaction-request-types": {
      "get": {
        "tags": [
          "Transaction-Request",
          "Bank"
        ],
        "summary": "Get supported Transaction Request Types",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the list of the Transaction Request Types supported by the bank.\u003c/p\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv2_1_0-getTransactionRequestTypesSupportedByBank",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionRequestTypesJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/transaction-types": {
      "put": {
        "tags": [
          "Bank"
        ],
        "summary": "Create Transaction Type at bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Transaction Types for the bank specified by BANK_ID:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eid : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.\u003c/li\u003e  \u003cli\u003ebank_id : The bank that supports this TransactionType\u003c/li\u003e  \u003cli\u003eshort_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here\u003c/li\u003e  \u003cli\u003esummary : A succinct summary\u003c/li\u003e  \u003cli\u003edescription : A longer description\u003c/li\u003e  \u003cli\u003echarge : The charge to the customer for each one of these\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-createTransactionType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionTypeJsonV200"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionType"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/banks/{BANK_ID}/users/{USER_ID}/entitlements": {
      "get": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Get Entitlements for User at Bank.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Entitlements specified by BANK_ID and USER_ID\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-getEntitlementsByBankAndUser",
        "parameters": [
          {
            "in": "path",
            "name": "USER_ID",
            "description": "The user id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementJSONs"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/management/consumers": {
      "get": {
        "tags": [
          "API-Consumer",
          "API"
        ],
        "summary": "Get Consumers",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the all Consumers.\u003c/p\u003e",
        "operationId": "vv2_1_0-getConsumers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConsumersJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/management/consumers/{CONSUMER_ID}": {
      "get": {
        "tags": [
          "API-Consumer",
          "API"
        ],
        "summary": "Get Consumer",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the Consumer specified by CONSUMER_ID.\u003c/p\u003e",
        "operationId": "vv2_1_0-getConsumer",
        "parameters": [
          {
            "in": "path",
            "name": "CONSUMER_ID",
            "description": "new consumer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConsumerJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "put": {
        "tags": [
          "API-Consumer",
          "API"
        ],
        "summary": "Enable or Disable Consumers",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eEnable/Disable a Consumer specified by CONSUMER_ID.\u003c/p\u003e",
        "operationId": "vv2_1_0-enableDisableConsumers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutEnabledJSON"
            }
          },
          {
            "in": "path",
            "name": "CONSUMER_ID",
            "description": "new consumer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PutEnabledJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/management/consumers/{CONSUMER_ID}/consumer/redirect_url": {
      "put": {
        "tags": [
          "API-Consumer",
          "API"
        ],
        "summary": "Update Consumer RedirectUrl",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate an existing redirectUrl for a Consumer specified by CONSUMER_ID.\u003c/p\u003e\u003cp\u003eCONSUMER_ID can be obtained after you register the application. \u003c/p\u003e\u003cp\u003eOr use the endpoint \u0027Get Consumers\u0027 to get it \u003c/p\u003e",
        "operationId": "vv2_1_0-updateConsumerRedirectUrl",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumerRedirectUrlJSON"
            }
          },
          {
            "in": "path",
            "name": "CONSUMER_ID",
            "description": "new consumer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConsumerJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/management/metrics": {
      "get": {
        "tags": [
          "API-Metric",
          "API"
        ],
        "summary": "Get Metrics",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the all metrics\u003c/p\u003e\u003cp\u003erequire CanReadMetrics role\u003c/p\u003e\u003cp\u003eFilters Part 1.*filtering* (no wilde cards etc.) parameters to GET /management/metrics\u003c/p\u003e\u003cp\u003eShould be able to filter on the following metrics fields\u003c/p\u003e\u003cp\u003eeg: /management/metrics?from_date\u003d2017-09-19T02:31:05.000Z\u0026amp;to_date\u003d2017-09-19T02:31:05.000Z\u0026amp;limit\u003d50\u0026amp;offset\u003d2\u003c/p\u003e\u003cp\u003e1 from_date (defaults to one week before current date): eg:from_date\u003d2017-09-19T02:31:05.000Z\u003c/p\u003e\u003cp\u003e2 to_date (defaults to current date) eg:to_date\u003d2017-09-19T02:31:05.000Z\u003c/p\u003e\u003cp\u003e3 limit (for pagination: defaults to 50) eg:limit\u003d200\u003c/p\u003e\u003cp\u003e4 offset (for pagination: zero index, defaults to 0) eg: offset\u003d10\u003c/p\u003e\u003cp\u003e5 sort_by (defaults to date field) eg: sort_by\u003ddate  possible values:  \"url\",  \"date\",  \"user_name\",  \"app_name\",  \"developer_email\",  \"implemented_by_partial_function\",  \"implemented_in_version\",  \"consumer_id\",  \"verb\"\u003c/p\u003e\u003cp\u003e6 direction (defaults to date desc) eg: direction\u003ddesc\u003c/p\u003e\u003cp\u003eeg: /management/metrics?from_date\u003d2017-09-19T02:31:05.000Z\u0026amp;to_date\u003d2017-09-19T02:31:05.000Z\u0026amp;limit\u003d10000\u0026amp;offset\u003d0\u0026amp;anon\u003dfalse\u0026amp;app_name\u003dTeatApp\u0026amp;implemented_in_version\u003dv2.1.0\u0026amp;verb\u003dPOST\u0026amp;user_id\u003dc7b6cb47-cb96-4441-8801-35b57456753a\u0026amp;user_name\u003dsusan.uk.29@example.com\u0026amp;consumer_id\u003d78\u003c/p\u003e\u003cp\u003eOther filters:\u003c/p\u003e\u003cp\u003e7 consumer_id (if null ignore)\u003c/p\u003e\u003cp\u003e8 user_id (if null ignore)\u003c/p\u003e\u003cp\u003e9 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)\u003c/p\u003e\u003cp\u003e10 url (if null ignore), note: can not contain \u0027\u0026amp;\u0027.\u003c/p\u003e\u003cp\u003e11 app_name (if null ignore)\u003c/p\u003e\u003cp\u003e12 implemented_by_partial_function (if null ignore),\u003c/p\u003e\u003cp\u003e13 implemented_in_version (if null ignore)\u003c/p\u003e\u003cp\u003e14 verb (if null ignore)\u003c/p\u003e\u003cp\u003e15 correlation_id (if null ignore)\u003c/p\u003e\u003cp\u003e16 duration (if null ignore) non digit chars will be silently omitted\u003c/p\u003e",
        "operationId": "vv2_1_0-getMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MetricsJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/roles": {
      "get": {
        "tags": [
          "API-Role"
        ],
        "summary": "Get Roles",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns all available roles\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-getRoles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AvailableRolesJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.1.0/sandbox/data-import": {
      "post": {
        "tags": [
          "API-Sandbox",
          "API"
        ],
        "summary": "Create sandbox",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eImport bulk data into the sandbox (Authenticated access).\u003c/p\u003e\u003cp\u003eThis call can be used to create banks, users, accounts and transactions which are stored in the local RDBMS.\u003c/p\u003e\u003cp\u003eThe user needs to have CanCreateSandbox entitlement.\u003c/p\u003e\u003cp\u003eNote: This is a monolithic call. You could also use a combination of endpoints including create bank, create user, create account and create transaction request to create similar data.\u003c/p\u003e\u003cp\u003eAn example of an import set of data (json) can be found \u003ca href\u003d\"https://raw.githubusercontent.com/OpenBankProject/OBP-API/develop/src/main/scala/code/api/sandbox/example_data/2016-04-28/example_import.json\"\u003ehere\u003c/a\u003e Authentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_1_0-sandboxDataImport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SandboxDataImport"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/banks": {
      "post": {
        "tags": [
          "Bank"
        ],
        "summary": "Create Bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate a new bank (Authenticated access). Authentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_2_0-createBank",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankJSONV220"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BankJSONV220"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidJsonFormat"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}": {
      "put": {
        "tags": [
          "Account",
          "Onboarding"
        ],
        "summary": "Create Account",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Account at bank specified by BANK_ID with Id specified by ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eThe User can create an Account for themself or an Account for another User if they have CanCreateAccount role.\u003c/p\u003e\u003cp\u003eIf USER_ID is not specified the account will be owned by the logged in User.\u003c/p\u003e\u003cp\u003eNote: The Amount must be zero.\u003c/p\u003e",
        "operationId": "vv2_2_0-createAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountJSONV220"
            }
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateAccountJSONV220"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidJsonFormat"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties": {
      "get": {
        "tags": [
          "Counterparty",
          "Account"
        ],
        "summary": "Get Counterparties (Explicit).",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the Counterparties (Explicit) for the account / view.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_2_0-getExplictCounterpartiesForAccount",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CounterpartiesJsonV220"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Counterparty",
          "Account"
        ],
        "summary": "Create Counterparty (Explicit)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Counterparty (Explicit) for an Account.\u003c/p\u003e\u003cp\u003eIn OBP, there are two types of Counterparty.\u003c/p\u003e\u003cul\u003e  \u003cli\u003e  \u003cp\u003eExplicit Counterparties (those here) which we create explicitly and are used in COUNTERPARTY Transaction Requests\u003c/p\u003e\u003c/li\u003e  \u003cli\u003e  \u003cp\u003eImplicit Counterparties (AKA Other Accounts) which are generated automatically from the other sides of Transactions.\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eExplicit Counterparties are created for the account / view They are how the user of the view (e.g. account owner) refers to the other side of the transaction\u003c/p\u003e\u003cp\u003ename : the human readable name (e.g. Piano teacher, Miss Nipa)\u003c/p\u003e\u003cp\u003edescription : the human readable name (e.g. Piano teacher, Miss Nipa)\u003c/p\u003e\u003cp\u003ebank_routing_scheme : eg: bankId or bankCode or any other strings\u003c/p\u003e\u003cp\u003ebank_routing_address : eg: \u003ccode\u003egh.29.uk\u003c/code\u003e, must be valid sandbox bankIds\u003c/p\u003e\u003cp\u003eaccount_routing_scheme : eg: AccountId or AccountNumber or any other strings\u003c/p\u003e\u003cp\u003eaccount_routing_address : eg: \u003ccode\u003e1d65db7c-a7b2-4839-af41-95\u003c/code\u003e, must be valid accountIds\u003c/p\u003e\u003cp\u003eother_account_secondary_routing_scheme : eg: IBan or any other strings\u003c/p\u003e\u003cp\u003eother_account_secondary_routing_address : if it is IBan, it should be unique for each counterparty. \u003c/p\u003e\u003cp\u003eother_branch_routing_scheme : eg: branchId or any other strings or you can leave it empty, not useful in sandbox mode.\u003c/p\u003e\u003cp\u003eother_branch_routing_address : eg: \u003ccode\u003ebranch-id-123\u003c/code\u003e or you can leave it empty, not useful in sandbox mode.\u003c/p\u003e\u003cp\u003eis_beneficiary : must be set to \u003ccode\u003etrue\u003c/code\u003e in order to send payments to this counterparty\u003c/p\u003e\u003cp\u003ebespoke: It support list of key-value, you can add it to the counterarty.\u003c/p\u003e\u003cp\u003ebespoke.key : any info-key you want to add to this counerparty\u003c/p\u003e\u003cp\u003ebespoke.value : any info-value you want to add to this counerparty\u003c/p\u003e\u003cp\u003eThe view specified by VIEW_ID must have the canAddCounterparty permission\u003c/p\u003e\u003cp\u003eA minimal example for TransactionRequestType \u003d\u003d COUNTERPARTY  {  \"name\": \"Tesobe1\",  \"description\": \"Good Company\",  \"other_bank_routing_scheme\": \"bankId\",  \"other_bank_routing_address\": \"gh.29.uk\",  \"other_account_routing_scheme\": \"accountId\",  \"other_account_routing_address\": \"8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0\",  \"is_beneficiary\": true,  \"other_account_secondary_routing_scheme\": \"\",  \"other_account_secondary_routing_address\": \"\",  \"other_branch_routing_scheme\": \"\",  \"other_branch_routing_address\": \"\",  \"bespoke\": [] }\u003c/p\u003e\u003cp\u003eA minimal example for TransactionRequestType \u003d\u003d SEPA\u003c/p\u003e\u003cp\u003e{  \"name\": \"Tesobe2\",  \"description\": \"Good Company\",  \"other_bank_routing_scheme\": \"bankId\",  \"other_bank_routing_address\": \"gh.29.uk\",  \"other_account_routing_scheme\": \"accountId\",  \"other_account_routing_address\": \"8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0\",  \"other_account_secondary_routing_scheme\": \"IBAN\",  \"other_account_secondary_routing_address\": \"DE89 3704 0044 0532 0130 00\",  \"is_beneficiary\": true,  \"other_branch_routing_scheme\": \"\",  \"other_branch_routing_address\": \"\",  \"bespoke\": [] }\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_2_0-createCounterparty",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCounterpartyJSON"
            }
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CounterpartyWithMetadataJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/counterparties/COUNTERPARTY_ID": {
      "get": {
        "tags": [
          "Counterparty",
          "Counterparty-Metadata"
        ],
        "summary": "Get Counterparty by Counterparty Id.(Explicit).",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eInformation returned about the Counterparty specified by COUNTERPARTY_ID:\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv2_2_0-getExplictCounterpartyById",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CounterpartyWithMetadataJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/banks/{BANK_ID}/fx": {
      "put": {
        "tags": [
          "Bank-FX"
        ],
        "summary": "Create Fx",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate or Update Fx for the Bank.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eOBP-20006: User is missing one or more roles: CanCreateFxRate OR CanCreateFxRateAtAnyBank\u003c/p\u003e",
        "operationId": "vv2_2_0-createFx",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FXRateJsonV220"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FXRateJsonV220"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/banks/{BANK_ID}/fx/{FROM_CURRENCY_CODE}/{TO_CURRENCY_CODE}": {
      "get": {
        "tags": [
          "Bank-FX"
        ],
        "summary": "Get Current FxRate",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the latest FXRate specified by BANK_ID, FROM_CURRENCY_CODE and TO_CURRENCY_CODE \u003c/p\u003e",
        "operationId": "vv2_2_0-getCurrentFxRate",
        "parameters": [
          {
            "in": "path",
            "name": "TO_CURRENCY_CODE",
            "description": "The to currency code",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "FROM_CURRENCY_CODE",
            "description": "The from currency code",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FXRateJsonV220"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidISOCurrencyCode"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/banks/{BANK_ID}/products": {
      "put": {
        "tags": [
          "Bank-Product"
        ],
        "summary": "Create Product",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate or Update Product for the Bank.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eOBP-20006: User is missing one or more roles: CanCreateProduct OR CanCreateProductAtAnyBank\u003c/p\u003e",
        "operationId": "vv2_2_0-createProduct",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductJsonV220"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductJsonV220"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/config": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get API Configuration",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eAPI Config\u003c/li\u003e  \u003cli\u003eAkka ports\u003c/li\u003e  \u003cli\u003eElastic search ports\u003c/li\u003e  \u003cli\u003eCached function\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "vv2_2_0-config",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConfigurationJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/management/connector/metrics": {
      "get": {
        "tags": [
          "API-Metric",
          "API"
        ],
        "summary": "Get Connector Metrics",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the all metrics\u003c/p\u003e\u003cp\u003erequire CanGetConnectorMetrics role\u003c/p\u003e\u003cp\u003eFilters Part 1.*filtering* (no wilde cards etc.) parameters to GET /management/connector/metrics\u003c/p\u003e\u003cp\u003eShould be able to filter on the following metrics fields\u003c/p\u003e\u003cp\u003eeg: /management/connector/metrics?from_date\u003d2017-09-19\u0026amp;to_date\u003d2017-09-19\u0026amp;limit\u003d50\u0026amp;offset\u003d2\u003c/p\u003e\u003cp\u003e1 from_date (defaults to one week before current date): eg:from_date\u003d2017-09-19\u003c/p\u003e\u003cp\u003e2 to_date (defaults to current date) eg:to_date\u003d2017-09-19\u003c/p\u003e\u003cp\u003e3 limit (for pagination: defaults to 1000) eg:limit\u003d2000\u003c/p\u003e\u003cp\u003e4 offset (for pagination: zero index, defaults to 0) eg: offset\u003d10\u003c/p\u003e\u003cp\u003eeg: /management/connector/metrics?from_date\u003d2017-09-19\u0026amp;to_date\u003d2017-09-19\u0026amp;limit\u003d100\u0026amp;offset\u003d300\u003c/p\u003e\u003cp\u003eOther filters:\u003c/p\u003e\u003cp\u003e5 connector_name (if null ignore)\u003c/p\u003e\u003cp\u003e6 function_name (if null ignore)\u003c/p\u003e\u003cp\u003e7 correlation_id (if null ignore)\u003c/p\u003e",
        "operationId": "vv2_2_0-getConnectorMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConnectorMetricsJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidDateFormat"
            }
          }
        }
      }
    },
    "/obp/v2.2.0/message-docs/CONNECTOR": {
      "get": {
        "tags": [
          "API-Documentation",
          "API"
        ],
        "summary": "Get Message Docs",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eThese message docs provide example messages sent by OBP to the (Kafka) message queue for processing by the Core Banking / Payment system Adapter - together with an example expected response and possible error codes.  Integrators can use these messages to build Adapters that provide core banking services to OBP.\u003c/p\u003e\u003cp\u003e\u003ccode\u003eCONNECTOR\u003c/code\u003e: kafka_vJuneYellow2017, kafka_vJune2017 , kafka_vMar2017 or ... \u003c/p\u003e",
        "operationId": "vv2_2_0-getMessageDocs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MessageDocsJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/api/glossary": {
      "get": {
        "tags": [
          "API-Documentation"
        ],
        "summary": "Get API Glossary",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the glossary of the API\u003c/p\u003e",
        "operationId": "vv3_0_0-glossary",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GlossaryItemsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Get Banks",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet banks on this API instance Returns a list of banks supported on this server:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eID used as parameter in URLs\u003c/li\u003e  \u003cli\u003eShort and full name of bank\u003c/li\u003e  \u003cli\u003eLogo URL\u003c/li\u003e  \u003cli\u003eWebsite\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "vv3_0_0-getBanks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BanksJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Get Bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the bank specified by BANK_ID Returns information about a single bank specified by BANK_ID including:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eShort and full name of bank\u003c/li\u003e  \u003cli\u003eLogo URL\u003c/li\u003e  \u003cli\u003eWebsite\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "vv3_0_0-bankById",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BankJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts-held": {
      "get": {
        "tags": [
          "Account",
          "Account-View"
        ],
        "summary": "Get Accounts Held",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Accounts held by the current User if even the User has not been assigned the owner View yet.\u003c/p\u003e\u003cp\u003eCan be used to onboard the account to the API - since all other account and transaction endpoints require views to be assigned.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getAccountsHeld",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CoreAccountsHeldJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUnknownError"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Account by Id (Full)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eInformation returned about an account specified by ACCOUNT_ID as moderated by the view (VIEW_ID):\u003c/p\u003e\u003cul\u003e  \u003cli\u003eNumber\u003c/li\u003e  \u003cli\u003eOwners\u003c/li\u003e  \u003cli\u003eType\u003c/li\u003e  \u003cli\u003eBalance\u003c/li\u003e  \u003cli\u003eIBAN\u003c/li\u003e  \u003cli\u003eAvailable views (sorted by short_name)\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eMore details about the data moderation by the view \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003ePSD2 Context: PSD2 requires customers to have access to their account information via third party applications. This call provides balance and other account information via delegated authenticaiton using OAuth.\u003c/p\u003e\u003cp\u003eAuthentication is required if the \u0027is_public\u0027 field in view (VIEW_ID) is not set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e",
        "operationId": "vv3_0_0-getPrivateAccountById",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModeratedCoreAccountJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankNotFound"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts": {
      "get": {
        "tags": [
          "Counterparty",
          "Account"
        ],
        "summary": "Get Other Accounts of one Account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID. Authentication is Optional\u003c/p\u003e\u003cp\u003eAuthentication is required if the view VIEW_ID is not public.\u003c/p\u003e",
        "operationId": "vv3_0_0-getOtherAccountsForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OtherAccountsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/other_accounts/{OTHER_ACCOUNT_ID}": {
      "get": {
        "tags": [
          "Counterparty",
          "Account"
        ],
        "summary": "Get Other Account by Id.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID. Authentication is Optional\u003c/p\u003e\u003cp\u003eAuthentication is required if the view is not public.\u003c/p\u003e",
        "operationId": "vv3_0_0-getOtherAccountByIdForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "OTHER_ACCOUNT_ID",
            "description": "The other account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OtherAccountJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/transactions": {
      "get": {
        "tags": [
          "Transaction",
          "Account"
        ],
        "summary": "Get Transactions for Account (Full)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns transactions list of the account specified by ACCOUNT_ID and \u003ca href\u003d\"#1_2_1-getViewsForBankAccount\"\u003emoderated\u003c/a\u003e by the view (VIEW_ID).\u003c/p\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e\u003cp\u003eAuthentication is required if the view is not public.\u003c/p\u003e\u003cp\u003ePossible custom headers for pagination:\u003c/p\u003e\u003cul\u003e  \u003cli\u003esort_direction\u003dASC/DESC \u003d\u003d\u0026gt; default value: DESC. The sort field is the completed date.\u003c/li\u003e  \u003cli\u003elimit\u003dNUMBER \u003d\u003d\u0026gt; default value: 50\u003c/li\u003e  \u003cli\u003eoffset\u003dNUMBER \u003d\u003d\u0026gt; default value: 0\u003c/li\u003e  \u003cli\u003efrom_date\u003dDATE \u003d\u0026gt; default value: 0000-00-00T00:00:00.000Z\u003c/li\u003e  \u003cli\u003eto_date\u003dDATE \u003d\u0026gt; default value: 3049-01-01T00:00:00.000Z\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eDate format parameter\u003c/strong\u003e: yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\u0027Z\u0027(2017-09-19T02:31:05.000Z) \u003d\u003d\u0026gt; time zone is UTC.\u003c/p\u003e",
        "operationId": "vv3_0_0-getTransactionsForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorFilterSortDirectionError"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/permissions/PROVIDER/{PROVIDER_ID}": {
      "get": {
        "tags": [
          "Account-View",
          "Account",
          "User"
        ],
        "summary": "Get Account access for User.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the list of the views at BANK_ID for account ACCOUNT_ID that a user identified by PROVIDER_ID at their provider PROVIDER has access to. All url parameters must be \u003ca href\u003d\"http://en.wikipedia.org/wiki/Percent-encoding\"\u003e%-encoded\u003c/a\u003e, which is often especially relevant for USER_ID and PROVIDER.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eThe user needs to have access to the owner view.\u003c/p\u003e",
        "operationId": "vv3_0_0-getPermissionForUserForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "PROVIDER_ID",
            "description": "The provider id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ViewsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/views": {
      "get": {
        "tags": [
          "Account-View",
          "Account"
        ],
        "summary": "Get Views for Account.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003ch1\u003eViews\u003c/h1\u003e\u003cp\u003eViews in Open Bank Project provide a mechanism for fine grained access control and delegation to Accounts and Transactions. Account holders use the \u0027owner\u0027 view by default. Delegated access is made through other views for example \u0027accountants\u0027, \u0027share-holders\u0027 or \u0027tagging-application\u0027. Views can be created via the API and each view has a list of entitlements.\u003c/p\u003e\u003cp\u003eViews on accounts and transactions filter the underlying data to redact certain fields for certain users. For instance the balance on an account may be hidden from the public. The way to know what is possible on a view is determined in the following JSON.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eData:\u003c/strong\u003e When a view moderates a set of data, some fields my contain the value \u003ccode\u003enull\u003c/code\u003e rather than the original value. This indicates either that the user is not allowed to see the original data or the field is empty.\u003c/p\u003e\u003cp\u003eThere is currently one exception to this rule; the \u0027holder\u0027 field in the JSON contains always a value which is either an alias or the real name - indicated by the \u0027is_alias\u0027 field.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAction:\u003c/strong\u003e When a user performs an action like trying to post a comment (with POST API call), if he is not allowed, the body response will contain an error message.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eMetadata:\u003c/strong\u003e Transaction metadata (like images, tags, comments, etc.) will appears \u003cem\u003eONLY\u003c/em\u003e on the view where they have been created e.g. comments posted to the public view only appear on the public view.\u003c/p\u003e\u003cp\u003eThe other account metadata fields (like image_URL, more_info, etc.) are unique through all the views. Example, if a user edits the \u0027more_info\u0027 field in the \u0027team\u0027 view, then the view \u0027authorities\u0027 will show the new value (if it is allowed to do it).\u003c/p\u003e\u003ch1\u003eAll\u003c/h1\u003e\u003cp\u003e\u003cem\u003eOptional\u003c/em\u003e\u003c/p\u003e\u003cp\u003eReturns the list of the views created for account ACCOUNT_ID at BANK_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory and the user needs to have access to the owner view.\u003c/p\u003e",
        "operationId": "vv3_0_0-getViewsForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ViewsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Account-View",
          "Account"
        ],
        "summary": "Create View.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate a view on bank account\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory and the user needs to have access to the owner view.  The \u0027alias\u0027 field in the JSON can take one of three values:\u003c/p\u003e\u003cul\u003e  \u003cli\u003e\u003cem\u003epublic\u003c/em\u003e: to use the public alias if there is one specified for the other account.\u003c/li\u003e  \u003cli\u003e\u003cem\u003eprivate\u003c/em\u003e: to use the public alias if there is one specified for the other account.\u003c/li\u003e  \u003cli\u003e  \u003cp\u003e\u003cem\u003e\u0027\u0027(empty string)\u003c/em\u003e: to use no alias; the view shows the real name of the other account.\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe \u0027hide_metadata_if_alias_used\u0027 field in the JSON can take boolean values. If it is set to \u003ccode\u003etrue\u003c/code\u003e and there is an alias on the other account then the other accounts\u0027 metadata (like more_info, url, image_url, open_corporates_url, etc.) will be hidden. Otherwise the metadata will be shown.\u003c/p\u003e\u003cp\u003eThe \u0027allowed_actions\u0027 field is a list containing the name of the actions allowed on this view, all the actions contained will be set to \u003ccode\u003etrue\u003c/code\u003e on the view creation, the rest will be set to \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\u003cp\u003eYou MUST use a leading _ (underscore) in the view name because other view names are reserved for OBP system views.\u003c/p\u003e",
        "operationId": "vv3_0_0-createViewForBankAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateViewJson"
            }
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ViewJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/views/{VIEW_ID}": {
      "put": {
        "tags": [
          "Account-View",
          "Account"
        ],
        "summary": "Update View.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eUpdate an existing view on a bank account\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory and the user needs to have access to the owner view.\u003c/p\u003e\u003cp\u003eThe json sent is the same as during view creation (above), with one difference: the \u0027name\u0027 field of a view is not editable (it is only set when a view is created)\u003c/p\u003e",
        "operationId": "vv3_0_0-updateViewForBankAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateViewJSON"
            }
          },
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ViewJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInvalidJsonFormat"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/account_ids/private": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Accounts at Bank (IDs only).",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns only the list of accounts ids at BANK_ID that the user has access to.\u003c/p\u003e\u003cp\u003eEach account must have at least one private View.\u003c/p\u003e\u003cp\u003eFor each account the API returns its account ID.\u003c/p\u003e\u003cp\u003eIf you want to see more information on the Views, use the Account Detail call.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getPrivateAccountIdsbyBankId",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccountsIdsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/accounts/private": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Accounts at Bank (Minimal).",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the minimal list of private accounts at BANK_ID that the user has access to. For each account, the API returns the ID, routing addresses and the views available to the current user.\u003c/p\u003e\u003cp\u003eIf you want to see more information on the Views, use the Account Detail call.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-privateAccountsAtOneBank",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CoreAccountsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/adapter": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get Adapter Info",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet basic information about the Adapter listening on behalf of this bank.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getAdapter",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdapterInfoJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/atms": {
      "get": {
        "tags": [
          "Bank-ATM"
        ],
        "summary": "Get Bank ATMS",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about ATMs for a single bank specified by BANK_ID including:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eAddress\u003c/li\u003e  \u003cli\u003eGeo Location\u003c/li\u003e  \u003cli\u003eLicense the data under this endpoint is released under\u003c/li\u003e\u003c/ul\u003e\u003cp\u003ePagination:\u003c/p\u003e\u003cp\u003eBy default, 100 records are returned.\u003c/p\u003e\u003cp\u003eYou can use the url query parameters \u003cem\u003elimit\u003c/em\u003e and \u003cem\u003eoffset\u003c/em\u003e for pagination\u003c/p\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv3_0_0-getAtms",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AtmJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank-ATM"
        ],
        "summary": "Create ATM",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate ATM for the Bank.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eOBP-20006: User is missing one or more roles: CanCreateAtm OR CanCreateAtmAtAnyBank\u003c/p\u003e",
        "operationId": "vv3_0_0-createAtm",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AtmJsonV300"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AtmJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/atms/ATM_ID": {
      "get": {
        "tags": [
          "Bank-ATM"
        ],
        "summary": "Get Bank ATM",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about ATM for a single bank specified by BANK_ID and ATM_ID including:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eAddress\u003c/li\u003e  \u003cli\u003eGeo Location\u003c/li\u003e  \u003cli\u003eLicense the data under this endpoint is released under\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv3_0_0-getAtm",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AtmJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/branches": {
      "get": {
        "tags": [
          "Bank-Branch",
          "Bank"
        ],
        "summary": "Get Branches for a Bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about branches for a single bank specified by BANK_ID including:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eName\u003c/li\u003e  \u003cli\u003eAddress\u003c/li\u003e  \u003cli\u003eGeo Location\u003c/li\u003e  \u003cli\u003eLicense the data under this endpoint is released under\u003c/li\u003e  \u003cli\u003eStructured opening hours\u003c/li\u003e  \u003cli\u003eAccessible flag\u003c/li\u003e  \u003cli\u003eBranch Type\u003c/li\u003e  \u003cli\u003eMore Info\u003c/li\u003e\u003c/ul\u003e\u003cp\u003ePagination:\u003c/p\u003e\u003cp\u003eBy default, 50 records are returned.\u003c/p\u003e\u003cp\u003eYou can use the url query parameters \u003cem\u003elimit\u003c/em\u003e and \u003cem\u003eoffset\u003c/em\u003e for pagination\u003c/p\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv3_0_0-getBranches",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BranchesJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank-Branch"
        ],
        "summary": "Create Branch",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Branch for the Bank.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eOBP-20006: User is missing one or more roles: CanCreateBranch entitlements are required OR CanCreateBranchAtAnyBank\u003c/p\u003e",
        "operationId": "vv3_0_0-createBranch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BranchJsonV300"
            }
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BranchJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/branches/{BRANCH_ID}": {
      "get": {
        "tags": [
          "Bank-Branch",
          "Bank"
        ],
        "summary": "Get Branch",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about a single Branch specified by BANK_ID and BRANCH_ID including:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eName\u003c/li\u003e  \u003cli\u003eAddress\u003c/li\u003e  \u003cli\u003eGeo Location\u003c/li\u003e  \u003cli\u003eLicense the data under this endpoint is released under.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv3_0_0-getBranch",
        "parameters": [
          {
            "in": "path",
            "name": "BRANCH_ID",
            "description": "The branch id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BranchJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/firehose/accounts/{ACCOUNT_ID}/views/{VIEW_ID}/transactions": {
      "get": {
        "tags": [
          "Account-Firehose",
          "Account",
          "FirehoseData"
        ],
        "summary": "Get Firehose Transactions for Account",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Transactions for an Account that has a firehose View.\u003c/p\u003e\u003cp\u003eAllows bulk access to an account\u0027s transactions. User must have the CanUseFirehoseAtAnyBank Role\u003c/p\u003e\u003cp\u003eTo find ACCOUNT_IDs, use the getFirehoseAccountsAtOneBank call.\u003c/p\u003e\u003cp\u003eFor VIEW_ID try \u0027firehose\u0027\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getFirehoseTransactionsForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/firehose/accounts/views/{VIEW_ID}": {
      "get": {
        "tags": [
          "Account-Firehose",
          "Account",
          "FirehoseData"
        ],
        "summary": "Get Firehose Accounts at Bank",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Accounts which have a firehose view assigned to them.\u003c/p\u003e\u003cp\u003eThis endpoint allows bulk access to accounts.\u003c/p\u003e\u003cp\u003eRequires the CanUseFirehoseAtAnyBank Role\u003c/p\u003e\u003cp\u003eTo be shown on the list, each Account must have a firehose View linked to it.\u003c/p\u003e\u003cp\u003eFor VIEW_ID try \u0027firehose\u0027\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getFirehoseAccountsAtOneBank",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModeratedCoreAccountsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/banks/{BANK_ID}/public/accounts/{ACCOUNT_ID}/{VIEW_ID}/account": {
      "get": {
        "tags": [
          "Account-Public",
          "Account"
        ],
        "summary": "Get Public Account by Id",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns information about an account that has a public view.\u003c/p\u003e\u003cp\u003eThe account is specified by ACCOUNT_ID. The information is moderated by the view specified by VIEW_ID.\u003c/p\u003e\u003cul\u003e  \u003cli\u003eNumber\u003c/li\u003e  \u003cli\u003eOwners\u003c/li\u003e  \u003cli\u003eType\u003c/li\u003e  \u003cli\u003eBalance\u003c/li\u003e  \u003cli\u003eRouting\u003c/li\u003e\u003c/ul\u003e\u003cp\u003ePSD2 Context: PSD2 requires customers to have access to their account information via third party applications. This call provides balance and other account information via delegated authenticaiton using OAuth.\u003c/p\u003e\u003cp\u003eAuthentication is Optional\u003c/p\u003e",
        "operationId": "vv3_0_0-getPublicAccountById",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModeratedCoreAccountJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankNotFound"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/consumers/{CONSUMER_ID}/scope/SCOPE_ID": {
      "delete": {
        "tags": [
          "API-Role",
          "User",
          "Entitlement"
        ],
        "summary": "Delete Consumer Scope",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDelete Consumer Scope specified by SCOPE_ID for an consumer specified by CONSUMER_ID\u003c/p\u003e\u003cp\u003eAuthentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.\u003c/p\u003e",
        "operationId": "vv3_0_0-deleteScope",
        "parameters": [
          {
            "in": "path",
            "name": "CONSUMER_ID",
            "description": "new consumer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/consumers/{CONSUMER_ID}/scopes": {
      "get": {
        "tags": [
          "API-Role",
          "User",
          "Entitlement"
        ],
        "summary": "Get Scopes for Consumer",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet all the scopes for an consumer specified by CONSUMER_ID\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getScopes",
        "parameters": [
          {
            "in": "path",
            "name": "CONSUMER_ID",
            "description": "new consumer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScopeJsons"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Add Scope for a Consumer.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Scope. Grant Role to Consumer.\u003c/p\u003e\u003cp\u003eScopes are used to grant System or Bank level roles to the Consumer (App). (For Account level privileges, see Views)\u003c/p\u003e\u003cp\u003eFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. \"bank_id\":\"\"\u003c/p\u003e\u003cp\u003eFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. \"bank_id\":\"my-bank-id\"\u003c/p\u003e",
        "operationId": "vv3_0_0-addScope",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScopeJson"
            }
          },
          {
            "in": "path",
            "name": "CONSUMER_ID",
            "description": "new consumer id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScopeJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/entitlement-requests": {
      "get": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Get all Entitlement Requests",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet all Entitlement Requests\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getAllEntitlementRequests",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementRequestsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Add Entitlement Request for a Logged User.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate Entitlement Request.\u003c/p\u003e\u003cp\u003eAny logged in User can use this endpoint to request an Entitlement\u003c/p\u003e\u003cp\u003eEntitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)\u003c/p\u003e\u003cp\u003eFor a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. \"bank_id\":\"\"\u003c/p\u003e\u003cp\u003eFor a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. \"bank_id\":\"my-bank-id\"\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-addEntitlementRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEntitlementJSON"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementRequestJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/entitlement-requests/ENTITLEMENT_REQUEST_ID": {
      "delete": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Delete Entitlement Request",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eDelete the Entitlement Request specified by ENTITLEMENT_REQUEST_ID for a user specified by USER_ID\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-deleteEntitlementRequest",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/management/aggregate-metrics": {
      "get": {
        "tags": [
          "API-Metric",
          "Aggregate-Metrics"
        ],
        "summary": "Get Aggregate Metrics",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns aggregate metrics on api usage eg. total count, response time (in ms), etc.\u003c/p\u003e\u003cp\u003eShould be able to filter on the following fields\u003c/p\u003e\u003cp\u003eeg: /management/aggregate-metrics?from_date\u003d2017-09-19T02:31:05.000Z\u0026amp;to_date\u003d2017-09-19T02:31:05.000Z\u0026amp;consumer_id\u003d5 \u0026amp;user_id\u003d66214b8e-259e-44ad-8868-3eb47be70646\u0026amp;implemented_by_partial_function\u003dgetTransactionsForBankAccount \u0026amp;implemented_in_version\u003dv3.0.0\u0026amp;url\u003d/obp/v3.0.0/banks/gh.29.uk/accounts/8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0/owner/transactions \u0026amp;verb\u003dGET\u0026amp;anon\u003dfalse\u0026amp;app_name\u003dMapperPostman \u0026amp;exclude_app_names\u003dAPI-EXPLORER,API-Manager,SOFI,null\u003c/p\u003e\u003cp\u003e1 from_date (defaults to the day before the current date): eg:from_date\u003d2017-09-19T02:31:05.000Z\u003c/p\u003e\u003cp\u003e2 to_date (defaults to the current date) eg:to_date\u003d2017-09-19T02:31:05.000Z\u003c/p\u003e\u003cp\u003e3 consumer_id (if null ignore)\u003c/p\u003e\u003cp\u003e4 user_id (if null ignore)\u003c/p\u003e\u003cp\u003e5 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)\u003c/p\u003e\u003cp\u003e6 url (if null ignore), note: can not contain \u0027\u0026amp;\u0027.\u003c/p\u003e\u003cp\u003e7 app_name (if null ignore)\u003c/p\u003e\u003cp\u003e8 implemented_by_partial_function (if null ignore),\u003c/p\u003e\u003cp\u003e9 implemented_in_version (if null ignore)\u003c/p\u003e\u003cp\u003e10 verb (if null ignore)\u003c/p\u003e\u003cp\u003e11 correlation_id (if null ignore)\u003c/p\u003e\u003cp\u003e12 duration (if null ignore) non digit chars will be silently omitted\u003c/p\u003e\u003cp\u003e13 exclude_app_names (if null ignore).eg: \u0026amp;exclude_app_names\u003dAPI-EXPLORER,API-Manager,SOFI,null\u003c/p\u003e\u003cp\u003e14 exclude_url_pattern (if null ignore).you can design you own SQL NOT LIKE pattern. eg: \u0026amp;exclude_url_pattern\u003d%management/metrics%\u003c/p\u003e\u003cp\u003e15 exclude_implemented_by_partial_functions (if null ignore).eg: \u0026amp;exclude_implemented_by_partial_functions\u003dgetMetrics,getConnectorMetrics,getAggregateMetrics\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getAggregateMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AggregateMetricJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/my/accounts": {
      "get": {
        "tags": [
          "Account",
          "PrivateData"
        ],
        "summary": "Get Accounts at all Banks (private)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns the list of accounts containing private views for the user. Each account lists the views available to the user.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-corePrivateAccountsAllBanks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CoreAccountsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/my/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Account by Id (Core)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eInformation returned about the account specified by ACCOUNT_ID:\u003c/p\u003e\u003cul\u003e  \u003cli\u003eNumber - The human readable account number given by the bank that identifies the account.\u003c/li\u003e  \u003cli\u003eLabel - A label given by the owner of the account\u003c/li\u003e  \u003cli\u003eOwners - Users that own this account\u003c/li\u003e  \u003cli\u003eType - The type of account\u003c/li\u003e  \u003cli\u003eBalance - Currency and Value\u003c/li\u003e  \u003cli\u003eAccount Routings - A list that might include IBAN or national account identifiers\u003c/li\u003e  \u003cli\u003eAccount Rules - A list that might include Overdraft and other bank specific rules\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis call returns the owner view and requires access to that view.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getCoreAccountById",
        "parameters": [
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModeratedCoreAccountJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorBankAccountNotFound"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/my/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/transactions": {
      "get": {
        "tags": [
          "Transaction",
          "Account"
        ],
        "summary": "Get Transactions for Account (Core)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns transactions list (Core info) of the account specified by ACCOUNT_ID.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003ePossible custom headers for pagination:\u003c/p\u003e\u003cul\u003e  \u003cli\u003esort_direction\u003dASC/DESC \u003d\u003d\u0026gt; default value: DESC. The sort field is the completed date.\u003c/li\u003e  \u003cli\u003elimit\u003dNUMBER \u003d\u003d\u0026gt; default value: 50\u003c/li\u003e  \u003cli\u003eoffset\u003dNUMBER \u003d\u003d\u0026gt; default value: 0\u003c/li\u003e  \u003cli\u003efrom_date\u003dDATE \u003d\u0026gt; default value: 0000-00-00T00:00:00.000Z\u003c/li\u003e  \u003cli\u003eto_date\u003dDATE \u003d\u0026gt; default value: 3049-01-01T00:00:00.000Z\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eDate format parameter\u003c/strong\u003e: yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\u0027Z\u0027(2017-09-19T02:31:05.000Z) \u003d\u003d\u0026gt; time zone is UTC.\u003c/p\u003e",
        "operationId": "vv3_0_0-getCoreTransactionsForBankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CoreTransactionsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorFilterSortDirectionError"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/my/entitlement-requests": {
      "get": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Get Entitlement Requests for the current User.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Entitlement Requests for the current User.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getEntitlementRequestsForCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementRequestsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/my/entitlements": {
      "get": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Get Entitlements for the current User.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Entitlements for the current User.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getEntitlementsForCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementJSONs"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/search/warehouse/INDEX": {
      "post": {
        "tags": [
          "Data-Warehouse"
        ],
        "summary": "Data Warehouse Search",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eSearch the data warehouse and get row level results.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eCanSearchWarehouse entitlement is required. You can request the Role below.\u003c/p\u003e\u003cp\u003eElastic (search) is used in the background. See links below for syntax.\u003c/p\u003e\u003cp\u003eExamples of usage:\u003c/p\u003e\u003cp\u003ePOST /search/warehouse/THE_INDEX_YOU_WANT_TO_USE\u003c/p\u003e\u003cp\u003ePOST /search/warehouse/INDEX1,INDEX2\u003c/p\u003e\u003cp\u003ePOST /search/warehouse/ALL\u003c/p\u003e\u003cp\u003e{ Any valid elasticsearch query DSL in the body }\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\"\u003eElasticsearch query DSL\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-body.html\"\u003eElastic simple query\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-aggregations.html\"\u003eElastic aggregations\u003c/a\u003e\u003c/p\u003e",
        "operationId": "vv3_0_0-dataWarehouseSearch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ElasticSearchJSON"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/search/warehouse/statistics/FIELD": {
      "post": {
        "tags": [
          "Data-Warehouse"
        ],
        "summary": "Data Warehouse Statistics",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eSearch the data warehouse and get statistical aggregations over a warehouse field\u003c/p\u003e\u003cp\u003eDoes a stats aggregation over some numeric field:\u003c/p\u003e\u003cp\u003ehttps://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-stats-aggregation.html\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eCanSearchWarehouseStats Role is required. You can request this below.\u003c/p\u003e\u003cp\u003eElastic (search) is used in the background. See links below for syntax.\u003c/p\u003e\u003cp\u003eExamples of usage:\u003c/p\u003e\u003cp\u003ePOST /search/warehouse/statistics/INDEX/FIELD\u003c/p\u003e\u003cp\u003ePOST /search/warehouse/statistics/ALL/FIELD\u003c/p\u003e\u003cp\u003e{ Any valid elasticsearch query DSL in the body }\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\"\u003eElasticsearch query DSL\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-body.html\"\u003eElastic simple query\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href\u003d\"https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-aggregations.html\"\u003eElastic aggregations\u003c/a\u003e\u003c/p\u003e",
        "operationId": "vv3_0_0-dataWarehouseStatistics",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ElasticSearchJSON"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EmptyClassJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all Users",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet all users\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eCanGetAnyUser entitlement is required,\u003c/p\u003e",
        "operationId": "vv3_0_0-getUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsersJsonV200"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/users/{USER_ID}/entitlement-requests": {
      "get": {
        "tags": [
          "API-Role",
          "Entitlement",
          "User"
        ],
        "summary": "Get Entitlement Requests for a User.",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Entitlement Requests for a User.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getEntitlementRequests",
        "parameters": [
          {
            "in": "path",
            "name": "USER_ID",
            "description": "The user id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntitlementRequestsJSON"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/users/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User (Current)",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet the logged in user\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserJsonV200"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/users/current/customers": {
      "get": {
        "tags": [
          "Customer",
          "User"
        ],
        "summary": "Get Customers for Current User",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGets all Customers that are linked to a User.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_0_0-getCustomersForUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CustomerJsonV210"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/users/email/EMAIL/terminator": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Users by Email Address",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet users by email address\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory CanGetAnyUser entitlement is required,\u003c/p\u003e",
        "operationId": "vv3_0_0-getUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsersJsonV200"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/users/user_id/{USER_ID}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User by USER_ID",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet user by USER_ID\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory CanGetAnyUser entitlement is required,\u003c/p\u003e",
        "operationId": "vv3_0_0-getUserByUserId",
        "parameters": [
          {
            "in": "path",
            "name": "USER_ID",
            "description": "The user id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsersJsonV200"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.0.0/users/username/USERNAME": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User by USERNAME",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet user by USERNAME\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e\u003cp\u003eCanGetAnyUser entitlement is required,\u003c/p\u003e",
        "operationId": "vv3_0_0-getUserByUsername",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsersJsonV200"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/checkbook/orders": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "get Checkbook orders",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet all checkbook orders\u003c/p\u003e",
        "operationId": "vv3_1_0-getCheckbookOrders",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CheckbookOrdersJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.1.0/banks/{BANK_ID}/accounts/{ACCOUNT_ID}/{VIEW_ID}/credit_cards/orders": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Get status of Credit Card order ",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet status of Credit Card orders Get all orders\u003c/p\u003e",
        "operationId": "vv3_1_0-getStatusOfCreditCardOrder",
        "parameters": [
          {
            "in": "path",
            "name": "VIEW_ID",
            "description": "The view id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ACCOUNT_ID",
            "description": "The account id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreditCardOrderStatusResponseJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/credit_limit/requests": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Get Credit Limit Order Requests ",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Credit Limit Order Requests \u003c/p\u003e",
        "operationId": "vv3_1_0-getCreditLimitOrderRequests",
        "parameters": [
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreditLimitOrderJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank"
        ],
        "summary": "Create Credit Limit Order Request",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eCreate credit limit order request\u003c/p\u003e",
        "operationId": "vv3_1_0-createCreditLimitOrderRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BANK_BODY",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreditLimitOrderRequestJson"
            }
          },
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreditLimitOrderResponseJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.1.0/banks/{BANK_ID}/customers/{CUSTOMER_ID}/credit_limit/requests/REQUEST_ID": {
      "get": {
        "tags": [
          "Bank"
        ],
        "summary": "Get Creadit Limit Order Request By Request Id",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Creadit Limit Order Request By Request Id\u003c/p\u003e",
        "operationId": "vv3_1_0-getCreditLimitOrderRequestByRequestId",
        "parameters": [
          {
            "in": "path",
            "name": "CUSTOMER_ID",
            "description": "The customer id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreditLimitOrderJson"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.1.0/banks/{BANK_ID}/firehose/customers": {
      "get": {
        "tags": [
          "Account-Firehose",
          "Account",
          "FirehoseData"
        ],
        "summary": "Get Firehose Customers",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eGet Customers that has a firehose View.\u003c/p\u003e\u003cp\u003eAllows bulk access to customers. User must have the CanUseFirehoseAtAnyBank Role\u003c/p\u003e\u003cp\u003eFor VIEW_ID try \u0027firehose\u0027\u003c/p\u003e\u003cp\u003ePossible custom URL parameters for pagination:\u003c/p\u003e\u003cul\u003e  \u003cli\u003esort_direction\u003dASC/DESC\u003c/li\u003e  \u003cli\u003elimit\u003dNUMBER \u003d\u003d\u0026gt; default value: 50\u003c/li\u003e  \u003cli\u003eoffset\u003dNUMBER \u003d\u003d\u0026gt; default value: 0\u003c/li\u003e  \u003cli\u003efrom_date\u003dDATE \u003d\u0026gt; default value: date of the oldest customer created (format below)\u003c/li\u003e  \u003cli\u003eto_date\u003dDATE \u003d\u0026gt; default value: date of the newest customer created (format below)\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eDate format parameter\u003c/strong\u003e: yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\u0027Z\u0027(2017-09-19T02:31:05.000Z) \u003d\u003d\u0026gt; time zone is UTC.\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_1_0-getFirehoseCustomers",
        "parameters": [
          {
            "in": "path",
            "name": "BANK_ID",
            "description": "The bank id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TransactionsJsonV300"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.1.0/management/metrics/top-apis": {
      "get": {
        "tags": [
          "API-Metric"
        ],
        "summary": "get top apis",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eReturns get top apis. eg. total count, response time (in ms), etc.\u003c/p\u003e\u003cp\u003eShould be able to filter on the following fields\u003c/p\u003e\u003cp\u003eeg: /management/metrics/top-apis?from_date\u003d2017-09-19T02:31:05.000Z\u0026amp;to_date\u003d2017-09-19T02:31:05.000Z\u0026amp;consumer_id\u003d5 \u0026amp;user_id\u003d66214b8e-259e-44ad-8868-3eb47be70646\u0026amp;implemented_by_partial_function\u003dgetTransactionsForBankAccount \u0026amp;implemented_in_version\u003dv3.0.0\u0026amp;url\u003d/obp/v3.0.0/banks/gh.29.uk/accounts/8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0/owner/transactions \u0026amp;verb\u003dGET\u0026amp;anon\u003dfalse\u0026amp;app_name\u003dMapperPostman \u0026amp;exclude_app_names\u003dAPI-EXPLORER,API-Manager,SOFI,null\u003c/p\u003e\u003cp\u003e1 from_date (defaults to the day before the current date): eg:from_date\u003d2017-09-19T02:31:05.000Z\u003c/p\u003e\u003cp\u003e2 to_date (defaults to the current date) eg:to_date\u003d2017-09-19T02:31:05.000Z\u003c/p\u003e\u003cp\u003e3 consumer_id (if null ignore)\u003c/p\u003e\u003cp\u003e4 user_id (if null ignore)\u003c/p\u003e\u003cp\u003e5 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)\u003c/p\u003e\u003cp\u003e6 url (if null ignore), note: can not contain \u0027\u0026amp;\u0027.\u003c/p\u003e\u003cp\u003e7 app_name (if null ignore)\u003c/p\u003e\u003cp\u003e8 implemented_by_partial_function (if null ignore),\u003c/p\u003e\u003cp\u003e9 implemented_in_version (if null ignore)\u003c/p\u003e\u003cp\u003e10 verb (if null ignore)\u003c/p\u003e\u003cp\u003e11 correlation_id (if null ignore)\u003c/p\u003e\u003cp\u003e12 duration (if null ignore) non digit chars will be silently omitted\u003c/p\u003e\u003cp\u003e13 exclude_app_names (if null ignore).eg: \u0026amp;exclude_app_names\u003dAPI-EXPLORER,API-Manager,SOFI,null\u003c/p\u003e\u003cp\u003e14 exclude_url_pattern (if null ignore).you can design you own SQL NOT LIKE pattern. eg: \u0026amp;exclude_url_pattern\u003d%management/metrics%\u003c/p\u003e\u003cp\u003e15 exclude_implemented_by_partial_functions (if null ignore).eg: \u0026amp;exclude_implemented_by_partial_functions\u003dgetMetrics,getConnectorMetrics,getAggregateMetrics\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_1_0-getTopAPIs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/$colon$colon"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    },
    "/obp/v3.1.0/management/metrics/top-consumers": {
      "get": {
        "tags": [
          "API-Metric"
        ],
        "summary": "get metrics top consumers",
        "security": [
          {
            "directLogin": [],
            "gatewayLogin": []
          }
        ],
        "description": "\u003cp\u003eget metrics top consumers on api usage eg. total count, consumer_id and app_name.\u003c/p\u003e\u003cp\u003eShould be able to filter on the following fields\u003c/p\u003e\u003cp\u003eeg: /management/metrics/top-consumers?from_date\u003d2017-09-19T02:31:05.000Z\u0026amp;to_date\u003d2017-05-22T01:02:03.000Z\u0026amp;consumer_id\u003d5 \u0026amp;user_id\u003d66214b8e-259e-44ad-8868-3eb47be70646\u0026amp;implemented_by_partial_function\u003dgetTransactionsForBankAccount \u0026amp;implemented_in_version\u003dv3.0.0\u0026amp;url\u003d/obp/v3.0.0/banks/gh.29.uk/accounts/8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0/owner/transactions \u0026amp;verb\u003dGET\u0026amp;anon\u003dfalse\u0026amp;app_name\u003dMapperPostman \u0026amp;exclude_app_names\u003dAPI-EXPLORER,API-Manager,SOFI,null \u0026amp;limit\u003d100\u003c/p\u003e\u003cp\u003e1 from_date (defaults to the day before the current date): eg:from_date\u003d2017-09-19T02:31:05.000Z\u003c/p\u003e\u003cp\u003e2 to_date (defaults to the current date) eg:to_date\u003d2017-09-19T02:31:05.000Z\u003c/p\u003e\u003cp\u003e3 consumer_id (if null ignore)\u003c/p\u003e\u003cp\u003e4 user_id (if null ignore)\u003c/p\u003e\u003cp\u003e5 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)\u003c/p\u003e\u003cp\u003e6 url (if null ignore), note: can not contain \u0027\u0026amp;\u0027.\u003c/p\u003e\u003cp\u003e7 app_name (if null ignore)\u003c/p\u003e\u003cp\u003e8 implemented_by_partial_function (if null ignore),\u003c/p\u003e\u003cp\u003e9 implemented_in_version (if null ignore)\u003c/p\u003e\u003cp\u003e10 verb (if null ignore)\u003c/p\u003e\u003cp\u003e11 correlation_id (if null ignore)\u003c/p\u003e\u003cp\u003e12 duration (if null ignore) non digit chars will be silently omitted\u003c/p\u003e\u003cp\u003e13 exclude_app_names (if null ignore).eg: \u0026amp;exclude_app_names\u003dAPI-EXPLORER,API-Manager,SOFI,null\u003c/p\u003e\u003cp\u003e14 exclude_url_pattern (if null ignore).you can design you own SQL NOT LIKE pattern. eg: \u0026amp;exclude_url_pattern\u003d%management/metrics%\u003c/p\u003e\u003cp\u003e15 exclude_implemented_by_partial_functions (if null ignore).eg: \u0026amp;exclude_implemented_by_partial_functions\u003dgetMetrics,getConnectorMetrics,getAggregateMetrics\u003c/p\u003e\u003cp\u003e16 limit (for pagination: defaults to 50) eg:limit\u003d200\u003c/p\u003e\u003cp\u003eAuthentication is Mandatory\u003c/p\u003e",
        "operationId": "vv3_1_0-getMetricsTopConsumers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/$colon$colon"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorUserNotLoggedIn"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorHostnameNotSpecified": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00001: Hostname not specified. Could not get hostname from Props. Please edit your props file. Here are some example settings: hostname\u003dhttp://127.0.0.1:8080 or hostname\u003dhttps://www.example.com"
        }
      }
    },
    "ErrorDataImportDisabled": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00002: Data import is disabled for this API instance."
        }
      }
    },
    "ErrorTransactionDisabled": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00003: Transaction Requests is disabled in this API instance."
        }
      }
    },
    "ErrorServerAddDataError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00004: Server error: could not add message"
        }
      }
    },
    "ErrorPublicViewsNotAllowedOnThisInstance": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00005: Public views not allowed on this instance. Please set allow_public_views \u003d true in props files. "
        }
      }
    },
    "ErrorRemoteDataSecretMatchError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00006: Remote data secret cannot be matched! Check OBP-API and OBP-Storage Props values for remotedata.hostname, remotedata.port and remotedata.secret."
        }
      }
    },
    "ErrorRemoteDataSecretObtainError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00007: Remote data secret cannot be obtained! Check OBP-API and OBP-Storage Props values for remotedata.hostname, remotedata.port and remotedata.secret."
        }
      }
    },
    "ErrorApiVersionNotSupported": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00008: The API version you called is not enabled on this server. Please contact your API administrator or use another version."
        }
      }
    },
    "ErrorFirehoseViewsNotAllowedOnThisInstance": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00009: Firehose views not allowed on this instance. Please set allow_firehose_views \u003d true in props files. "
        }
      }
    },
    "ErrorMissingPropsValueAtThisInstance": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00010: Missing props value at this API instance - "
        }
      }
    },
    "ErrorNoValidElasticsearchIndicesConfigured": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00011: No elasticsearch indices are allowed on this instance. Please set es.warehouse.allowed.indices \u003d index1,index2 (or \u003d ALL for all). "
        }
      }
    },
    "ErrorInvalidJsonFormat": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10001: Incorrect json format."
        }
      }
    },
    "ErrorInvalidNumber": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10002: Invalid Number. Could not convert value to a number."
        }
      }
    },
    "ErrorInvalidISOCurrencyCode": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10003: Invalid Currency Value. It should be three letters ISO Currency Code. "
        }
      }
    },
    "ErrorFXCurrencyCodeCombinationsNotSupported": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10004: ISO Currency code combination not supported for FX. Please modify the FROM_CURRENCY_CODE or TO_CURRENCY_CODE. "
        }
      }
    },
    "ErrorInvalidDateFormat": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10005: Invalid Date Format. Could not convert value to a Date."
        }
      }
    },
    "ErrorInvalidCurrency": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10006: Invalid Currency Value."
        }
      }
    },
    "ErrorIncorrectRoleName": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10007: Incorrect Role name: "
        }
      }
    },
    "ErrorCouldNotTransformJsonToInternalModel": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10008: Could not transform Json to internal model."
        }
      }
    },
    "ErrorCountNotSaveOrUpdateResource": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10009: Could not save or update resource."
        }
      }
    },
    "ErrorNotImplemented": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10010: Not Implemented "
        }
      }
    },
    "ErrorInvalidFutureDateValue": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10011: future_date has to be in future."
        }
      }
    },
    "ErrormaximumLimitExceeded": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10012: Invalid value. Maximum number is 10000."
        }
      }
    },
    "ErrorattemptedToOpenAnEmptyBox": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10013: Attempted to open an empty Box."
        }
      }
    },
    "ErrorcannotDecryptValueOfProperty": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10014: Could not decrypt value of property "
        }
      }
    },
    "ErrorAllowedValuesAre": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10015: Allowed values are: "
        }
      }
    },
    "ErrorInvalidFilterParameterFormat": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10016: Incorrect filter Parameters in URL. "
        }
      }
    },
    "ErrorInvalidUrl": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10017: Incorrect URL Format. "
        }
      }
    },
    "ErrorFilterSortDirectionError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10023: obp_sort_direction parameter can only take two values: DESC or ASC!"
        }
      }
    },
    "ErrorFilterOffersetError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10024: wrong value for obp_offset parameter. Please send a positive integer (\u003d\u003e0)!"
        }
      }
    },
    "ErrorFilterLimitError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10025: wrong value for obp_limit parameter. Please send a positive integer (\u003d\u003e1)!"
        }
      }
    },
    "ErrorFilterDateFormatError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10026: Failed to parse date string. Please use this format yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\u0027Z\u0027!"
        }
      }
    },
    "ErrorFilterAnonFormatError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10028: anon parameter can only take two values: TRUE or FALSE!"
        }
      }
    },
    "ErrorFilterDurationFormatError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-10029: wrong value for `duration` parameter. Please send a positive integer (\u003d\u003e0)!"
        }
      }
    },
    "ErrorInvalidApiVersionString": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-00027: Invalid API Version string. We could not find the version specified."
        }
      }
    },
    "ErrorUserNotLoggedIn": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20001: User not logged in. Authentication is required!"
        }
      }
    },
    "ErrorDirectLoginMissingParameters": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20002: These DirectLogin parameters are missing: "
        }
      }
    },
    "ErrorDirectLoginInvalidToken": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20003: This DirectLogin token is invalid or expired: "
        }
      }
    },
    "ErrorInvalidLoginCredentials": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20004: Invalid login credentials. Check username/password."
        }
      }
    },
    "ErrorUserNotFoundById": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20005: User not found. Please specify a valid value for USER_ID."
        }
      }
    },
    "ErrorUserHasMissingRoles": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20006: User is missing one or more roles: "
        }
      }
    },
    "ErrorUserNotFoundByEmail": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20007: User not found by email."
        }
      }
    },
    "ErrorInvalidConsumerKey": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20008: Invalid Consumer Key."
        }
      }
    },
    "ErrorInvalidConsumerCredentials": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20009: Invalid consumer credentials"
        }
      }
    },
    "ErrorInvalidValueLength": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20010: Value too long"
        }
      }
    },
    "ErrorInvalidValueCharacters": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20011: Value contains invalid characters"
        }
      }
    },
    "ErrorInvalidDirectLoginParameters": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20012: Invalid direct login parameters"
        }
      }
    },
    "ErrorUsernameHasBeenLocked": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20013: The account has been locked, please contact administrator !"
        }
      }
    },
    "ErrorInvalidConsumerId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20014: Invalid Consumer ID. Please specify a valid value for CONSUMER_ID."
        }
      }
    },
    "ErrorUserNoPermissionUpdateConsumer": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20015: Only the developer that created the consumer key should be able to edit it, please login with the right user."
        }
      }
    },
    "ErrorUnexpectedErrorDuringLogin": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20016: An unexpected login error occurred. Please try again."
        }
      }
    },
    "ErrorUserNoPermissionAccessView": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20017: Current user does not have access to the view. Please specify a valid value for VIEW_ID."
        }
      }
    },
    "ErrorInvalidInternalRedirectUrl": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20018: Login failed, invalid internal redirectUrl."
        }
      }
    },
    "ErrorUserNoOwnerView": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20019: User does not have access to owner view. "
        }
      }
    },
    "ErrorInvalidCustomViewFormat": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20020: View name must start with `_`. eg: _work, _life "
        }
      }
    },
    "ErrorSystemViewsCanNotBeModified": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20021: System Views can not be modified. Only the created views can be modified."
        }
      }
    },
    "ErrorViewDoesNotPermitAccess": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20022: View does not permit the access."
        }
      }
    },
    "ErrorConsumerHasMissingRoles": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20023: Consumer is missing one or more roles: "
        }
      }
    },
    "ErrorConsumerNotFoundById": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20024: Consumer not found. Please specify a valid value for CONSUMER_ID."
        }
      }
    },
    "ErrorScopeNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20025: Scope not found. Please specify a valid value for SCOPE_ID."
        }
      }
    },
    "ErrorConsumerDoesNotHaveScope": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20026: CONSUMER_ID does not have the SCOPE_ID "
        }
      }
    },
    "ErrorUserNotFoundByUsername": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20027: User not found by username."
        }
      }
    },
    "ErrorGatewayLoginMissingParameters": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20028: These GatewayLogin parameters are missing: "
        }
      }
    },
    "ErrorGatewayLoginUnknownError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20029: Unknown Gateway login error."
        }
      }
    },
    "ErrorGatewayLoginHostPropertyMissing": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20030: Property gateway.host is not defined."
        }
      }
    },
    "ErrorGatewayLoginWhiteListAddresses": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20031: Gateway login can be done only from allowed addresses."
        }
      }
    },
    "ErrorGatewayLoginJwtTokenIsNotValid": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20040: The JWT is corrupted/changed during a transport."
        }
      }
    },
    "ErrorGatewayLoginCannotExtractJwtToken": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20041: Header, Payload and Signature cannot be extracted from the JWT."
        }
      }
    },
    "ErrorGatewayLoginNoNeedToCallCbs": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20042: There is no need to call CBS"
        }
      }
    },
    "ErrorGatewayLoginCannotFindUser": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20043: User cannot be found. Please initiate CBS communication in order to create it."
        }
      }
    },
    "ErrorGatewayLoginCannotGetCbsToken": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20044: Cannot get the CBSToken response from South side"
        }
      }
    },
    "ErrorGatewayLoginCannotGetOrCreateUser": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20045: Cannot get or create user during GatewayLogin process."
        }
      }
    },
    "ErrorGatewayLoginNoJwtForResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20046: There is no useful value for JWT."
        }
      }
    },
    "ErrorUserNotSuperAdmin": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20050: Logged user is not super admin!"
        }
      }
    },
    "ErrorElasticSearchIndexNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20051: Elasticsearch index or indices not found."
        }
      }
    },
    "ErrorNotEnoughtSearchStatisticsResults": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20052: Result set too small. Will not be displayed for reasons of privacy."
        }
      }
    },
    "ErrorElasticSearchEmptyQueryBody": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20053: The Elasticsearch query body cannot be empty"
        }
      }
    },
    "ErrorOauth2IsNotAllowed": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20201: OAuth2 is not allowed at this instance."
        }
      }
    },
    "ErrorOauth2IJwtCannotBeVerified": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20202: OAuth2\u0027s Access Token cannot be verified."
        }
      }
    },
    "ErrorOauth2ThereIsNoUrlOfJwkSet": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20203: There is no an URL of OAuth 2.0 server\u0027s JWK set, published at a well-known URL."
        }
      }
    },
    "ErrorOauth2BadJWTException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20204: Bad JWT error. "
        }
      }
    },
    "ErrorOauth2ParseException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-20205: Parse error. "
        }
      }
    },
    "ErrorBankNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30001: Bank not found. Please specify a valid value for BANK_ID."
        }
      }
    },
    "ErrorCustomerNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30002: Customer not found. Please specify a valid value for CUSTOMER_NUMBER."
        }
      }
    },
    "ErrorCustomerNotFoundByCustomerId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30046: Customer not found. Please specify a valid value for CUSTOMER_ID."
        }
      }
    },
    "ErrorAccountNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30003: Account not found. Please specify a valid value for ACCOUNT_ID."
        }
      }
    },
    "ErrorCounterpartyNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30004: Counterparty not found. The BANK_ID / ACCOUNT_ID specified does not exist on this server."
        }
      }
    },
    "ErrorViewNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30005: View not found for Account. Please specify a valid value for VIEW_ID"
        }
      }
    },
    "ErrorCustomerNumberAlreadyExists": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30006: Customer Number already exists. Please specify a different value for BANK_ID or CUSTOMER_NUMBER."
        }
      }
    },
    "ErrorCustomerAlreadyExistsForUser": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30007: The User is already linked to a Customer at the bank specified by BANK_ID"
        }
      }
    },
    "ErrorUserCustomerLinksNotFoundForUser": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30008: User Customer Link not found by USER_ID"
        }
      }
    },
    "ErrorAtmNotFoundByAtmId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30009: ATM not found. Please specify a valid value for ATM_ID."
        }
      }
    },
    "ErrorBranchNotFoundByBranchId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-300010: Branch not found. Please specify a valid value for BRANCH_ID."
        }
      }
    },
    "ErrorProductNotFoundByProductCode": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30011: Product not found. Please specify a valid value for PRODUCT_CODE."
        }
      }
    },
    "ErrorCounterpartyNotFoundByIban": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30012: Counterparty not found. Please specify a valid value for IBAN."
        }
      }
    },
    "ErrorCounterpartyBeneficiaryPermit": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30013: The account can not send money to the Counterparty. Please set the Counterparty \u0027isBeneficiary\u0027 true first"
        }
      }
    },
    "ErrorCounterpartyAlreadyExists": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30014: Counterparty already exists. Please specify a different value for BANK_ID or ACCOUNT_ID or VIEW_ID or NAME."
        }
      }
    },
    "ErrorCreateBranchError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30015: Could not insert the Branch"
        }
      }
    },
    "ErrorUpdateBranchError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30016: Could not update the Branch"
        }
      }
    },
    "ErrorCounterpartyNotFoundByCounterpartyId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30017: Counterparty not found. Please specify a valid value for COUNTERPARTY_ID."
        }
      }
    },
    "ErrorBankAccountNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30018: Bank Account not found. Please specify valid values for BANK_ID and ACCOUNT_ID. "
        }
      }
    },
    "ErrorConsumerNotFoundByConsumerId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30019: Consumer not found. Please specify a valid value for CONSUMER_ID."
        }
      }
    },
    "ErrorCreateBankError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30020: Could not create the Bank"
        }
      }
    },
    "ErrorUpdateBankError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30021: Could not update the Bank"
        }
      }
    },
    "ErrorNoViewPermission": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30022: The current view does not have the permission: "
        }
      }
    },
    "ErrorUpdateConsumerError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30023: Cannot update Consumer "
        }
      }
    },
    "ErrorCreateConsumerError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30024: Could not create Consumer "
        }
      }
    },
    "ErrorCreateUserCustomerLinksError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30025: Could not create user_customer_links "
        }
      }
    },
    "ErrorConsumerKeyAlreadyExists": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30026: Consumer Key already exists. Please specify a different value."
        }
      }
    },
    "ErrorNoExistingAccountHolders": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30027: Account Holders not found. The BANK_ID / ACCOUNT_ID specified for account holder does not exist on this server"
        }
      }
    },
    "ErrorCreateAtmError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30028: Could not insert the ATM"
        }
      }
    },
    "ErrorUpdateAtmError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30029: Could not update the ATM"
        }
      }
    },
    "ErrorCreateProductError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30030: Could not insert the Product"
        }
      }
    },
    "ErrorUpdateProductError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30031: Could not update the Product"
        }
      }
    },
    "ErrorCreateCardError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30032: Could not insert the Card"
        }
      }
    },
    "ErrorUpdateCardError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30033: Could not update the Card"
        }
      }
    },
    "ErrorViewIdNotSupported": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30034: This ViewId is do not supported. Only support four now: Owner, Public, Accountant, Auditor."
        }
      }
    },
    "ErrorUserCustomerLinkNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30035: User Customer Link not found"
        }
      }
    },
    "ErrorCreateOrUpdateCounterpartyMetadataError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30036: Could not create or update CounterpartyMetadata"
        }
      }
    },
    "ErrorCounterpartyMetadataNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30037: CounterpartyMetadata not found. Please specify valid values for BANK_ID, ACCOUNT_ID and COUNTERPARTY_ID. "
        }
      }
    },
    "ErrorCreateFxRateError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30038: Could not insert the Fx Rate"
        }
      }
    },
    "ErrorUpdateFxRateError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30039: Could not update the Fx Rate"
        }
      }
    },
    "ErrorUnknownFxRateError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30040: Unknown Fx Rate error"
        }
      }
    },
    "ErrorCheckbookOrderNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30041: CheckbookOrder not found for Account. "
        }
      }
    },
    "ErrorGetTopApisError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30042: Could not get the top apis from database.  "
        }
      }
    },
    "ErrorGetMetricsTopConsumersError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30045: Could not get the top consumers from database.  "
        }
      }
    },
    "ErrorGetAggregateMetricsError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30043: Could not get the aggregate metrics from database.  "
        }
      }
    },
    "ErrorDefaultBankIdNotSet": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30044: Default BankId is not set on this instance. Please set defaultBank.bank_id in props files. "
        }
      }
    },
    "ErrorMeetingsNotSupported": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30101: Meetings are not supported on this server."
        }
      }
    },
    "ErrorMeetingApiKeyNotConfigured": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30102: Meeting provider API Key is not configured."
        }
      }
    },
    "ErrorMeetingApiSecretNotConfigured": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30103: Meeting provider Secret is not configured."
        }
      }
    },
    "ErrorMeetingNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30104: Meeting not found."
        }
      }
    },
    "ErrorInvalidAccountBalanceCurrency": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30105: Invalid Balance Currency."
        }
      }
    },
    "ErrorInvalidAccountBalanceAmount": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30106: Invalid Balance Amount."
        }
      }
    },
    "ErrorInvalidUserId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30107: Invalid User Id."
        }
      }
    },
    "ErrorInvalidAccountType": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30108: Invalid Account Type."
        }
      }
    },
    "ErrorInitialBalanceMustBeZero": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30109: Initial Balance of Account must be Zero (0)."
        }
      }
    },
    "ErrorInvalidAccountIdFormat": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30110: Invalid Account Id. The ACCOUNT_ID should only contain 0-9/a-z/A-Z/\u0027-\u0027/\u0027.\u0027/\u0027_\u0027, the length should be smaller than 255."
        }
      }
    },
    "ErrorInvalidBankIdFormat": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30111: Invalid Bank Id. The BANK_ID should only contain 0-9/a-z/A-Z/\u0027-\u0027/\u0027.\u0027/\u0027_\u0027, the length should be smaller than 255."
        }
      }
    },
    "ErrorInvalidAccountInitialBalance": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30112: Invalid Number. Initial balance must be a number, e.g 1000.00"
        }
      }
    },
    "ErrorEntitlementIsBankRole": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30205: This entitlement is a Bank Role. Please set bank_id to a valid bank id."
        }
      }
    },
    "ErrorEntitlementIsSystemRole": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30206: This entitlement is a System Role. Please set bank_id to empty string."
        }
      }
    },
    "ErrorInvalidStrongPasswordFormat": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30207: Invalid Password Format. Your password should EITHER be at least 10 characters long and contain mixed numbers and both upper and lower case letters and at least one special character, OR be longer than 16 characters."
        }
      }
    },
    "ErrorAccountIdAlreadyExsits": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30208: Account_ID already exists at the Bank."
        }
      }
    },
    "ErrorInsufficientAuthorisationToCreateBranch": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30209: Insufficient authorisation to Create Branch. You do not have the role CanCreateBranch."
        }
      }
    },
    "ErrorInsufficientAuthorisationToCreateBank": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30210: Insufficient authorisation to Create Bank. You do not have the role CanCreateBank."
        }
      }
    },
    "ErrorInvalidConnector": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30211: Invalid Connector Version. Please specify a valid value for CONNECTOR."
        }
      }
    },
    "ErrorEntitlementNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30212: EntitlementId not found"
        }
      }
    },
    "ErrorUserDoesNotHaveEntitlement": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30213: USER_ID does not have the ENTITLEMENT_ID."
        }
      }
    },
    "ErrorEntitlementRequestAlreadyExists": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30214: Entitlement Request already exists for the user."
        }
      }
    },
    "ErrorEntitlementRequestCannotBeAdded": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30217: Entitlement Request cannot be added."
        }
      }
    },
    "ErrorEntitlementRequestNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30215: EntitlementRequestId not found"
        }
      }
    },
    "ErrorEntitlementAlreadyExists": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-30216: Entitlement already exists for the user."
        }
      }
    },
    "ErrorbranchesNotFoundLicense": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-32001: No branches available. License may not be set."
        }
      }
    },
    "ErrorBranchesNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-32002: No branches available."
        }
      }
    },
    "ErroratmsNotFoundLicense": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-33001: No ATMs available. License may not be set."
        }
      }
    },
    "ErroratmsNotFound": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-33002: No ATMs available."
        }
      }
    },
    "ErrorInvalidTransactionRequestType": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40001: Invalid value for TRANSACTION_REQUEST_TYPE"
        }
      }
    },
    "ErrorInsufficientAuthorisationToCreateTransactionRequest": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40002: Insufficient authorisation to create TransactionRequest. The Transaction Request could not be created because you don\u0027t have access to the owner view of the from account or you don\u0027t have access to canCreateAnyTransactionRequest."
        }
      }
    },
    "ErrorInvalidTransactionRequestCurrency": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40003: Transaction Request Currency must be the same as From Account Currency."
        }
      }
    },
    "ErrorInvalidTransactionRequestId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40004: Transaction Request Id not found."
        }
      }
    },
    "ErrorInsufficientAuthorisationToCreateTransactionType": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40005: Insufficient authorisation to Create Transaction Type offered by the bank. The Request could not be created because you don\u0027t have access to CanCreateTransactionType."
        }
      }
    },
    "ErrorCreateTransactionTypeInsertError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40006: Could not insert Transaction Type: Non unique BANK_ID / SHORT_CODE"
        }
      }
    },
    "ErrorCreateTransactionTypeUpdateError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40007: Could not update Transaction Type: Non unique BANK_ID / SHORT_CODE"
        }
      }
    },
    "ErrorNotPositiveAmount": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40008: Can\u0027t send a payment with a value of 0 or less."
        }
      }
    },
    "ErrorTransactionRequestTypeHasChanged": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40009: The TRANSACTION_REQUEST_TYPE has changed."
        }
      }
    },
    "ErrorInvalidTransactionRequesChallengeId": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40010: Invalid Challenge Id. Please specify a valid value for CHALLENGE_ID."
        }
      }
    },
    "ErrorTransactionRequestStatusNotInitiated": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40011: Transaction Request Status is not INITIATED."
        }
      }
    },
    "ErrorCounterpartyNotFoundOtherAccountProvider": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40012: Please set up the otherAccountRoutingScheme and otherBankRoutingScheme fields of the Counterparty to \u0027OBP\u0027"
        }
      }
    },
    "ErrorInvalidChargePolicy": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40013: Invalid Charge Policy. Please specify a valid value for Charge_Policy: SHARED, SENDER or RECEIVER. "
        }
      }
    },
    "ErrorAllowedAttemptsUsedUp": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40014: Sorry, you\u0027ve used up your allowed attempts. "
        }
      }
    },
    "ErrorInvalidChallengeType": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40015: Invalid Challenge Type. Please specify a valid value for CHALLENGE_TYPE, when you create the transaction request."
        }
      }
    },
    "ErrorInvalidChallengeAnswer": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40016: Invalid Challenge Answer. Please specify a valid value for answer in Json body. If it is sandbox mode, the answer must be `123`. If it kafka mode, the answer can be got by phone message or other security ways."
        }
      }
    },
    "ErrorInvalidPhoneNumber": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-40017: Invalid Phone Number. Please specify a valid value for PHONE_NUMBER. Eg:+9722398746 "
        }
      }
    },
    "ErrorUnknownError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50000: Unknown Error."
        }
      }
    },
    "ErrorFutureTimeoutException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50001: Future Timeout Exception."
        }
      }
    },
    "ErrorKafkaMessageClassCastException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50002: Kafka Response Message Class Cast Exception."
        }
      }
    },
    "ErrorAdapterOrCoreBankingSystemException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50003: Adapter Or Core Banking System Exception. Failed to get a valid response from the south side Adapter or Core Banking System."
        }
      }
    },
    "ErrorCurrentUserNotFoundException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50004: Method (AuthUser.getCurrentUser) can not find the current user in the current context!"
        }
      }
    },
    "ErrorAnUnspecifiedOrInternalErrorOccurred": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50005: An unspecified or internal error occurred."
        }
      }
    },
    "ErrorKafkaInterruptedException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50006: Kafka interrupted exception."
        }
      }
    },
    "ErrorKafkaExecutionException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50007: Kafka execution exception."
        }
      }
    },
    "ErrorKafkaStreamTimeoutException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50008: Akka Kafka stream timeout exception."
        }
      }
    },
    "ErrorKafkaUnknownError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50009: Kafka unknown error."
        }
      }
    },
    "ErrorScalaEmptyBoxToLiftweb": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50010: Scala return Empty box to Liftweb."
        }
      }
    },
    "ErrorNoCallContext": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50012: Can not get the CallContext object here."
        }
      }
    },
    "ErrorConnectorEmptyResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50200: Connector cannot return the data we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetBankAccounts": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50201: Connector did not return the set of accounts we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetBankAccount": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50202: Connector did not return the account we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetTransaction": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50203: Connector did not return the transaction we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetTransactions": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50204: Connector did not return the set of transactions we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetTransactionRequests210": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50205: Connector did not return the set of transaction requests we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetChallengeThreshold": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50206: Connector did not return the set of challenge threshold we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetChargeLevel": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50207: Connector did not return the set of challenge level we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForCreateTransactionRequestImpl210": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50208: Connector did not return the set of transactions requests we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForMakePayment": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50209: Connector did not return the set of transactions we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForMakePaymentv200": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50210: Connector did not return the set of transaction id we requested."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetCheckbookOrdersFuture": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50211: Connector did not return the set of check book."
        }
      }
    },
    "ErrorInvalidConnectorResponseForGetStatusOfCreditCardOrderFuture": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-50212: Connector did not return the set of status of credit card."
        }
      }
    },
    "ErrorGetStatusException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-60001: Save Transaction Exception. "
        }
      }
    },
    "ErrorGetChargeValueException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-60002: Get ChargeValue Exception. "
        }
      }
    },
    "ErrorCreateTransactionsException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-60003: Create transaction Exception. "
        }
      }
    },
    "ErrorUpdateBankAccountException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-60004: Update bank account Exception. "
        }
      }
    },
    "ErrorSaveTransactionRequestTransactionException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-60005: Save Transaction Request Transaction Exception. "
        }
      }
    },
    "ErrorSaveTransactionRequestChallengeException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-60006: Save Transaction Request Challenge Exception. "
        }
      }
    },
    "ErrorSaveTransactionRequestStatusException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-60007: Save Transaction Request Status Exception. "
        }
      }
    },
    "ErrorTransactionRequestDetailsExtractException": {
      "properties": {
        "message": {
          "type": "string",
          "example": "OBP-60008: Transaction detail body extract exception. "
        }
      }
    },
    "ErrorallFields": {
      "properties": {
        "message": {
          "type": "string",
          "example": "null"
        }
      }
    },
    "ImageUrlJSON": {
      "required": [
        "image_URL"
      ],
      "properties": {
        "image_URL": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestBodyJsonV200": {
      "required": [
        "to",
        "value",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "this is for work"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "to": {
          "$ref": "#/definitions/TransactionRequestAccountJsonV140"
        }
      }
    },
    "CreateUserJson": {
      "required": [
        "email",
        "username",
        "password",
        "first_name",
        "last_name"
      ],
      "properties": {
        "first_name": {
          "type": "string",
          "example": "String"
        },
        "email": {
          "type": "string",
          "example": "String"
        },
        "username": {
          "type": "string",
          "example": "String"
        },
        "last_name": {
          "type": "string",
          "example": "String"
        },
        "password": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "OpenCorporateUrlJSON": {
      "required": [
        "open_corporates_URL"
      ],
      "properties": {
        "open_corporates_URL": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestBodyCounterpartyJSON": {
      "required": [
        "to",
        "value",
        "description",
        "charge_policy"
      ],
      "properties": {
        "charge_policy": {
          "type": "string",
          "example": "SHARED"
        },
        "description": {
          "type": "string",
          "example": "A description for the transaction to the counterparty"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "to": {
          "$ref": "#/definitions/CounterpartyIdJson"
        }
      }
    },
    "MoreInfoJSON": {
      "required": [
        "more_info"
      ],
      "properties": {
        "more_info": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "PostTransactionWhereJSON": {
      "required": [
        "where"
      ],
      "properties": {
        "where": {
          "$ref": "#/definitions/LocationPlainJSON"
        }
      }
    },
    "UrlJSON": {
      "required": [
        "URL"
      ],
      "properties": {
        "URL": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "CorporateLocationJSON": {
      "required": [
        "corporate_location"
      ],
      "properties": {
        "corporate_location": {
          "$ref": "#/definitions/LocationPlainJSON"
        }
      }
    },
    "AliasJSON": {
      "required": [
        "alias"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "CreateMeetingJson": {
      "required": [
        "provider_id",
        "purpose_id"
      ],
      "properties": {
        "purpose_id": {
          "type": "string",
          "example": "String"
        },
        "provider_id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestBodySEPAJSON": {
      "required": [
        "value",
        "to",
        "description",
        "charge_policy"
      ],
      "properties": {
        "charge_policy": {
          "type": "string",
          "example": "SHARED"
        },
        "description": {
          "type": "string",
          "example": "This is a SEPA Transaction Request"
        },
        "to": {
          "$ref": "#/definitions/IbanJson"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        }
      }
    },
    "PostTransactionTagJSON": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ConsumerRedirectUrlJSON": {
      "required": [
        "redirect_url"
      ],
      "properties": {
        "redirect_url": {
          "type": "string",
          "example": "http://localhost:8888"
        }
      }
    },
    "PostKycDocumentJSON": {
      "required": [
        "customer_number",
        "type",
        "number",
        "issue_date",
        "issue_place",
        "expiry_date"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "12345"
        },
        "customer_number": {
          "type": "string",
          "example": "1234"
        },
        "issue_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "type": {
          "type": "string",
          "example": "passport"
        },
        "issue_place": {
          "type": "string",
          "example": "Berlin"
        },
        "expiry_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "CreateAccountJSONV220": {
      "required": [
        "user_id",
        "label",
        "type",
        "balance",
        "branch_id",
        "account_routing"
      ],
      "properties": {
        "account_routing": {
          "$ref": "#/definitions/AccountRoutingJsonV121"
        },
        "branch_id": {
          "type": "string",
          "example": "1234"
        },
        "label": {
          "type": "string",
          "example": "Label"
        },
        "balance": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "user_id": {
          "type": "string",
          "example": "66214b8e-259e-44ad-8868-3eb47be70646"
        },
        "type": {
          "type": "string",
          "example": "CURRENT"
        }
      }
    },
    "PostPhysicalCardJSON": {
      "required": [
        "bank_card_number",
        "name_on_card",
        "issue_number",
        "serial_number",
        "valid_from_date",
        "expires_date",
        "enabled",
        "technology",
        "networks",
        "allows",
        "account_id",
        "replacement",
        "pin_reset",
        "collected",
        "posted"
      ],
      "properties": {
        "allows": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expires_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issue_number": {
          "type": "string",
          "example": "String"
        },
        "replacement": {
          "$ref": "#/definitions/ReplacementJSON"
        },
        "enabled": {
          "type": "boolean",
          "example": "true"
        },
        "collected": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "technology": {
          "type": "string",
          "example": "String"
        },
        "account_id": {
          "type": "string",
          "example": "String"
        },
        "pin_reset": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PinResetJSON"
          }
        },
        "serial_number": {
          "type": "string",
          "example": "String"
        },
        "valid_from_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "bank_card_number": {
          "type": "string",
          "example": "String"
        },
        "name_on_card": {
          "type": "string",
          "example": "String"
        },
        "posted": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "BankJSONV220": {
      "required": [
        "id",
        "full_name",
        "short_name",
        "logo_url",
        "website_url",
        "swift_bic",
        "national_identifier",
        "bank_routing"
      ],
      "properties": {
        "national_identifier": {
          "type": "string",
          "example": "UK97ZZZ1234567890"
        },
        "full_name": {
          "type": "string",
          "example": "uk"
        },
        "swift_bic": {
          "type": "string",
          "example": "IIIGGB22"
        },
        "logo_url": {
          "type": "string",
          "example": "https://static.openbankproject.com/images/sandbox/bank_x.png"
        },
        "id": {
          "type": "string",
          "example": "gh.29.uk.x"
        },
        "short_name": {
          "type": "string",
          "example": "uk"
        },
        "bank_routing": {
          "$ref": "#/definitions/BankRoutingJsonV121"
        },
        "website_url": {
          "type": "string",
          "example": "https://www.example.com"
        }
      }
    },
    "CreateEntitlementJSON": {
      "required": [
        "bank_id",
        "role_name"
      ],
      "properties": {
        "role_name": {
          "type": "string",
          "example": "String"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        }
      }
    },
    "SandboxDataImport": {
      "required": [
        "banks",
        "users",
        "accounts",
        "transactions",
        "branches",
        "atms",
        "products",
        "crm_events"
      ],
      "properties": {
        "crm_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SandboxCrmEventImport"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SandboxUserImport"
          }
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SandboxProductImport"
          }
        },
        "banks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SandboxBankImport"
          }
        },
        "branches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SandboxBranchImport"
          }
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SandboxTransactionImport"
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SandboxAccountImport"
          }
        },
        "atms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SandboxAtmImport"
          }
        }
      }
    },
    "SocialMediaJSON": {
      "required": [
        "customer_number",
        "type",
        "handle",
        "date_added",
        "date_activated"
      ],
      "properties": {
        "date_activated": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "customer_number": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "date_added": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "type": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "handle": {
          "type": "string",
          "example": "PlaceholderString"
        }
      }
    },
    "PostCustomerJsonV210": {
      "required": [
        "user_id",
        "customer_number",
        "legal_name",
        "mobile_phone_number",
        "email",
        "face_image",
        "date_of_birth",
        "relationship_status",
        "dependants",
        "dob_of_dependants",
        "credit_rating",
        "credit_limit",
        "highest_education_attained",
        "employment_status",
        "kyc_status",
        "last_ok_date"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "person@example.com"
        },
        "mobile_phone_number": {
          "type": "string",
          "example": "+44 07972 444 876"
        },
        "customer_number": {
          "type": "string",
          "example": "new customer number 687687678"
        },
        "highest_education_attained": {
          "type": "string",
          "example": "Bachelor’s Degree"
        },
        "user_id": {
          "type": "string",
          "example": "user_id to attach this customer to e.g. 123213"
        },
        "dob_of_dependants": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date"
          }
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "credit_rating": {
          "$ref": "#/definitions/CustomerCreditRatingJSON"
        },
        "last_ok_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "employment_status": {
          "type": "string",
          "example": "Employed"
        },
        "legal_name": {
          "type": "string",
          "example": "NONE"
        },
        "credit_limit": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "face_image": {
          "$ref": "#/definitions/CustomerFaceImageJson"
        },
        "dependants": {
          "type": "integer",
          "format": "int32",
          "example": "5"
        },
        "relationship_status": {
          "type": "string",
          "example": "Single"
        },
        "kyc_status": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "PutEnabledJSON": {
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": "false"
        }
      }
    },
    "TransactionNarrativeJSON": {
      "required": [
        "narrative"
      ],
      "properties": {
        "narrative": {
          "type": "string",
          "example": "narative"
        }
      }
    },
    "PhysicalLocationJSON": {
      "required": [
        "physical_location"
      ],
      "properties": {
        "physical_location": {
          "$ref": "#/definitions/LocationPlainJSON"
        }
      }
    },
    "ElasticSearchJSON": {
      "required": [
        "metrics",
        "warehouse"
      ],
      "properties": {
        "warehouse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WarehouseJSON"
          }
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsJSON"
          }
        }
      }
    },
    "CreateUserCustomerLinkJson": {
      "required": [
        "user_id",
        "customer_id"
      ],
      "properties": {
        "customer_id": {
          "type": "string",
          "example": "String"
        },
        "user_id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "PostTransactionCommentJSON": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "UpdateViewJSON": {
      "required": [
        "description",
        "metadata_view",
        "is_public",
        "which_alias_to_use",
        "hide_metadata_if_alias_used",
        "allowed_actions"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "this is for family"
        },
        "is_public": {
          "type": "boolean",
          "example": "true"
        },
        "hide_metadata_if_alias_used": {
          "type": "boolean",
          "example": "true"
        },
        "which_alias_to_use": {
          "type": "string",
          "example": "family"
        },
        "metadata_view": {
          "type": "string",
          "example": "owner"
        },
        "allowed_actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PostKycCheckJSON": {
      "required": [
        "customer_number",
        "date",
        "how",
        "staff_user_id",
        "staff_name",
        "satisfied",
        "comments"
      ],
      "properties": {
        "customer_number": {
          "type": "string",
          "example": "1239879"
        },
        "how": {
          "type": "string",
          "example": "online_meeting"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "satisfied": {
          "type": "boolean",
          "example": "true"
        },
        "staff_user_id": {
          "type": "string",
          "example": "67876"
        },
        "staff_name": {
          "type": "string",
          "example": "Simon"
        },
        "comments": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "PostCounterpartyJSON": {
      "required": [
        "name",
        "description",
        "other_account_routing_scheme",
        "other_account_routing_address",
        "other_account_secondary_routing_scheme",
        "other_account_secondary_routing_address",
        "other_bank_routing_scheme",
        "other_bank_routing_address",
        "other_branch_routing_scheme",
        "other_branch_routing_address",
        "is_beneficiary",
        "bespoke"
      ],
      "properties": {
        "other_account_routing_address": {
          "type": "string",
          "example": "7987987-2348987-234234"
        },
        "other_account_routing_scheme": {
          "type": "string",
          "example": "accountNumber"
        },
        "name": {
          "type": "string",
          "example": "CounterpartyName"
        },
        "other_account_secondary_routing_address": {
          "type": "string",
          "example": "DE89370400440532013000"
        },
        "is_beneficiary": {
          "type": "boolean",
          "example": "true"
        },
        "description": {
          "type": "string",
          "example": "My landlord"
        },
        "other_branch_routing_address": {
          "type": "string",
          "example": "10010"
        },
        "bespoke": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostCounterpartyBespokeJson"
          }
        },
        "other_bank_routing_scheme": {
          "type": "string",
          "example": "bankCode"
        },
        "other_branch_routing_scheme": {
          "type": "string",
          "example": "branchNumber"
        },
        "other_bank_routing_address": {
          "type": "string",
          "example": "10"
        },
        "other_account_secondary_routing_scheme": {
          "type": "string",
          "example": "IBAN"
        }
      }
    },
    "PostTransactionImageJSON": {
      "required": [
        "label",
        "URL"
      ],
      "properties": {
        "URL": {
          "type": "string",
          "example": "String"
        },
        "label": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "FXRateJsonV220": {
      "required": [
        "bank_id",
        "from_currency_code",
        "to_currency_code",
        "conversion_value",
        "inverse_conversion_value",
        "effective_date"
      ],
      "properties": {
        "inverse_conversion_value": {
          "type": "number",
          "format": "double",
          "example": "1.0"
        },
        "to_currency_code": {
          "type": "string",
          "example": "USD"
        },
        "effective_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "conversion_value": {
          "type": "number",
          "format": "double",
          "example": "1.0"
        },
        "bank_id": {
          "type": "string",
          "example": "bankid123"
        },
        "from_currency_code": {
          "type": "string",
          "example": "EUR"
        }
      }
    },
    "ChallengeAnswerJSON": {
      "required": [
        "id",
        "answer"
      ],
      "properties": {
        "answer": {
          "type": "string",
          "example": "123"
        },
        "id": {
          "type": "string",
          "example": "This is challenge.id, you can get it from `Create Transaction Request.` response, only is useful if status \u003d\u003d`INITIATED` there."
        }
      }
    },
    "ProductJsonV220": {
      "required": [
        "bank_id",
        "code",
        "name",
        "category",
        "family",
        "super_family",
        "more_info_url",
        "details",
        "description",
        "meta"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "product name"
        },
        "description": {
          "type": "string",
          "example": "Description"
        },
        "more_info_url": {
          "type": "string",
          "example": "www.example.com/prod1/more-info.html"
        },
        "super_family": {
          "type": "string",
          "example": "super family"
        },
        "code": {
          "type": "string",
          "example": "prod1"
        },
        "bank_id": {
          "type": "string",
          "example": "bankid123"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "details": {
          "type": "string",
          "example": "Details"
        },
        "category": {
          "type": "string",
          "example": "category"
        },
        "family": {
          "type": "string",
          "example": "family"
        }
      }
    },
    "TransactionTypeJsonV200": {
      "required": [
        "id",
        "bank_id",
        "short_code",
        "summary",
        "description",
        "charge"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "short_code": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "bank_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "id": {
          "$ref": "#/definitions/TransactionTypeId"
        },
        "charge": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "summary": {
          "type": "string",
          "example": "PlaceholderString"
        }
      }
    },
    "AtmJsonV300": {
      "required": [
        "id",
        "bank_id",
        "name",
        "address",
        "location",
        "meta",
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday",
        "is_accessible",
        "located_at",
        "more_info",
        "has_deposit_capability"
      ],
      "properties": {
        "sunday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "name": {
          "type": "string",
          "example": "Atm by the Lake"
        },
        "location": {
          "$ref": "#/definitions/LocationJsonV140"
        },
        "tuesday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "wednesday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "monday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "has_deposit_capability": {
          "type": "string",
          "example": "true"
        },
        "more_info": {
          "type": "string",
          "example": "short walk to the lake from here"
        },
        "bank_id": {
          "type": "string",
          "example": "bank-id-123"
        },
        "id": {
          "type": "string",
          "example": "atm-id-123"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "address": {
          "$ref": "#/definitions/AddressJsonV300"
        },
        "friday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "is_accessible": {
          "type": "string",
          "example": "true"
        },
        "thursday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "saturday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "located_at": {
          "type": "string",
          "example": "Full service store"
        }
      }
    },
    "BranchJsonV300": {
      "required": [
        "id",
        "bank_id",
        "name",
        "address",
        "location",
        "meta",
        "lobby",
        "drive_up",
        "branch_routing",
        "is_accessible",
        "accessibleFeatures",
        "branch_type",
        "more_info",
        "phone_number"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Branch by the Lake"
        },
        "phone_number": {
          "type": "string",
          "example": "+381631954907"
        },
        "location": {
          "$ref": "#/definitions/LocationJsonV140"
        },
        "branch_type": {
          "type": "string",
          "example": "Full service store"
        },
        "branch_routing": {
          "$ref": "#/definitions/BranchRoutingJsonV141"
        },
        "drive_up": {
          "$ref": "#/definitions/DriveUpJsonV330"
        },
        "more_info": {
          "type": "string",
          "example": "short walk to the lake from here"
        },
        "bank_id": {
          "type": "string",
          "example": "bank-id-123"
        },
        "id": {
          "type": "string",
          "example": "branch-id-123"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "lobby": {
          "$ref": "#/definitions/LobbyJsonV330"
        },
        "accessibleFeatures": {
          "type": "string",
          "example": "wheelchair, atm usuable by the visually impaired"
        },
        "address": {
          "$ref": "#/definitions/AddressJsonV300"
        },
        "is_accessible": {
          "type": "string",
          "example": "true"
        }
      }
    },
    "BranchJsonPutV210": {
      "required": [
        "bank_id",
        "name",
        "address",
        "location",
        "meta",
        "lobby",
        "drive_up"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "OBP"
        },
        "location": {
          "$ref": "#/definitions/LocationJsonV140"
        },
        "drive_up": {
          "$ref": "#/definitions/DriveUpStringJson"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.fi"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "lobby": {
          "$ref": "#/definitions/LobbyStringJson"
        },
        "address": {
          "$ref": "#/definitions/AddressJsonV140"
        }
      }
    },
    "CreditLimitOrderRequestJson": {
      "required": [
        "requested_current_rate_amount1",
        "requested_current_rate_amount2",
        "requested_current_valid_end_date",
        "current_credit_documentation",
        "temporary_requested_current_amount",
        "requested_temporary_valid_end_date",
        "temporary_credit_documentation"
      ],
      "properties": {
        "requested_current_rate_amount1": {
          "type": "string",
          "example": "String"
        },
        "temporary_credit_documentation": {
          "type": "string",
          "example": "String"
        },
        "requested_current_valid_end_date": {
          "type": "string",
          "example": "String"
        },
        "temporary_requested_current_amount": {
          "type": "string",
          "example": "String"
        },
        "requested_current_rate_amount2": {
          "type": "string",
          "example": "String"
        },
        "requested_temporary_valid_end_date": {
          "type": "string",
          "example": "String"
        },
        "current_credit_documentation": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "CreateScopeJson": {
      "required": [
        "bank_id",
        "role_name"
      ],
      "properties": {
        "role_name": {
          "type": "string",
          "example": "CanGetEntitlementsForAnyUserAtOneBank"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        }
      }
    },
    "CreateViewJson": {
      "required": [
        "name",
        "description",
        "metadata_view",
        "is_public",
        "which_alias_to_use",
        "hide_metadata_if_alias_used",
        "allowed_actions"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "_test"
        },
        "description": {
          "type": "string",
          "example": "This view is for family"
        },
        "is_public": {
          "type": "boolean",
          "example": "true"
        },
        "hide_metadata_if_alias_used": {
          "type": "boolean",
          "example": "false"
        },
        "which_alias_to_use": {
          "type": "string",
          "example": "family"
        },
        "metadata_view": {
          "type": "string",
          "example": "owner"
        },
        "allowed_actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateAccountJSON": {
      "required": [
        "id",
        "label",
        "bank_id"
      ],
      "properties": {
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "label": {
          "type": "string",
          "example": "label"
        },
        "id": {
          "type": "string",
          "example": "123123"
        }
      }
    },
    "ViewIdsJson": {
      "required": [
        "views"
      ],
      "properties": {
        "views": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddCustomerMessageJson": {
      "required": [
        "message",
        "from_department",
        "from_person"
      ],
      "properties": {
        "from_person": {
          "type": "string",
          "example": "String"
        },
        "from_department": {
          "type": "string",
          "example": "String"
        },
        "message": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "PostKycMediaJSON": {
      "required": [
        "customer_number",
        "type",
        "url",
        "date",
        "relates_to_kyc_document_id",
        "relates_to_kyc_check_id"
      ],
      "properties": {
        "url": {
          "type": "string",
          "example": "http://www.example.com/id-docs/123/image.png"
        },
        "customer_number": {
          "type": "string",
          "example": "1239879"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "relates_to_kyc_document_id": {
          "type": "string",
          "example": "123"
        },
        "relates_to_kyc_check_id": {
          "type": "string",
          "example": "123"
        },
        "type": {
          "type": "string",
          "example": "image"
        }
      }
    },
    "PostKycStatusJSON": {
      "required": [
        "customer_number",
        "ok",
        "date"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "ok": {
          "type": "boolean",
          "example": "true"
        },
        "customer_number": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "License": {
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "String"
        },
        "id": {
          "type": "string",
          "example": "id"
        }
      }
    },
    "Routing": {
      "required": [
        "scheme",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "123abc"
        },
        "scheme": {
          "type": "string",
          "example": "OBP"
        }
      }
    },
    "BranchId": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "AmountOfMoney": {
      "required": [
        "currency",
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "string",
          "example": "100"
        },
        "currency": {
          "type": "string",
          "example": "EUR"
        }
      }
    },
    "AccountRouting": {
      "required": [
        "scheme",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "123456"
        },
        "scheme": {
          "type": "string",
          "example": "accountNumber"
        }
      }
    },
    "CoreAccount": {
      "required": [
        "id",
        "label",
        "bankId",
        "accountType",
        "accountRoutings"
      ],
      "properties": {
        "label": {
          "type": "string",
          "example": " work"
        },
        "id": {
          "type": "string",
          "example": "123"
        },
        "accountType": {
          "type": "string",
          "example": "330"
        },
        "accountRoutings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRouting"
          }
        },
        "bankId": {
          "type": "string",
          "example": "123123"
        }
      }
    },
    "AccountHeld": {
      "required": [
        "id",
        "bankId",
        "number",
        "accountRoutings"
      ],
      "properties": {
        "accountRoutings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRouting"
          }
        },
        "number": {
          "type": "string",
          "example": "String"
        },
        "bankId": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        }
      }
    },
    "TransactionTypeId": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "BankId": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "gh.uk.9j"
        }
      }
    },
    "TransactionRequestId": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "CounterpartyId": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "AccountId": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "ViewId": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "owner"
        }
      }
    },
    "TransactionType": {
      "required": [
        "id",
        "bankId",
        "shortCode",
        "summary",
        "description",
        "charge"
      ],
      "properties": {
        "shortCode": {
          "type": "string",
          "example": "80080"
        },
        "description": {
          "type": "string",
          "example": "This is the sandbox mode, charging litter money."
        },
        "id": {
          "$ref": "#/definitions/TransactionTypeId"
        },
        "charge": {
          "$ref": "#/definitions/AmountOfMoney"
        },
        "bankId": {
          "$ref": "#/definitions/BankId"
        },
        "summary": {
          "type": "string",
          "example": "SANSANDBOX_TAN"
        }
      }
    },
    "TransactionRequestCharge": {
      "required": [
        "summary",
        "value"
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/AmountOfMoney"
        },
        "summary": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestChallenge": {
      "required": [
        "id",
        "allowed_attempts",
        "challenge_type"
      ],
      "properties": {
        "challenge_type": {
          "type": "string",
          "example": "String"
        },
        "allowed_attempts": {
          "type": "integer",
          "format": "int32",
          "example": "4"
        },
        "id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestAccount": {
      "required": [
        "bank_id",
        "account_id"
      ],
      "properties": {
        "account_id": {
          "type": "string",
          "example": "String"
        },
        "bank_id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestCounterpartyId": {
      "required": [
        "counterparty_id"
      ],
      "properties": {
        "counterparty_id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestIban": {
      "required": [
        "iban"
      ],
      "properties": {
        "iban": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestBody": {
      "required": [
        "to",
        "value",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "String"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoney"
        },
        "to": {
          "$ref": "#/definitions/TransactionRequestAccount"
        }
      }
    },
    "FromAccountTransfer": {
      "required": [
        "mobile_phone_number",
        "nickname"
      ],
      "properties": {
        "nickname": {
          "type": "string",
          "example": "String"
        },
        "mobile_phone_number": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ToAccountTransferToPhone": {
      "required": [
        "mobile_phone_number"
      ],
      "properties": {
        "mobile_phone_number": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ToAccountTransferToAtmKycDocument": {
      "required": [
        "type",
        "number"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "String"
        },
        "type": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ToAccountTransferToAtm": {
      "required": [
        "legal_name",
        "date_of_birth",
        "mobile_phone_number",
        "kyc_document"
      ],
      "properties": {
        "kyc_document": {
          "$ref": "#/definitions/ToAccountTransferToAtmKycDocument"
        },
        "mobile_phone_number": {
          "type": "string",
          "example": "String"
        },
        "date_of_birth": {
          "type": "string",
          "example": "20181230"
        },
        "legal_name": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ToAccountTransferToAccountAccount": {
      "required": [
        "number",
        "iban"
      ],
      "properties": {
        "iban": {
          "type": "string",
          "example": "String"
        },
        "number": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ToAccountTransferToAccount": {
      "required": [
        "name",
        "bank_code",
        "branch_number",
        "account"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/ToAccountTransferToAccountAccount"
        },
        "branch_number": {
          "type": "string",
          "example": "String"
        },
        "bank_code": {
          "type": "string",
          "example": "String"
        },
        "name": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "AmountOfMoneyJsonV121": {
      "required": [
        "currency",
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "string",
          "example": "10"
        },
        "currency": {
          "type": "string",
          "example": "EUR"
        }
      }
    },
    "TransactionRequestTransferToPhone": {
      "required": [
        "value",
        "description",
        "message",
        "from",
        "to"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "String"
        },
        "to": {
          "$ref": "#/definitions/ToAccountTransferToPhone"
        },
        "from": {
          "$ref": "#/definitions/FromAccountTransfer"
        },
        "message": {
          "type": "string",
          "example": "String"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        }
      }
    },
    "TransactionRequestTransferToAtm": {
      "required": [
        "value",
        "description",
        "message",
        "from",
        "to"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "String"
        },
        "to": {
          "$ref": "#/definitions/ToAccountTransferToAtm"
        },
        "from": {
          "$ref": "#/definitions/FromAccountTransfer"
        },
        "message": {
          "type": "string",
          "example": "String"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        }
      }
    },
    "TransactionRequestTransferToAccount": {
      "required": [
        "value",
        "description",
        "transfer_type",
        "future_date",
        "to"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "String"
        },
        "future_date": {
          "type": "string",
          "example": "20181230"
        },
        "to": {
          "$ref": "#/definitions/ToAccountTransferToAccount"
        },
        "transfer_type": {
          "type": "string",
          "example": "String"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        }
      }
    },
    "TransactionRequestBodyAllTypes": {
      "required": [
        "value",
        "description"
      ],
      "properties": {
        "to_transfer_to_phone": {
          "$ref": "#/definitions/TransactionRequestTransferToPhone"
        },
        "description": {
          "type": "string",
          "example": "String"
        },
        "to_transfer_to_atm": {
          "$ref": "#/definitions/TransactionRequestTransferToAtm"
        },
        "to_counterparty": {
          "$ref": "#/definitions/TransactionRequestCounterpartyId"
        },
        "to_sepa": {
          "$ref": "#/definitions/TransactionRequestIban"
        },
        "to_transfer_to_account": {
          "$ref": "#/definitions/TransactionRequestTransferToAccount"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoney"
        },
        "to_sandbox_tan": {
          "$ref": "#/definitions/TransactionRequestAccount"
        }
      }
    },
    "TransactionRequest": {
      "required": [
        "id",
        "type",
        "from",
        "body",
        "transaction_ids",
        "status",
        "start_date",
        "end_date",
        "challenge",
        "charge",
        "charge_policy",
        "counterparty_id",
        "name",
        "this_bank_id",
        "this_account_id",
        "this_view_id",
        "other_account_routing_scheme",
        "other_account_routing_address",
        "other_bank_routing_scheme",
        "other_bank_routing_address",
        "is_beneficiary"
      ],
      "properties": {
        "other_account_routing_address": {
          "type": "string",
          "example": "String"
        },
        "other_account_routing_scheme": {
          "type": "string",
          "example": "String"
        },
        "body": {
          "$ref": "#/definitions/TransactionRequestBodyAllTypes"
        },
        "challenge": {
          "$ref": "#/definitions/TransactionRequestChallenge"
        },
        "name": {
          "type": "string",
          "example": "String"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "is_beneficiary": {
          "type": "boolean",
          "example": "true"
        },
        "other_bank_routing_scheme": {
          "type": "string",
          "example": "String"
        },
        "id": {
          "$ref": "#/definitions/TransactionRequestId"
        },
        "this_account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "status": {
          "type": "string",
          "example": "String"
        },
        "charge_policy": {
          "type": "string",
          "example": "String"
        },
        "from": {
          "$ref": "#/definitions/TransactionRequestAccount"
        },
        "this_view_id": {
          "$ref": "#/definitions/ViewId"
        },
        "charge": {
          "$ref": "#/definitions/TransactionRequestCharge"
        },
        "other_bank_routing_address": {
          "type": "string",
          "example": "String"
        },
        "this_bank_id": {
          "$ref": "#/definitions/BankId"
        },
        "type": {
          "type": "string",
          "example": "String"
        },
        "counterparty_id": {
          "$ref": "#/definitions/CounterpartyId"
        },
        "transaction_ids": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "MessageDocJson": {
      "required": [
        "process",
        "message_format",
        "description",
        "example_outbound_message",
        "example_inbound_message"
      ],
      "properties": {
        "outboundAvroSchema": {
          "type": "string",
          "example": "This is a json String."
        },
        "example_inbound_message": {
          "type": "string",
          "example": "This is a json String."
        },
        "inboundAvroSchema": {
          "type": "string",
          "example": "This is a json String."
        },
        "description": {
          "type": "string",
          "example": "get Banks"
        },
        "process": {
          "type": "string",
          "example": "getBanks"
        },
        "message_format": {
          "type": "string",
          "example": "KafkaV2017"
        },
        "example_outbound_message": {
          "type": "string",
          "example": "This is a json String."
        }
      }
    },
    "MessageDocsJson": {
      "required": [
        "messageDocs"
      ],
      "properties": {
        "messageDocs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageDocJson"
          }
        }
      }
    },
    "MakePaymentJson": {
      "required": [
        "bank_id",
        "account_id",
        "amount"
      ],
      "properties": {
        "amount": {
          "type": "string",
          "example": "10"
        },
        "account_id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        }
      }
    },
    "TransactionIdJson": {
      "required": [
        "transaction_id"
      ],
      "properties": {
        "transaction_id": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "HostedBy": {
      "required": [
        "organisation",
        "email",
        "phone",
        "organisation_website"
      ],
      "properties": {
        "organisation_website": {
          "type": "string",
          "example": "String"
        },
        "phone": {
          "type": "string",
          "example": "String"
        },
        "email": {
          "type": "string",
          "example": "String"
        },
        "organisation": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "Akka": {
      "properties": {
        "remote_data_secret_matched": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "APIInfoJSON": {
      "required": [
        "version",
        "version_status",
        "git_commit",
        "connector",
        "hosted_by",
        "akka"
      ],
      "properties": {
        "akka": {
          "$ref": "#/definitions/Akka"
        },
        "version_status": {
          "type": "string",
          "example": "String"
        },
        "version": {
          "type": "string",
          "example": "String"
        },
        "connector": {
          "type": "string",
          "example": "String"
        },
        "hosted_by": {
          "$ref": "#/definitions/HostedBy"
        },
        "git_commit": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ErrorMessage": {
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "AccountRoutingJsonV121": {
      "required": [
        "scheme",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "4930396"
        },
        "scheme": {
          "type": "string",
          "example": "AccountNumber"
        }
      }
    },
    "AccountRuleJsonV300": {
      "required": [
        "scheme",
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "10"
        },
        "scheme": {
          "type": "string",
          "example": "OVERDRAFT"
        }
      }
    },
    "UserJSONV121": {
      "required": [
        "id",
        "provider",
        "display_name"
      ],
      "properties": {
        "display_name": {
          "type": "string",
          "example": "OBP"
        },
        "provider": {
          "type": "string",
          "example": "OBP"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        }
      }
    },
    "ViewJSONV121": {
      "required": [
        "id",
        "short_name",
        "description",
        "is_public",
        "alias",
        "hide_metadata_if_alias_used",
        "can_add_comment",
        "can_add_corporate_location",
        "can_add_image",
        "can_add_image_url",
        "can_add_more_info",
        "can_add_open_corporates_url",
        "can_add_physical_location",
        "can_add_private_alias",
        "can_add_public_alias",
        "can_add_tag",
        "can_add_url",
        "can_add_where_tag",
        "can_delete_comment",
        "can_delete_corporate_location",
        "can_delete_image",
        "can_delete_physical_location",
        "can_delete_tag",
        "can_delete_where_tag",
        "can_edit_owner_comment",
        "can_see_bank_account_balance",
        "can_see_bank_account_bank_name",
        "can_see_bank_account_currency",
        "can_see_bank_account_iban",
        "can_see_bank_account_label",
        "can_see_bank_account_national_identifier",
        "can_see_bank_account_number",
        "can_see_bank_account_owners",
        "can_see_bank_account_swift_bic",
        "can_see_bank_account_type",
        "can_see_comments",
        "can_see_corporate_location",
        "can_see_image_url",
        "can_see_images",
        "can_see_more_info",
        "can_see_open_corporates_url",
        "can_see_other_account_bank_name",
        "can_see_other_account_iban",
        "can_see_other_account_kind",
        "can_see_other_account_metadata",
        "can_see_other_account_national_identifier",
        "can_see_other_account_number",
        "can_see_other_account_swift_bic",
        "can_see_owner_comment",
        "can_see_physical_location",
        "can_see_private_alias",
        "can_see_public_alias",
        "can_see_tags",
        "can_see_transaction_amount",
        "can_see_transaction_balance",
        "can_see_transaction_currency",
        "can_see_transaction_description",
        "can_see_transaction_finish_date",
        "can_see_transaction_metadata",
        "can_see_transaction_other_bank_account",
        "can_see_transaction_start_date",
        "can_see_transaction_this_bank_account",
        "can_see_transaction_type",
        "can_see_url",
        "can_see_where_tag"
      ],
      "properties": {
        "can_see_transaction_start_date": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_this_bank_account": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_owners": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_private_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_edit_owner_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_national_identifier": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_public_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_owner_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_iban": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_number": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_bank_name": {
          "type": "boolean",
          "example": "true"
        },
        "description": {
          "type": "string",
          "example": "description"
        },
        "can_see_transaction_other_bank_account": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_comments": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_bank_name": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_more_info": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_number": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_swift_bic": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_open_corporates_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_kind": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_label": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_currency": {
          "type": "boolean",
          "example": "true"
        },
        "is_public": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_finish_date": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_images": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_currency": {
          "type": "boolean",
          "example": "true"
        },
        "hide_metadata_if_alias_used": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "alias": {
          "type": "string",
          "example": "None"
        },
        "can_add_image_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_image_url": {
          "type": "boolean",
          "example": "true"
        },
        "id": {
          "type": "string",
          "example": "123"
        },
        "can_see_bank_account_national_identifier": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_tags": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_open_corporates_url": {
          "type": "boolean",
          "example": "true"
        },
        "short_name": {
          "type": "string",
          "example": "short_name"
        },
        "can_delete_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_more_info": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_metadata": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_private_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_public_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_swift_bic": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_image": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_type": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_iban": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_image": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_balance": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_balance": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_amount": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_metadata": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_type": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_description": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "CreateViewJsonV121": {
      "required": [
        "name",
        "description",
        "is_public",
        "which_alias_to_use",
        "hide_metadata_if_alias_used",
        "allowed_actions"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "_test"
        },
        "description": {
          "type": "string",
          "example": "This view is for family"
        },
        "is_public": {
          "type": "boolean",
          "example": "true"
        },
        "hide_metadata_if_alias_used": {
          "type": "boolean",
          "example": "false"
        },
        "which_alias_to_use": {
          "type": "string",
          "example": "family"
        },
        "allowed_actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateViewJsonV121": {
      "required": [
        "description",
        "is_public",
        "which_alias_to_use",
        "hide_metadata_if_alias_used",
        "allowed_actions"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "This view is for family"
        },
        "is_public": {
          "type": "boolean",
          "example": "true"
        },
        "hide_metadata_if_alias_used": {
          "type": "boolean",
          "example": "false"
        },
        "which_alias_to_use": {
          "type": "string",
          "example": "family"
        },
        "allowed_actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ViewsJSONV121": {
      "required": [
        "views"
      ],
      "properties": {
        "views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewJSONV121"
          }
        }
      }
    },
    "AccountJSON": {
      "required": [
        "id",
        "label",
        "views_available",
        "bank_id"
      ],
      "properties": {
        "bank_id": {
          "type": "string",
          "example": "gh.uk.db"
        },
        "views_available": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewJSONV121"
          }
        },
        "label": {
          "type": "string",
          "example": "OBP"
        },
        "id": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "AccountsJSON": {
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountJSON"
          }
        }
      }
    },
    "BankRoutingJsonV121": {
      "required": [
        "scheme",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "scheme": {
          "type": "string",
          "example": "Bank_ID"
        }
      }
    },
    "BankJSON": {
      "required": [
        "id",
        "short_name",
        "full_name",
        "logo",
        "website",
        "bank_routing"
      ],
      "properties": {
        "website": {
          "type": "string",
          "example": "www.openbankproject.com"
        },
        "full_name": {
          "type": "string",
          "example": "full_name"
        },
        "logo": {
          "type": "string",
          "example": "logo"
        },
        "id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "short_name": {
          "type": "string",
          "example": "short_name "
        },
        "bank_routing": {
          "$ref": "#/definitions/BankRoutingJsonV121"
        }
      }
    },
    "BanksJSON": {
      "required": [
        "banks"
      ],
      "properties": {
        "banks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankJSON"
          }
        }
      }
    },
    "AccountHolderJSON": {
      "required": [
        "name",
        "is_alias"
      ],
      "properties": {
        "is_alias": {
          "type": "boolean",
          "example": "true"
        },
        "name": {
          "type": "string",
          "example": "OBP"
        }
      }
    },
    "MinimalBankJSON": {
      "required": [
        "national_identifier",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "OBP"
        },
        "national_identifier": {
          "type": "string",
          "example": "OBP"
        }
      }
    },
    "ModeratedAccountJSON": {
      "required": [
        "id",
        "label",
        "number",
        "owners",
        "type",
        "balance",
        "IBAN",
        "swift_bic",
        "views_available",
        "bank_id",
        "account_routing"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "123"
        },
        "account_routing": {
          "$ref": "#/definitions/AccountRoutingJsonV121"
        },
        "views_available": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewJSONV121"
          }
        },
        "IBAN": {
          "type": "string",
          "example": "DE89 3704 0044 0532 0130 00"
        },
        "label": {
          "type": "string",
          "example": "NoneLabel"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserJSONV121"
          }
        },
        "swift_bic": {
          "type": "string",
          "example": "OKOYFIHH"
        },
        "balance": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "type": {
          "type": "string",
          "example": "OBP"
        }
      }
    },
    "ThisAccountJSON": {
      "required": [
        "id",
        "holders",
        "number",
        "kind",
        "IBAN",
        "swift_bic",
        "bank"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "123"
        },
        "IBAN": {
          "type": "string",
          "example": "UK1234AD"
        },
        "swift_bic": {
          "type": "string",
          "example": "UK1234AD"
        },
        "bank": {
          "$ref": "#/definitions/MinimalBankJSON"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "holders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountHolderJSON"
          }
        },
        "kind": {
          "type": "string",
          "example": "AC"
        }
      }
    },
    "LocationJSONV121": {
      "required": [
        "latitude",
        "longitude",
        "date",
        "user"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/UserJSONV121"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "example": "1.231"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "example": "1.231"
        }
      }
    },
    "OtherAccountMetadataJSON": {
      "required": [
        "public_alias",
        "private_alias",
        "more_info",
        "URL",
        "image_URL",
        "open_corporates_URL",
        "corporate_location",
        "physical_location"
      ],
      "properties": {
        "public_alias": {
          "type": "string",
          "example": "NONE"
        },
        "image_URL": {
          "type": "string",
          "example": "www.openbankproject.com"
        },
        "physical_location": {
          "$ref": "#/definitions/LocationJSONV121"
        },
        "private_alias": {
          "type": "string",
          "example": "NONE"
        },
        "URL": {
          "type": "string",
          "example": "www.openbankproject.com"
        },
        "more_info": {
          "type": "string",
          "example": "www.openbankproject.com"
        },
        "corporate_location": {
          "$ref": "#/definitions/LocationJSONV121"
        },
        "open_corporates_URL": {
          "type": "string",
          "example": "www.openbankproject.com"
        }
      }
    },
    "OtherAccountJSON": {
      "required": [
        "id",
        "holder",
        "number",
        "kind",
        "IBAN",
        "swift_bic",
        "bank",
        "metadata"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "123"
        },
        "IBAN": {
          "type": "string",
          "example": "UK234DB"
        },
        "swift_bic": {
          "type": "string",
          "example": "UK12321DB"
        },
        "holder": {
          "$ref": "#/definitions/AccountHolderJSON"
        },
        "bank": {
          "$ref": "#/definitions/MinimalBankJSON"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "metadata": {
          "$ref": "#/definitions/OtherAccountMetadataJSON"
        },
        "kind": {
          "type": "string",
          "example": "3456"
        }
      }
    },
    "TransactionDetailsJSON": {
      "required": [
        "type",
        "description",
        "posted",
        "completed",
        "new_balance",
        "value"
      ],
      "properties": {
        "new_balance": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "description": {
          "type": "string",
          "example": "this is for family"
        },
        "completed": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "type": {
          "type": "string",
          "example": "AC"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "posted": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "TransactionImageJSON": {
      "required": [
        "id",
        "label",
        "URL",
        "date",
        "user"
      ],
      "properties": {
        "URL": {
          "type": "string",
          "example": "www.openbankproject.com"
        },
        "label": {
          "type": "string",
          "example": "NONE"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "user": {
          "$ref": "#/definitions/UserJSONV121"
        }
      }
    },
    "TransactionImagesJSON": {
      "required": [
        "images"
      ],
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionImageJSON"
          }
        }
      }
    },
    "TransactionCommentJSON": {
      "required": [
        "id",
        "value",
        "date",
        "user"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/UserJSONV121"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "value": {
          "type": "string",
          "example": "OBP"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        }
      }
    },
    "TransactionTagJSON": {
      "required": [
        "id",
        "value",
        "date",
        "user"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/UserJSONV121"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "value": {
          "type": "string",
          "example": "OBP"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        }
      }
    },
    "TransactionTagsJSON": {
      "required": [
        "tags"
      ],
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionTagJSON"
          }
        }
      }
    },
    "TransactionMetadataJSON": {
      "required": [
        "narrative",
        "comments",
        "tags",
        "images",
        "where"
      ],
      "properties": {
        "narrative": {
          "type": "string",
          "example": "NONE"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionTagJSON"
          }
        },
        "where": {
          "$ref": "#/definitions/LocationJSONV121"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionImageJSON"
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionCommentJSON"
          }
        }
      }
    },
    "TransactionJSON": {
      "required": [
        "id",
        "this_account",
        "other_account",
        "details",
        "metadata"
      ],
      "properties": {
        "this_account": {
          "$ref": "#/definitions/ThisAccountJSON"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "details": {
          "$ref": "#/definitions/TransactionDetailsJSON"
        },
        "metadata": {
          "$ref": "#/definitions/TransactionMetadataJSON"
        },
        "other_account": {
          "$ref": "#/definitions/OtherAccountJSON"
        }
      }
    },
    "TransactionsJSON": {
      "required": [
        "transactions"
      ],
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionJSON"
          }
        }
      }
    },
    "SuccessMessage": {
      "required": [
        "success"
      ],
      "properties": {
        "success": {
          "type": "string",
          "example": "Success"
        }
      }
    },
    "OtherAccountsJSON": {
      "required": [
        "other_accounts"
      ],
      "properties": {
        "other_accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OtherAccountJSON"
          }
        }
      }
    },
    "TransactionCommentsJSON": {
      "required": [
        "comments"
      ],
      "properties": {
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionCommentJSON"
          }
        }
      }
    },
    "TransactionWhereJSON": {
      "required": [
        "where"
      ],
      "properties": {
        "where": {
          "$ref": "#/definitions/LocationJSONV121"
        }
      }
    },
    "PermissionJSON": {
      "required": [
        "user",
        "views"
      ],
      "properties": {
        "views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewJSONV121"
          }
        },
        "user": {
          "$ref": "#/definitions/UserJSONV121"
        }
      }
    },
    "PermissionsJSON": {
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionJSON"
          }
        }
      }
    },
    "LocationPlainJSON": {
      "required": [
        "latitude",
        "longitude"
      ],
      "properties": {
        "longitude": {
          "type": "number",
          "format": "double",
          "example": "1.535"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "example": "1.532"
        }
      }
    },
    "PinResetJSON": {
      "required": [
        "requested_date",
        "reason_requested"
      ],
      "properties": {
        "reason_requested": {
          "type": "string",
          "example": "GOOD_SECURITY_PRACTICE"
        },
        "requested_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "ReplacementJSON": {
      "required": [
        "requested_date",
        "reason_requested"
      ],
      "properties": {
        "reason_requested": {
          "type": "string",
          "example": "RENEW"
        },
        "requested_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "PhysicalCardJSON": {
      "required": [
        "bank_id",
        "bank_card_number",
        "name_on_card",
        "issue_number",
        "serial_number",
        "valid_from_date",
        "expires_date",
        "enabled",
        "cancelled",
        "on_hot_list",
        "technology",
        "networks",
        "allows",
        "account",
        "replacement",
        "pin_reset",
        "collected",
        "posted"
      ],
      "properties": {
        "allows": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expires_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issue_number": {
          "type": "string",
          "example": "String"
        },
        "replacement": {
          "$ref": "#/definitions/ReplacementJSON"
        },
        "enabled": {
          "type": "boolean",
          "example": "true"
        },
        "collected": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "technology": {
          "type": "string",
          "example": "String"
        },
        "cancelled": {
          "type": "boolean",
          "example": "true"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "pin_reset": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PinResetJSON"
          }
        },
        "serial_number": {
          "type": "string",
          "example": "String"
        },
        "account": {
          "$ref": "#/definitions/AccountJSON"
        },
        "valid_from_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "bank_card_number": {
          "type": "string",
          "example": "String"
        },
        "name_on_card": {
          "type": "string",
          "example": "String"
        },
        "posted": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "on_hot_list": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "PhysicalCardsJSON": {
      "required": [
        "cards"
      ],
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhysicalCardJSON"
          }
        }
      }
    },
    "TransactionRequestBodyJson": {
      "required": [
        "to",
        "value",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "String"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoney"
        },
        "to": {
          "$ref": "#/definitions/TransactionRequestAccount"
        }
      }
    },
    "TransactionRequestJson": {
      "required": [
        "id",
        "type",
        "from",
        "details",
        "body",
        "transaction_ids",
        "status",
        "start_date",
        "end_date",
        "challenge",
        "charge",
        "charge_policy",
        "counterparty_id",
        "name",
        "this_bank_id",
        "this_account_id",
        "this_view_id",
        "other_account_routing_scheme",
        "other_account_routing_address",
        "other_bank_routing_scheme",
        "other_bank_routing_address",
        "is_beneficiary"
      ],
      "properties": {
        "other_account_routing_address": {
          "type": "string",
          "example": "String"
        },
        "other_account_routing_scheme": {
          "type": "string",
          "example": "String"
        },
        "body": {
          "$ref": "#/definitions/TransactionRequestBodyJson"
        },
        "challenge": {
          "$ref": "#/definitions/TransactionRequestChallenge"
        },
        "name": {
          "type": "string",
          "example": "String"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "is_beneficiary": {
          "type": "boolean",
          "example": "true"
        },
        "other_bank_routing_scheme": {
          "type": "string",
          "example": "String"
        },
        "id": {
          "$ref": "#/definitions/TransactionRequestId"
        },
        "this_account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "status": {
          "type": "string",
          "example": "String"
        },
        "charge_policy": {
          "type": "string",
          "example": "String"
        },
        "from": {
          "$ref": "#/definitions/TransactionRequestAccount"
        },
        "this_view_id": {
          "$ref": "#/definitions/ViewId"
        },
        "details": {
          "$ref": "#/definitions/TransactionRequestBodyJson"
        },
        "charge": {
          "$ref": "#/definitions/TransactionRequestCharge"
        },
        "other_bank_routing_address": {
          "type": "string",
          "example": "String"
        },
        "this_bank_id": {
          "$ref": "#/definitions/BankId"
        },
        "type": {
          "type": "string",
          "example": "String"
        },
        "counterparty_id": {
          "$ref": "#/definitions/CounterpartyId"
        },
        "transaction_ids": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "CustomerFaceImageJson": {
      "required": [
        "url",
        "date"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "url": {
          "type": "string",
          "example": "www.openbankproject"
        }
      }
    },
    "LocationJsonV140": {
      "required": [
        "latitude",
        "longitude"
      ],
      "properties": {
        "longitude": {
          "type": "number",
          "format": "double",
          "example": "11.45"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "example": "11.45"
        }
      }
    },
    "TransactionRequestChargeJsonV140": {
      "required": [
        "summary",
        "value"
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "summary": {
          "type": "string",
          "example": "The bank fixed charge"
        }
      }
    },
    "TransactionRequestTypeJsonV140": {
      "required": [
        "value",
        "charge"
      ],
      "properties": {
        "charge": {
          "$ref": "#/definitions/TransactionRequestChargeJsonV140"
        },
        "value": {
          "type": "string",
          "example": "10"
        }
      }
    },
    "TransactionRequestTypesJsonV140": {
      "required": [
        "transaction_request_types"
      ],
      "properties": {
        "transaction_request_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionRequestTypeJsonV140"
          }
        }
      }
    },
    "TransactionRequestAccountJsonV140": {
      "required": [
        "bank_id",
        "account_id"
      ],
      "properties": {
        "account_id": {
          "type": "string",
          "example": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        }
      }
    },
    "ChallengeJsonV140": {
      "required": [
        "id",
        "allowed_attempts",
        "challenge_type"
      ],
      "properties": {
        "challenge_type": {
          "type": "string",
          "example": "SANDBOX_TAN"
        },
        "allowed_attempts": {
          "type": "integer",
          "format": "int32",
          "example": "3"
        },
        "id": {
          "type": "string",
          "example": "be1a183d-b301-4b83-b855-5eeffdd3526f"
        }
      }
    },
    "DriveUpStringJson": {
      "required": [
        "hours"
      ],
      "properties": {
        "hours": {
          "type": "string",
          "example": "5"
        }
      }
    },
    "LicenseJsonV140": {
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "TESOBE"
        },
        "id": {
          "type": "string",
          "example": "5"
        }
      }
    },
    "MetaJsonV140": {
      "required": [
        "license"
      ],
      "properties": {
        "license": {
          "$ref": "#/definitions/LicenseJsonV140"
        }
      }
    },
    "LobbyStringJson": {
      "required": [
        "hours"
      ],
      "properties": {
        "hours": {
          "type": "string",
          "example": "5"
        }
      }
    },
    "AddressJsonV140": {
      "required": [
        "line_1",
        "line_2",
        "line_3",
        "city",
        "state",
        "postcode",
        "country"
      ],
      "properties": {
        "city": {
          "type": "string",
          "example": "Berlin"
        },
        "line_2": {
          "type": "string",
          "example": "Wedding"
        },
        "state": {
          "type": "string",
          "example": "Berlin Brandenburg"
        },
        "postcode": {
          "type": "string",
          "example": "13359"
        },
        "country": {
          "type": "string",
          "example": "DE"
        },
        "line_3": {
          "type": "string",
          "example": ""
        },
        "line_1": {
          "type": "string",
          "example": "Osloer Straße 16/17"
        }
      }
    },
    "PostCustomerJson": {
      "required": [
        "customer_number",
        "legal_name",
        "mobile_phone_number",
        "email",
        "face_image",
        "date_of_birth",
        "relationship_status",
        "dependants",
        "dob_of_dependants",
        "highest_education_attained",
        "employment_status",
        "kyc_status",
        "last_ok_date"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "String"
        },
        "mobile_phone_number": {
          "type": "string",
          "example": "String"
        },
        "customer_number": {
          "type": "string",
          "example": "String"
        },
        "highest_education_attained": {
          "type": "string",
          "example": "String"
        },
        "dob_of_dependants": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date"
          }
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "last_ok_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "employment_status": {
          "type": "string",
          "example": "String"
        },
        "legal_name": {
          "type": "string",
          "example": "String"
        },
        "face_image": {
          "$ref": "#/definitions/CustomerFaceImageJson"
        },
        "dependants": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "relationship_status": {
          "type": "string",
          "example": "String"
        },
        "kyc_status": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "CustomerJsonV140": {
      "required": [
        "customer_id",
        "customer_number",
        "legal_name",
        "mobile_phone_number",
        "email",
        "face_image",
        "date_of_birth",
        "relationship_status",
        "dependants",
        "dob_of_dependants",
        "highest_education_attained",
        "employment_status",
        "kyc_status",
        "last_ok_date"
      ],
      "properties": {
        "customer_id": {
          "type": "string",
          "example": "String"
        },
        "email": {
          "type": "string",
          "example": "String"
        },
        "mobile_phone_number": {
          "type": "string",
          "example": "String"
        },
        "customer_number": {
          "type": "string",
          "example": "String"
        },
        "highest_education_attained": {
          "type": "string",
          "example": "String"
        },
        "dob_of_dependants": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date"
          }
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "last_ok_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "employment_status": {
          "type": "string",
          "example": "String"
        },
        "legal_name": {
          "type": "string",
          "example": "String"
        },
        "face_image": {
          "$ref": "#/definitions/CustomerFaceImageJson"
        },
        "dependants": {
          "type": "integer",
          "format": "int32",
          "example": "10"
        },
        "relationship_status": {
          "type": "string",
          "example": "String"
        },
        "kyc_status": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "CustomersJsonV140": {
      "required": [
        "customers"
      ],
      "properties": {
        "customers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerJsonV140"
          }
        }
      }
    },
    "CustomerMessageJson": {
      "required": [
        "id",
        "date",
        "message",
        "from_department",
        "from_person"
      ],
      "properties": {
        "from_person": {
          "type": "string",
          "example": "String"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "from_department": {
          "type": "string",
          "example": "String"
        },
        "message": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "CustomerMessagesJson": {
      "required": [
        "messages"
      ],
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerMessageJson"
          }
        }
      }
    },
    "BranchRoutingJsonV141": {
      "required": [
        "scheme",
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "678"
        },
        "scheme": {
          "type": "string",
          "example": "BranchNumber"
        }
      }
    },
    "BranchJson": {
      "required": [
        "id",
        "name",
        "address",
        "location",
        "lobby",
        "drive_up",
        "meta",
        "branch_routing"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "String"
        },
        "location": {
          "$ref": "#/definitions/LocationJsonV140"
        },
        "branch_routing": {
          "$ref": "#/definitions/BranchRoutingJsonV141"
        },
        "drive_up": {
          "$ref": "#/definitions/DriveUpStringJson"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "lobby": {
          "$ref": "#/definitions/LobbyStringJson"
        },
        "address": {
          "$ref": "#/definitions/AddressJsonV140"
        }
      }
    },
    "BranchesJson": {
      "required": [
        "branches"
      ],
      "properties": {
        "branches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BranchJson"
          }
        }
      }
    },
    "Meta": {
      "required": [
        "license"
      ],
      "properties": {
        "license": {
          "$ref": "#/definitions/License"
        }
      }
    },
    "OpeningTimesV300": {
      "required": [
        "opening_time",
        "closing_time"
      ],
      "properties": {
        "closing_time": {
          "type": "string",
          "example": "18:00"
        },
        "opening_time": {
          "type": "string",
          "example": "10:00"
        }
      }
    },
    "OpeningTimes": {
      "required": [
        "openingTime",
        "closingTime"
      ],
      "properties": {
        "closingTime": {
          "type": "string",
          "example": "18:00"
        },
        "openingTime": {
          "type": "string",
          "example": "10:00"
        }
      }
    },
    "Address": {
      "required": [
        "line1",
        "line2",
        "line3",
        "city",
        "state",
        "postCode",
        "countryCode"
      ],
      "properties": {
        "city": {
          "type": "string",
          "example": "Berlin"
        },
        "postCode": {
          "type": "string",
          "example": "13359"
        },
        "state": {
          "type": "string",
          "example": "Brandenburg"
        },
        "line1": {
          "type": "string",
          "example": "No 1 the Road"
        },
        "county": {
          "type": "string",
          "example": "String"
        },
        "countryCode": {
          "type": "string",
          "example": "DE"
        },
        "line2": {
          "type": "string",
          "example": "The Place"
        },
        "line3": {
          "type": "string",
          "example": "The Hill"
        }
      }
    },
    "Lobby": {
      "required": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ],
      "properties": {
        "sunday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimes"
          }
        },
        "tuesday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimes"
          }
        },
        "wednesday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimes"
          }
        },
        "monday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimes"
          }
        },
        "friday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimes"
          }
        },
        "thursday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimes"
          }
        },
        "saturday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimes"
          }
        }
      }
    },
    "DriveUp": {
      "required": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ],
      "properties": {
        "sunday": {
          "$ref": "#/definitions/OpeningTimes"
        },
        "tuesday": {
          "$ref": "#/definitions/OpeningTimes"
        },
        "wednesday": {
          "$ref": "#/definitions/OpeningTimes"
        },
        "monday": {
          "$ref": "#/definitions/OpeningTimes"
        },
        "friday": {
          "$ref": "#/definitions/OpeningTimes"
        },
        "thursday": {
          "$ref": "#/definitions/OpeningTimes"
        },
        "saturday": {
          "$ref": "#/definitions/OpeningTimes"
        }
      }
    },
    "BasicResourceUser": {
      "required": [
        "userId",
        "provider",
        "username"
      ],
      "properties": {
        "username": {
          "type": "string",
          "example": " String"
        },
        "provider": {
          "type": "string",
          "example": " String"
        },
        "userId": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "Location": {
      "required": [
        "latitude",
        "longitude"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/BasicResourceUser"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "example": "10.0"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "example": "10.0"
        }
      }
    },
    "LobbyString": {
      "required": [
        "hours"
      ],
      "properties": {
        "hours": {
          "type": "string",
          "example": "String "
        }
      }
    },
    "DriveUpString": {
      "required": [
        "hours"
      ],
      "properties": {
        "hours": {
          "type": "string",
          "example": "String "
        }
      }
    },
    "Branch": {
      "required": [
        "branchId",
        "bankId",
        "name",
        "address",
        "location",
        "meta"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Branch by the Lake"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "phoneNumber": {
          "type": "string",
          "example": "+381631954907"
        },
        "driveUp": {
          "$ref": "#/definitions/DriveUp"
        },
        "isAccessible": {
          "type": "boolean",
          "example": "true"
        },
        "branchId": {
          "$ref": "#/definitions/BranchId"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "moreInfo": {
          "type": "string",
          "example": "short walk to the lake from here"
        },
        "lobbyString": {
          "$ref": "#/definitions/LobbyString"
        },
        "lobby": {
          "$ref": "#/definitions/Lobby"
        },
        "accessibleFeatures": {
          "type": "string",
          "example": "wheelchair, atm usuable by the visually impaired"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "bankId": {
          "$ref": "#/definitions/BankId"
        },
        "branchType": {
          "type": "string",
          "example": "Full service store"
        },
        "branchRouting": {
          "$ref": "#/definitions/Routing"
        },
        "driveUpString": {
          "$ref": "#/definitions/DriveUpString"
        }
      }
    },
    "LobbyJsonV330": {
      "required": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ],
      "properties": {
        "sunday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimesV300"
          }
        },
        "tuesday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimesV300"
          }
        },
        "wednesday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimesV300"
          }
        },
        "monday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimesV300"
          }
        },
        "friday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimesV300"
          }
        },
        "thursday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimesV300"
          }
        },
        "saturday": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpeningTimesV300"
          }
        }
      }
    },
    "DriveUpJsonV330": {
      "required": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ],
      "properties": {
        "sunday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "tuesday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "wednesday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "monday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "friday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "thursday": {
          "$ref": "#/definitions/OpeningTimesV300"
        },
        "saturday": {
          "$ref": "#/definitions/OpeningTimesV300"
        }
      }
    },
    "BranchesJsonV300": {
      "required": [
        "branches"
      ],
      "properties": {
        "branches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BranchJsonV300"
          }
        }
      }
    },
    "AtmJson": {
      "required": [
        "id",
        "name",
        "address",
        "location",
        "meta"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "String"
        },
        "location": {
          "$ref": "#/definitions/LocationJsonV140"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "address": {
          "$ref": "#/definitions/AddressJsonV140"
        }
      }
    },
    "AtmsJson": {
      "required": [
        "atms"
      ],
      "properties": {
        "atms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtmJson"
          }
        }
      }
    },
    "AddressJsonV300": {
      "required": [
        "line_1",
        "line_2",
        "line_3",
        "city",
        "county",
        "state",
        "postcode",
        "country_code"
      ],
      "properties": {
        "city": {
          "type": "string",
          "example": "Berlin"
        },
        "line_2": {
          "type": "string",
          "example": "The Place"
        },
        "state": {
          "type": "string",
          "example": "Brandenburg"
        },
        "postcode": {
          "type": "string",
          "example": "13359"
        },
        "county": {
          "type": "string",
          "example": ""
        },
        "country_code": {
          "type": "string",
          "example": "DE"
        },
        "line_3": {
          "type": "string",
          "example": "The Hill"
        },
        "line_1": {
          "type": "string",
          "example": "No 1 the Road"
        }
      }
    },
    "ProductJson": {
      "required": [
        "code",
        "name",
        "category",
        "family",
        "super_family",
        "more_info_url",
        "meta"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "String"
        },
        "more_info_url": {
          "type": "string",
          "example": "String"
        },
        "super_family": {
          "type": "string",
          "example": "String"
        },
        "code": {
          "type": "string",
          "example": "String"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "category": {
          "type": "string",
          "example": "String"
        },
        "family": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ProductsJson": {
      "required": [
        "products"
      ],
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductJson"
          }
        }
      }
    },
    "CrmEventJson": {
      "required": [
        "id",
        "bank_id",
        "customer_name",
        "customer_number",
        "category",
        "detail",
        "channel",
        "scheduled_date",
        "actual_date",
        "result"
      ],
      "properties": {
        "channel": {
          "type": "string",
          "example": "String"
        },
        "customer_name": {
          "type": "string",
          "example": "String"
        },
        "result": {
          "type": "string",
          "example": "String"
        },
        "customer_number": {
          "type": "string",
          "example": "String"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "scheduled_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "category": {
          "type": "string",
          "example": "String"
        },
        "detail": {
          "type": "string",
          "example": "String"
        },
        "actual_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "CrmEventsJson": {
      "required": [
        "crm_events"
      ],
      "properties": {
        "crm_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CrmEventJson"
          }
        }
      }
    },
    "ImplementedByJson": {
      "required": [
        "version",
        "function"
      ],
      "properties": {
        "function": {
          "type": "string",
          "example": "getBranches"
        },
        "version": {
          "type": "string",
          "example": "1_4_0"
        }
      }
    },
    "CanCreateCustomer": {
      "required": [
        "requiresBankId"
      ],
      "properties": {
        "requiresBankId": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "ResourceDocJson": {
      "required": [
        "operation_id",
        "implemented_by",
        "request_verb",
        "request_url",
        "summary",
        "description",
        "example_request_body",
        "success_response_body",
        "error_response_bodies",
        "is_core",
        "is_psd2",
        "is_obwg",
        "tags",
        "typed_request_body",
        "typed_success_response_body",
        "is_featured",
        "special_instructions"
      ],
      "properties": {
        "error_response_bodies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "request_verb": {
          "type": "string",
          "example": "String"
        },
        "request_url": {
          "type": "string",
          "example": "String"
        },
        "description": {
          "type": "string",
          "example": "String"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_core": {
          "type": "boolean",
          "example": "true"
        },
        "success_response_body": {
          "$ref": "#/definitions/SuccessMessage"
        },
        "example_request_body": {
          "$ref": "#/definitions/SuccessMessage"
        },
        "typed_success_response_body": {
          "type": "string",
          "example": "This is a json String."
        },
        "special_instructions": {
          "type": "string",
          "example": ""
        },
        "is_featured": {
          "type": "boolean",
          "example": "false"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CanCreateCustomer"
          }
        },
        "is_psd2": {
          "type": "boolean",
          "example": "true"
        },
        "operation_id": {
          "type": "string",
          "example": "String"
        },
        "implemented_by": {
          "$ref": "#/definitions/ImplementedByJson"
        },
        "is_obwg": {
          "type": "boolean",
          "example": "true"
        },
        "typed_request_body": {
          "type": "string",
          "example": "This is a json String."
        },
        "summary": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ResourceDocsJson": {
      "required": [
        "resource_docs"
      ],
      "properties": {
        "resource_docs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceDocJson"
          }
        }
      }
    },
    "TransactionRequestBodyJsonV140": {
      "required": [
        "to",
        "value",
        "description",
        "challenge_type"
      ],
      "properties": {
        "challenge_type": {
          "type": "string",
          "example": "String"
        },
        "description": {
          "type": "string",
          "example": "String"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "to": {
          "$ref": "#/definitions/TransactionRequestAccountJsonV140"
        }
      }
    },
    "TransactionRequestJsonV140": {
      "required": [
        "id",
        "type",
        "from",
        "body",
        "transaction_ids",
        "status",
        "start_date",
        "end_date",
        "challenge"
      ],
      "properties": {
        "body": {
          "$ref": "#/definitions/TransactionRequestBodyJsonV140"
        },
        "challenge": {
          "$ref": "#/definitions/ChallengeJsonV140"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "status": {
          "type": "string",
          "example": "String"
        },
        "from": {
          "$ref": "#/definitions/TransactionRequestAccountJsonV140"
        },
        "type": {
          "type": "string",
          "example": "String"
        },
        "transaction_ids": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "BasicViewJson": {
      "required": [
        "id",
        "short_name",
        "is_public"
      ],
      "properties": {
        "is_public": {
          "type": "boolean",
          "example": "true"
        },
        "short_name": {
          "type": "string",
          "example": "HHH"
        },
        "id": {
          "type": "string",
          "example": "1"
        }
      }
    },
    "BasicAccountJSON": {
      "required": [
        "id",
        "label",
        "bank_id",
        "views_available"
      ],
      "properties": {
        "views_available": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicViewJson"
          }
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "label": {
          "type": "string",
          "example": "NoneLabel"
        },
        "id": {
          "type": "string",
          "example": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0"
        }
      }
    },
    "CoreAccountJSON": {
      "required": [
        "id",
        "label",
        "bank_id",
        "_links"
      ],
      "properties": {
        "_links": {
          "type": "string",
          "example": "This is a json String."
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "label": {
          "type": "string",
          "example": "NoneLabel"
        },
        "id": {
          "type": "string",
          "example": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0"
        }
      }
    },
    "ModeratedCoreAccountJSON": {
      "required": [
        "id",
        "label",
        "number",
        "owners",
        "type",
        "balance",
        "IBAN",
        "swift_bic",
        "bank_id",
        "account_routing"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "123"
        },
        "account_routing": {
          "$ref": "#/definitions/AccountRoutingJsonV121"
        },
        "IBAN": {
          "type": "string",
          "example": "GR1301720530005053000582373"
        },
        "label": {
          "type": "string",
          "example": "NoneLabel"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserJSONV121"
          }
        },
        "swift_bic": {
          "type": "string",
          "example": "UKTF3049auf"
        },
        "balance": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "id": {
          "type": "string",
          "example": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0"
        },
        "type": {
          "type": "string",
          "example": "OBP"
        }
      }
    },
    "BasicAccountsJSON": {
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicAccountJSON"
          }
        }
      }
    },
    "CoreAccountsJSON": {
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoreAccountJSON"
          }
        }
      }
    },
    "KycDocumentJSON": {
      "required": [
        "bank_id",
        "customer_id",
        "id",
        "customer_number",
        "type",
        "number",
        "issue_date",
        "issue_place",
        "expiry_date"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "customer_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "customer_number": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "issue_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "bank_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "type": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "issue_place": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "expiry_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "KycDocumentsJSON": {
      "required": [
        "documents"
      ],
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycDocumentJSON"
          }
        }
      }
    },
    "KycMediaJSON": {
      "required": [
        "bank_id",
        "customer_id",
        "id",
        "customer_number",
        "type",
        "url",
        "date",
        "relates_to_kyc_document_id",
        "relates_to_kyc_check_id"
      ],
      "properties": {
        "customer_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "url": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "customer_number": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "bank_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "relates_to_kyc_document_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "relates_to_kyc_check_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "type": {
          "type": "string",
          "example": "PlaceholderString"
        }
      }
    },
    "KycMediasJSON": {
      "required": [
        "medias"
      ],
      "properties": {
        "medias": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycMediaJSON"
          }
        }
      }
    },
    "KycCheckJSON": {
      "required": [
        "bank_id",
        "customer_id",
        "id",
        "customer_number",
        "date",
        "how",
        "staff_user_id",
        "staff_name",
        "satisfied",
        "comments"
      ],
      "properties": {
        "customer_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "customer_number": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "bank_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "how": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "satisfied": {
          "type": "boolean",
          "example": "true"
        },
        "staff_user_id": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "staff_name": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "comments": {
          "type": "string",
          "example": "PlaceholderString"
        }
      }
    },
    "KycChecksJSON": {
      "required": [
        "checks"
      ],
      "properties": {
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycCheckJSON"
          }
        }
      }
    },
    "KycStatusJSON": {
      "required": [
        "customer_id",
        "customer_number",
        "ok",
        "date"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "ok": {
          "type": "boolean",
          "example": "true"
        },
        "customer_number": {
          "type": "string",
          "example": "PlaceholderString"
        },
        "customer_id": {
          "type": "string",
          "example": "PlaceholderString"
        }
      }
    },
    "KycStatusesJSON": {
      "required": [
        "statuses"
      ],
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KycStatusJSON"
          }
        }
      }
    },
    "SocialMediasJSON": {
      "required": [
        "checks"
      ],
      "properties": {
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialMediaJSON"
          }
        }
      }
    },
    "EntitlementJSON": {
      "required": [
        "entitlement_id",
        "role_name",
        "bank_id"
      ],
      "properties": {
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "role_name": {
          "type": "string",
          "example": "CanQueryOtherUser"
        },
        "entitlement_id": {
          "type": "string",
          "example": "6fb17583-1e49-4435-bb74-a14fe0996723"
        }
      }
    },
    "EntitlementJSONs": {
      "required": [
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntitlementJSON"
          }
        }
      }
    },
    "UserJsonV200": {
      "required": [
        "user_id",
        "email",
        "provider_id",
        "provider",
        "username",
        "entitlements"
      ],
      "properties": {
        "provider": {
          "type": "string",
          "example": "OBP"
        },
        "email": {
          "type": "string",
          "example": "robert.x.0.gh@example.com"
        },
        "username": {
          "type": "string",
          "example": "robert.x.0.gh"
        },
        "provider_id": {
          "type": "string",
          "example": "OBP"
        },
        "user_id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "entitlements": {
          "$ref": "#/definitions/EntitlementJSONs"
        }
      }
    },
    "EntitlementRequestJSON": {
      "required": [
        "entitlement_request_id",
        "user",
        "role_name",
        "bank_id",
        "created"
      ],
      "properties": {
        "entitlement_request_id": {
          "type": "string",
          "example": "6fb17583-1e49-4435-bb74-a14fe0996723"
        },
        "role_name": {
          "type": "string",
          "example": "CanQueryOtherUser"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "user": {
          "$ref": "#/definitions/UserJsonV200"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "EntitlementRequestsJSON": {
      "required": [
        "entitlement_requests"
      ],
      "properties": {
        "entitlement_requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntitlementRequestJSON"
          }
        }
      }
    },
    "CoreTransactionDetailsJSON": {
      "required": [
        "type",
        "description",
        "posted",
        "completed",
        "new_balance",
        "value"
      ],
      "properties": {
        "new_balance": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "description": {
          "type": "string",
          "example": "OBP"
        },
        "completed": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "type": {
          "type": "string",
          "example": "AC"
        },
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "posted": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "CoreAccountHolderJSON": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ZACK"
        }
      }
    },
    "CoreCounterpartyJSON": {
      "required": [
        "id",
        "holder",
        "number",
        "kind",
        "IBAN",
        "swift_bic",
        "bank"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "1234"
        },
        "IBAN": {
          "type": "string",
          "example": "UK12344DB"
        },
        "swift_bic": {
          "type": "string",
          "example": "UK12344DB"
        },
        "holder": {
          "$ref": "#/definitions/CoreAccountHolderJSON"
        },
        "bank": {
          "$ref": "#/definitions/MinimalBankJSON"
        },
        "id": {
          "type": "string",
          "example": "123"
        },
        "kind": {
          "type": "string",
          "example": "AV"
        }
      }
    },
    "CoreTransactionJSON": {
      "required": [
        "id",
        "account",
        "counterparty",
        "details"
      ],
      "properties": {
        "details": {
          "$ref": "#/definitions/CoreTransactionDetailsJSON"
        },
        "counterparty": {
          "$ref": "#/definitions/CoreCounterpartyJSON"
        },
        "account": {
          "$ref": "#/definitions/ThisAccountJSON"
        },
        "id": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "CoreTransactionsJSON": {
      "required": [
        "transactions"
      ],
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoreTransactionJSON"
          }
        }
      }
    },
    "TransactionRequestChargeJsonV200": {
      "required": [
        "summary",
        "value"
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "summary": {
          "type": "string",
          "example": "Rent the flat"
        }
      }
    },
    "TransactionRequestWithChargeJson": {
      "required": [
        "id",
        "type",
        "from",
        "details",
        "transaction_ids",
        "status",
        "start_date",
        "end_date",
        "challenge",
        "charge"
      ],
      "properties": {
        "challenge": {
          "$ref": "#/definitions/ChallengeJsonV140"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "id": {
          "type": "string",
          "example": "82f92531-9c63-4246-abfc-96c20ec46188"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "status": {
          "type": "string",
          "example": "COMPLETED"
        },
        "from": {
          "$ref": "#/definitions/TransactionRequestAccountJsonV140"
        },
        "details": {
          "$ref": "#/definitions/TransactionRequestBody"
        },
        "charge": {
          "$ref": "#/definitions/TransactionRequestChargeJsonV200"
        },
        "type": {
          "type": "string",
          "example": "SANDBOX_TAN"
        },
        "transaction_ids": {
          "type": "string",
          "example": "666666-9c63-4246-abfc-96c20ec46188"
        }
      }
    },
    "TransactionTypesJsonV200": {
      "required": [
        "transaction_types"
      ],
      "properties": {
        "transaction_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionTypeJsonV200"
          }
        }
      }
    },
    "LinkJson": {
      "required": [
        "href",
        "rel",
        "method"
      ],
      "properties": {
        "method": {
          "type": "string",
          "example": "String"
        },
        "rel": {
          "type": "string",
          "example": "String"
        },
        "href": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "LinksJson": {
      "required": [
        "_links"
      ],
      "properties": {
        "_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkJson"
          }
        }
      }
    },
    "ResultAndLinksJson": {
      "required": [
        "result",
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/LinksJson"
        },
        "result": {
          "type": "string",
          "example": "This is a json String."
        }
      }
    },
    "CreateUsersJson": {
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateUserJson"
          }
        }
      }
    },
    "MeetingKeysJson": {
      "required": [
        "session_id",
        "staff_token",
        "customer_token"
      ],
      "properties": {
        "customer_token": {
          "type": "string",
          "example": "String"
        },
        "staff_token": {
          "type": "string",
          "example": "String"
        },
        "session_id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "MeetingPresentJson": {
      "required": [
        "staff_user_id",
        "customer_user_id"
      ],
      "properties": {
        "customer_user_id": {
          "type": "string",
          "example": "String"
        },
        "staff_user_id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "MeetingJson": {
      "required": [
        "meeting_id",
        "provider_id",
        "purpose_id",
        "bank_id",
        "present",
        "keys",
        "when"
      ],
      "properties": {
        "present": {
          "$ref": "#/definitions/MeetingPresentJson"
        },
        "provider_id": {
          "type": "string",
          "example": "String"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "purpose_id": {
          "type": "string",
          "example": "String"
        },
        "when": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "meeting_id": {
          "type": "string",
          "example": "String"
        },
        "keys": {
          "$ref": "#/definitions/MeetingKeysJson"
        }
      }
    },
    "MeetingsJson": {
      "required": [
        "meetings"
      ],
      "properties": {
        "meetings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MeetingJson"
          }
        }
      }
    },
    "UserCustomerLinkJson": {
      "required": [
        "user_customer_link_id",
        "customer_id",
        "user_id",
        "date_inserted",
        "is_active"
      ],
      "properties": {
        "is_active": {
          "type": "boolean",
          "example": "true"
        },
        "customer_id": {
          "type": "string",
          "example": "String"
        },
        "user_id": {
          "type": "string",
          "example": "String"
        },
        "date_inserted": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "user_customer_link_id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "UserCustomerLinksJson": {
      "required": [
        "l"
      ],
      "properties": {
        "l": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserCustomerLinkJson"
          }
        }
      }
    },
    "CreateAccountJSON": {
      "required": [
        "user_id",
        "label",
        "type",
        "balance"
      ],
      "properties": {
        "balance": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "type": {
          "type": "string",
          "example": "String"
        },
        "label": {
          "type": "string",
          "example": "String"
        },
        "user_id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "CreateCustomerJson": {
      "required": [
        "user_id",
        "customer_number",
        "legal_name",
        "mobile_phone_number",
        "email",
        "face_image",
        "date_of_birth",
        "relationship_status",
        "dependants",
        "dob_of_dependants",
        "highest_education_attained",
        "employment_status",
        "kyc_status",
        "last_ok_date"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "String"
        },
        "mobile_phone_number": {
          "type": "string",
          "example": "String"
        },
        "customer_number": {
          "type": "string",
          "example": "String"
        },
        "highest_education_attained": {
          "type": "string",
          "example": "String"
        },
        "user_id": {
          "type": "string",
          "example": "String"
        },
        "dob_of_dependants": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date"
          }
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "last_ok_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "employment_status": {
          "type": "string",
          "example": "String"
        },
        "legal_name": {
          "type": "string",
          "example": "String"
        },
        "face_image": {
          "$ref": "#/definitions/CustomerFaceImageJson"
        },
        "dependants": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "relationship_status": {
          "type": "string",
          "example": "String"
        },
        "kyc_status": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "TransactionRequestJsonV200": {
      "required": [
        "id",
        "type",
        "from",
        "body",
        "transaction_ids",
        "status",
        "start_date",
        "end_date",
        "challenge"
      ],
      "properties": {
        "body": {
          "$ref": "#/definitions/TransactionRequestBodyJsonV200"
        },
        "challenge": {
          "$ref": "#/definitions/ChallengeJsonV140"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "status": {
          "type": "string",
          "example": "String"
        },
        "from": {
          "$ref": "#/definitions/TransactionRequestAccountJsonV140"
        },
        "type": {
          "type": "string",
          "example": "String"
        },
        "transaction_ids": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TransactionRequestWithChargesJson": {
      "required": [
        "transaction_requests_with_charges"
      ],
      "properties": {
        "transaction_requests_with_charges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionRequestWithChargeJson"
          }
        }
      }
    },
    "UsersJsonV200": {
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserJsonV200"
          }
        }
      }
    },
    "CounterpartiesJSON": {
      "required": [
        "counterparties"
      ],
      "properties": {
        "counterparties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoreCounterpartyJSON"
          }
        }
      }
    },
    "CounterpartyIdJson": {
      "required": [
        "counterparty_id"
      ],
      "properties": {
        "counterparty_id": {
          "type": "string",
          "example": "123456"
        }
      }
    },
    "IbanJson": {
      "required": [
        "iban"
      ],
      "properties": {
        "iban": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "MetricJson": {
      "required": [
        "user_id",
        "url",
        "date",
        "user_name",
        "app_name",
        "developer_email",
        "implemented_by_partial_function",
        "implemented_in_version",
        "consumer_id",
        "verb",
        "correlation_id",
        "duration"
      ],
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64",
          "example": "39"
        },
        "implemented_in_version": {
          "type": "string",
          "example": "v210"
        },
        "url": {
          "type": "string",
          "example": "www.openbankproject.com"
        },
        "correlation_id": {
          "type": "string",
          "example": "v8ho6h5ivel3uq7a5zcnv0w1"
        },
        "implemented_by_partial_function": {
          "type": "string",
          "example": "getBanks"
        },
        "user_id": {
          "type": "string",
          "example": "134"
        },
        "developer_email": {
          "type": "string",
          "example": "contact@tesobe.ocm"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "consumer_id": {
          "type": "string",
          "example": "123"
        },
        "verb": {
          "type": "string",
          "example": "get"
        },
        "app_name": {
          "type": "string",
          "example": "SOFI"
        },
        "user_name": {
          "type": "string",
          "example": "OBP"
        }
      }
    },
    "ResourceUserJSON": {
      "required": [
        "user_id",
        "email",
        "provider_id",
        "provider",
        "username"
      ],
      "properties": {
        "provider": {
          "type": "string",
          "example": "obp"
        },
        "email": {
          "type": "string",
          "example": "contact@tesobe.com"
        },
        "username": {
          "type": "string",
          "example": "TESOBE"
        },
        "provider_id": {
          "type": "string",
          "example": "obp"
        },
        "user_id": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "AvailableRoleJSON": {
      "required": [
        "role",
        "requires_bank_id"
      ],
      "properties": {
        "requires_bank_id": {
          "type": "boolean",
          "example": "true"
        },
        "role": {
          "type": "string",
          "example": "CanCreateBranch"
        }
      }
    },
    "TransactionRequestTypeJSONV210": {
      "required": [
        "transaction_request_type"
      ],
      "properties": {
        "transaction_request_type": {
          "type": "string",
          "example": "SandboxTan"
        }
      }
    },
    "TransactionRequestTypesJSON": {
      "required": [
        "transaction_request_types"
      ],
      "properties": {
        "transaction_request_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionRequestTypeJSONV210"
          }
        }
      }
    },
    "CustomerCreditRatingJSON": {
      "required": [
        "rating",
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "example": "OBP"
        },
        "rating": {
          "type": "string",
          "example": "OBP"
        }
      }
    },
    "CustomerJsonV210": {
      "required": [
        "bank_id",
        "customer_id",
        "customer_number",
        "legal_name",
        "mobile_phone_number",
        "email",
        "face_image",
        "date_of_birth",
        "relationship_status",
        "dependants",
        "dob_of_dependants",
        "highest_education_attained",
        "employment_status",
        "kyc_status",
        "last_ok_date"
      ],
      "properties": {
        "customer_id": {
          "type": "string",
          "example": "123"
        },
        "email": {
          "type": "string",
          "example": "contact@tesobe.com"
        },
        "mobile_phone_number": {
          "type": "string",
          "example": "123"
        },
        "customer_number": {
          "type": "string",
          "example": "123"
        },
        "highest_education_attained": {
          "type": "string",
          "example": "123"
        },
        "dob_of_dependants": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date"
          }
        },
        "bank_id": {
          "type": "string",
          "example": "bankid1234"
        },
        "date_of_birth": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "credit_rating": {
          "$ref": "#/definitions/CustomerCreditRatingJSON"
        },
        "last_ok_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "employment_status": {
          "type": "string",
          "example": "123"
        },
        "legal_name": {
          "type": "string",
          "example": "legal_name"
        },
        "credit_limit": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "face_image": {
          "$ref": "#/definitions/CustomerFaceImageJson"
        },
        "dependants": {
          "type": "integer",
          "format": "int32",
          "example": "123"
        },
        "relationship_status": {
          "type": "string",
          "example": "123"
        },
        "kyc_status": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "CustomerJSONs": {
      "required": [
        "customers"
      ],
      "properties": {
        "customers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerJsonV210"
          }
        }
      }
    },
    "UserJSONV210": {
      "required": [
        "id",
        "provider",
        "username"
      ],
      "properties": {
        "username": {
          "type": "string",
          "example": "OBP"
        },
        "provider": {
          "type": "string",
          "example": "OBP"
        },
        "id": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "LocationJsonV210": {
      "required": [
        "latitude",
        "longitude",
        "date",
        "user"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/UserJSONV210"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "example": "11.45"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "example": "11.45"
        }
      }
    },
    "TransactionRequestWithChargeJSON210": {
      "required": [
        "id",
        "type",
        "from",
        "details",
        "transaction_ids",
        "status",
        "start_date",
        "end_date",
        "challenge",
        "charge"
      ],
      "properties": {
        "challenge": {
          "$ref": "#/definitions/ChallengeJsonV140"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "id": {
          "type": "string",
          "example": "4050046c-63b3-4868-8a22-14b4181d33a6"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "status": {
          "type": "string",
          "example": "COMPLETED"
        },
        "from": {
          "$ref": "#/definitions/TransactionRequestAccountJsonV140"
        },
        "details": {
          "$ref": "#/definitions/TransactionRequestBodyAllTypes"
        },
        "charge": {
          "$ref": "#/definitions/TransactionRequestChargeJsonV200"
        },
        "type": {
          "type": "string",
          "example": "SANDBOX_TAN"
        },
        "transaction_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TransactionRequestWithChargeJSONs210": {
      "required": [
        "transaction_requests_with_charges"
      ],
      "properties": {
        "transaction_requests_with_charges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionRequestWithChargeJSON210"
          }
        }
      }
    },
    "AvailableRolesJSON": {
      "required": [
        "roles"
      ],
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableRoleJSON"
          }
        }
      }
    },
    "ConsumerJSON": {
      "required": [
        "consumer_id",
        "app_name",
        "app_type",
        "description",
        "developer_email",
        "redirect_url",
        "created_by_user_id",
        "created_by_user",
        "enabled",
        "created"
      ],
      "properties": {
        "created_by_user_id": {
          "type": "string",
          "example": "123213"
        },
        "app_type": {
          "type": "string",
          "example": "Web"
        },
        "description": {
          "type": "string",
          "example": "Account Management"
        },
        "created_by_user": {
          "$ref": "#/definitions/ResourceUserJSON"
        },
        "enabled": {
          "type": "boolean",
          "example": "true"
        },
        "redirect_url": {
          "type": "string",
          "example": "www.openbankproject.com"
        },
        "developer_email": {
          "type": "string",
          "example": "contact@tesobe.com"
        },
        "consumer_id": {
          "type": "integer",
          "format": "int64",
          "example": "1213"
        },
        "app_name": {
          "type": "string",
          "example": "SOFI"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "ConsumersJson": {
      "required": [
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConsumerJSON"
          }
        }
      }
    },
    "ProductJsonV210": {
      "required": [
        "bank_id",
        "code",
        "name",
        "category",
        "family",
        "super_family",
        "more_info_url",
        "details",
        "description",
        "meta"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "product name"
        },
        "description": {
          "type": "string",
          "example": "Description"
        },
        "more_info_url": {
          "type": "string",
          "example": "www.example.com/prod1/more-info.html"
        },
        "super_family": {
          "type": "string",
          "example": "super family"
        },
        "code": {
          "type": "string",
          "example": "prod1"
        },
        "bank_id": {
          "type": "string",
          "example": "bankid123"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "details": {
          "type": "string",
          "example": "Details"
        },
        "category": {
          "type": "string",
          "example": "category"
        },
        "family": {
          "type": "string",
          "example": "family"
        }
      }
    },
    "ProductsJsonV210": {
      "required": [
        "products"
      ],
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductJsonV210"
          }
        }
      }
    },
    "PostCounterpartyBespokeJson": {
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "english Name"
        },
        "key": {
          "type": "string",
          "example": "englishName"
        }
      }
    },
    "MetricsJson": {
      "required": [
        "metrics"
      ],
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricJson"
          }
        }
      }
    },
    "BranchJsonPostV210": {
      "required": [
        "id",
        "bank_id",
        "name",
        "address",
        "location",
        "meta",
        "lobby",
        "drive_up"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "OBP"
        },
        "location": {
          "$ref": "#/definitions/LocationJsonV140"
        },
        "drive_up": {
          "$ref": "#/definitions/DriveUpStringJson"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.fi"
        },
        "id": {
          "type": "string",
          "example": "123"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "lobby": {
          "$ref": "#/definitions/LobbyStringJson"
        },
        "address": {
          "$ref": "#/definitions/AddressJsonV140"
        }
      }
    },
    "ViewJSONV220": {
      "required": [
        "id",
        "short_name",
        "description",
        "is_public",
        "alias",
        "hide_metadata_if_alias_used",
        "can_add_comment",
        "can_add_corporate_location",
        "can_add_image",
        "can_add_image_url",
        "can_add_more_info",
        "can_add_open_corporates_url",
        "can_add_physical_location",
        "can_add_private_alias",
        "can_add_public_alias",
        "can_add_tag",
        "can_add_url",
        "can_add_where_tag",
        "can_delete_comment",
        "can_add_counterparty",
        "can_delete_corporate_location",
        "can_delete_image",
        "can_delete_physical_location",
        "can_delete_tag",
        "can_delete_where_tag",
        "can_edit_owner_comment",
        "can_see_bank_account_balance",
        "can_see_bank_account_bank_name",
        "can_see_bank_account_currency",
        "can_see_bank_account_iban",
        "can_see_bank_account_label",
        "can_see_bank_account_national_identifier",
        "can_see_bank_account_number",
        "can_see_bank_account_owners",
        "can_see_bank_account_swift_bic",
        "can_see_bank_account_type",
        "can_see_comments",
        "can_see_corporate_location",
        "can_see_image_url",
        "can_see_images",
        "can_see_more_info",
        "can_see_open_corporates_url",
        "can_see_other_account_bank_name",
        "can_see_other_account_iban",
        "can_see_other_account_kind",
        "can_see_other_account_metadata",
        "can_see_other_account_national_identifier",
        "can_see_other_account_number",
        "can_see_other_account_swift_bic",
        "can_see_owner_comment",
        "can_see_physical_location",
        "can_see_private_alias",
        "can_see_public_alias",
        "can_see_tags",
        "can_see_transaction_amount",
        "can_see_transaction_balance",
        "can_see_transaction_currency",
        "can_see_transaction_description",
        "can_see_transaction_finish_date",
        "can_see_transaction_metadata",
        "can_see_transaction_other_bank_account",
        "can_see_transaction_start_date",
        "can_see_transaction_this_bank_account",
        "can_see_transaction_type",
        "can_see_url",
        "can_see_where_tag"
      ],
      "properties": {
        "can_see_transaction_start_date": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_this_bank_account": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_owners": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_private_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_edit_owner_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_national_identifier": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_public_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_owner_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_iban": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_number": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_bank_name": {
          "type": "boolean",
          "example": "true"
        },
        "description": {
          "type": "string",
          "example": "description"
        },
        "can_see_transaction_other_bank_account": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_comments": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_bank_name": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_more_info": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_number": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_swift_bic": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_open_corporates_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_kind": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_label": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_currency": {
          "type": "boolean",
          "example": "true"
        },
        "is_public": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_finish_date": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_images": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_currency": {
          "type": "boolean",
          "example": "true"
        },
        "hide_metadata_if_alias_used": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "alias": {
          "type": "string",
          "example": "No"
        },
        "can_add_image_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_image_url": {
          "type": "boolean",
          "example": "true"
        },
        "id": {
          "type": "string",
          "example": "1234"
        },
        "can_see_bank_account_national_identifier": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_counterparty": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_tags": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_open_corporates_url": {
          "type": "boolean",
          "example": "true"
        },
        "short_name": {
          "type": "string",
          "example": "short_name"
        },
        "can_delete_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_more_info": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_metadata": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_private_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_public_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_swift_bic": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_image": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_type": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_iban": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_image": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_balance": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_balance": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_amount": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_metadata": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_type": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_description": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "ViewsJSONV220": {
      "required": [
        "views"
      ],
      "properties": {
        "views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewJSONV220"
          }
        }
      }
    },
    "CounterpartyJsonV220": {
      "required": [
        "name",
        "description",
        "created_by_user_id",
        "this_bank_id",
        "this_account_id",
        "this_view_id",
        "counterparty_id",
        "other_bank_routing_scheme",
        "other_bank_routing_address",
        "other_branch_routing_scheme",
        "other_branch_routing_address",
        "other_account_routing_scheme",
        "other_account_routing_address",
        "other_account_secondary_routing_scheme",
        "other_account_secondary_routing_address",
        "is_beneficiary",
        "bespoke"
      ],
      "properties": {
        "other_account_routing_address": {
          "type": "string",
          "example": "7987987-2348987-234234"
        },
        "other_account_routing_scheme": {
          "type": "string",
          "example": "accountNumber"
        },
        "created_by_user_id": {
          "type": "string",
          "example": "49e1e147-64c1-4823-ad9f-89efcd02a9fa"
        },
        "name": {
          "type": "string",
          "example": "CounterpartyName"
        },
        "other_account_secondary_routing_address": {
          "type": "string",
          "example": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0"
        },
        "is_beneficiary": {
          "type": "boolean",
          "example": "true"
        },
        "description": {
          "type": "string",
          "example": "My landlord"
        },
        "other_branch_routing_address": {
          "type": "string",
          "example": "10010"
        },
        "bespoke": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostCounterpartyBespokeJson"
          }
        },
        "other_bank_routing_scheme": {
          "type": "string",
          "example": "bankCode"
        },
        "other_branch_routing_scheme": {
          "type": "string",
          "example": "branchNumber"
        },
        "this_account_id": {
          "type": "string",
          "example": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0"
        },
        "this_view_id": {
          "type": "string",
          "example": "owner"
        },
        "other_bank_routing_address": {
          "type": "string",
          "example": "10"
        },
        "this_bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "counterparty_id": {
          "type": "string",
          "example": "1d65db7c-a7b2-4839-af41-958276ab7790"
        },
        "other_account_secondary_routing_scheme": {
          "type": "string",
          "example": "accountId"
        }
      }
    },
    "CounterpartyMetadataJson": {
      "required": [
        "publicAlias",
        "moreInfo",
        "url",
        "imageURL",
        "openCorporatesURL",
        "corporateLocation",
        "physicalLocation",
        "privateAlias"
      ],
      "properties": {
        "publicAlias": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "CounterpartyWithMetadataJson": {
      "required": [
        "name",
        "description",
        "created_by_user_id",
        "this_bank_id",
        "this_account_id",
        "this_view_id",
        "counterparty_id",
        "other_bank_routing_scheme",
        "other_bank_routing_address",
        "other_branch_routing_scheme",
        "other_branch_routing_address",
        "other_account_routing_scheme",
        "other_account_routing_address",
        "other_account_secondary_routing_scheme",
        "other_account_secondary_routing_address",
        "is_beneficiary",
        "bespoke",
        "metadata"
      ],
      "properties": {
        "other_account_routing_address": {
          "type": "string",
          "example": "7987987-2348987-234234"
        },
        "other_account_routing_scheme": {
          "type": "string",
          "example": "accountNumber"
        },
        "created_by_user_id": {
          "type": "string",
          "example": "49e1e147-64c1-4823-ad9f-89efcd02a9fa"
        },
        "name": {
          "type": "string",
          "example": "CounterpartyName"
        },
        "other_account_secondary_routing_address": {
          "type": "string",
          "example": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0"
        },
        "is_beneficiary": {
          "type": "boolean",
          "example": "true"
        },
        "description": {
          "type": "string",
          "example": "My landlord"
        },
        "other_branch_routing_address": {
          "type": "string",
          "example": "10010"
        },
        "bespoke": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostCounterpartyBespokeJson"
          }
        },
        "other_bank_routing_scheme": {
          "type": "string",
          "example": "bankCode"
        },
        "other_branch_routing_scheme": {
          "type": "string",
          "example": "branchNumber"
        },
        "this_account_id": {
          "type": "string",
          "example": "8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0"
        },
        "this_view_id": {
          "type": "string",
          "example": "owner"
        },
        "metadata": {
          "$ref": "#/definitions/CounterpartyMetadataJson"
        },
        "other_bank_routing_address": {
          "type": "string",
          "example": "10"
        },
        "this_bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "counterparty_id": {
          "type": "string",
          "example": "1d65db7c-a7b2-4839-af41-958276ab7790"
        },
        "other_account_secondary_routing_scheme": {
          "type": "string",
          "example": "accountId"
        }
      }
    },
    "CounterpartiesJsonV220": {
      "required": [
        "counterparties"
      ],
      "properties": {
        "counterparties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CounterpartyJsonV220"
          }
        }
      }
    },
    "BranchJsonV220": {
      "required": [
        "id",
        "bank_id",
        "name",
        "address",
        "location",
        "meta",
        "lobby",
        "drive_up",
        "branch_routing"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "OBP"
        },
        "location": {
          "$ref": "#/definitions/LocationJsonV140"
        },
        "branch_routing": {
          "$ref": "#/definitions/BranchRoutingJsonV141"
        },
        "drive_up": {
          "$ref": "#/definitions/DriveUpStringJson"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "id": {
          "type": "string",
          "example": "123"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "lobby": {
          "$ref": "#/definitions/LobbyStringJson"
        },
        "address": {
          "$ref": "#/definitions/AddressJsonV140"
        }
      }
    },
    "AtmJsonV220": {
      "required": [
        "id",
        "bank_id",
        "name",
        "address",
        "location",
        "meta"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "OBP"
        },
        "location": {
          "$ref": "#/definitions/LocationJsonV140"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "id": {
          "type": "string",
          "example": "123"
        },
        "meta": {
          "$ref": "#/definitions/MetaJsonV140"
        },
        "address": {
          "$ref": "#/definitions/AddressJsonV140"
        }
      }
    },
    "CachedFunctionJSON": {
      "required": [
        "function_name",
        "ttl_in_seconds"
      ],
      "properties": {
        "ttl_in_seconds": {
          "type": "integer",
          "format": "int32",
          "example": "5"
        },
        "function_name": {
          "type": "string",
          "example": "getBanks"
        }
      }
    },
    "PortJSON": {
      "required": [
        "property",
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "8080"
        },
        "property": {
          "type": "string",
          "example": "default"
        }
      }
    },
    "AkkaJSON": {
      "required": [
        "ports",
        "log_level"
      ],
      "properties": {
        "log_level": {
          "type": "string",
          "example": "Debug"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortJSON"
          }
        }
      }
    },
    "MetricsJSON": {
      "required": [
        "property",
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "Mapper"
        },
        "property": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "WarehouseJSON": {
      "required": [
        "property",
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "ElasticSearch"
        },
        "property": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ConfigurationJSON": {
      "required": [
        "akka",
        "elastic_search",
        "cache"
      ],
      "properties": {
        "cache": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CachedFunctionJSON"
          }
        },
        "elastic_search": {
          "$ref": "#/definitions/ElasticSearchJSON"
        },
        "akka": {
          "$ref": "#/definitions/AkkaJSON"
        }
      }
    },
    "ConnectorMetricJson": {
      "required": [
        "connector_name",
        "function_name",
        "correlation_id",
        "date",
        "duration"
      ],
      "properties": {
        "connector_name": {
          "type": "string",
          "example": "mapper"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "example": "1000"
        },
        "function_name": {
          "type": "string",
          "example": "getBanks"
        },
        "correlation_id": {
          "type": "string",
          "example": "12345"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        }
      }
    },
    "ConnectorMetricsJson": {
      "required": [
        "metrics"
      ],
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorMetricJson"
          }
        }
      }
    },
    "ViewJsonV300": {
      "required": [
        "id",
        "short_name",
        "description",
        "metadata_view",
        "is_public",
        "alias",
        "hide_metadata_if_alias_used",
        "can_add_comment",
        "can_add_corporate_location",
        "can_add_image",
        "can_add_image_url",
        "can_add_more_info",
        "can_add_open_corporates_url",
        "can_add_physical_location",
        "can_add_private_alias",
        "can_add_public_alias",
        "can_add_tag",
        "can_add_url",
        "can_add_where_tag",
        "can_delete_comment",
        "can_add_counterparty",
        "can_delete_corporate_location",
        "can_delete_image",
        "can_delete_physical_location",
        "can_delete_tag",
        "can_delete_where_tag",
        "can_edit_owner_comment",
        "can_see_bank_account_balance",
        "can_see_bank_account_bank_name",
        "can_see_bank_account_currency",
        "can_see_bank_account_iban",
        "can_see_bank_account_label",
        "can_see_bank_account_national_identifier",
        "can_see_bank_account_number",
        "can_see_bank_account_owners",
        "can_see_bank_account_swift_bic",
        "can_see_bank_account_type",
        "can_see_comments",
        "can_see_corporate_location",
        "can_see_image_url",
        "can_see_images",
        "can_see_more_info",
        "can_see_open_corporates_url",
        "can_see_other_account_bank_name",
        "can_see_other_account_iban",
        "can_see_other_account_kind",
        "can_see_other_account_metadata",
        "can_see_other_account_national_identifier",
        "can_see_other_account_number",
        "can_see_other_account_swift_bic",
        "can_see_owner_comment",
        "can_see_physical_location",
        "can_see_private_alias",
        "can_see_public_alias",
        "can_see_tags",
        "can_see_transaction_amount",
        "can_see_transaction_balance",
        "can_see_transaction_currency",
        "can_see_transaction_description",
        "can_see_transaction_finish_date",
        "can_see_transaction_metadata",
        "can_see_transaction_other_bank_account",
        "can_see_transaction_start_date",
        "can_see_transaction_this_bank_account",
        "can_see_transaction_type",
        "can_see_url",
        "can_see_where_tag",
        "can_see_bank_routing_scheme",
        "can_see_bank_routing_address",
        "can_see_bank_account_routing_scheme",
        "can_see_bank_account_routing_address",
        "can_see_other_bank_routing_scheme",
        "can_see_other_bank_routing_address",
        "can_see_other_account_routing_scheme",
        "can_see_other_account_routing_address",
        "can_add_transaction_request_to_own_account",
        "can_add_transaction_request_to_any_account",
        "can_see_bank_account_credit_limit"
      ],
      "properties": {
        "can_see_transaction_start_date": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_this_bank_account": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_owners": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_routing_address": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_private_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_edit_owner_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_national_identifier": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_routing_scheme": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_public_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_owner_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_iban": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_number": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_bank_name": {
          "type": "boolean",
          "example": "true"
        },
        "description": {
          "type": "string",
          "example": "description"
        },
        "can_see_bank_account_routing_scheme": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_other_bank_account": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_comments": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_bank_name": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_more_info": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_number": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_swift_bic": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_open_corporates_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_kind": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_transaction_request_to_own_account": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_label": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_currency": {
          "type": "boolean",
          "example": "true"
        },
        "is_public": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_finish_date": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_routing_address": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_images": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_credit_limit": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_currency": {
          "type": "boolean",
          "example": "true"
        },
        "hide_metadata_if_alias_used": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "alias": {
          "type": "string",
          "example": "No"
        },
        "can_add_image_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_image_url": {
          "type": "boolean",
          "example": "true"
        },
        "id": {
          "type": "string",
          "example": "1234"
        },
        "can_see_bank_account_national_identifier": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_counterparty": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_transaction_request_to_any_account": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_tags": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_open_corporates_url": {
          "type": "boolean",
          "example": "true"
        },
        "short_name": {
          "type": "string",
          "example": "short_name"
        },
        "can_delete_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_routing_scheme": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_more_info": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_metadata": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_comment": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_where_tag": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_private_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_public_alias": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_swift_bic": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_image": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_type": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_routing_address": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_iban": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_physical_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_add_corporate_location": {
          "type": "boolean",
          "example": "true"
        },
        "can_delete_image": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_url": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_balance": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_bank_routing_address": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_balance": {
          "type": "boolean",
          "example": "true"
        },
        "metadata_view": {
          "type": "string",
          "example": "owner"
        },
        "can_see_transaction_amount": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_account_metadata": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_bank_account_type": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_other_bank_routing_scheme": {
          "type": "boolean",
          "example": "true"
        },
        "can_see_transaction_description": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "ViewsJsonV300": {
      "required": [
        "views"
      ],
      "properties": {
        "views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewJsonV300"
          }
        }
      }
    },
    "CoreAccountJsonV300": {
      "required": [
        "id",
        "label",
        "bank_id",
        "account_routings"
      ],
      "properties": {
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "label": {
          "type": "string",
          "example": "String"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        }
      }
    },
    "ViewBasic": {
      "required": [
        "id",
        "short_name",
        "description",
        "is_public"
      ],
      "properties": {
        "is_public": {
          "type": "boolean",
          "example": "false"
        },
        "description": {
          "type": "string",
          "example": "description"
        },
        "short_name": {
          "type": "string",
          "example": "short_name"
        },
        "id": {
          "type": "string",
          "example": "123"
        }
      }
    },
    "CoreAccountJson": {
      "required": [
        "id",
        "label",
        "bank_id",
        "account_type",
        "account_routings",
        "views"
      ],
      "properties": {
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "label": {
          "type": "string",
          "example": "String"
        },
        "account_type": {
          "type": "string",
          "example": "330"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewBasic"
          }
        }
      }
    },
    "CoreAccountsJsonV300": {
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoreAccountJson"
          }
        }
      }
    },
    "Balances": {
      "required": [
        "balances"
      ],
      "properties": {
        "balances": {
          "type": "string",
          "example": "/v1/accounts/3dc3d5b3-7023-4848-9853-f5400a64e80f/balances"
        }
      }
    },
    "Transactions": {
      "required": [
        "trasactions"
      ],
      "properties": {
        "trasactions": {
          "type": "string",
          "example": "/v1/accounts/3dc3d5b3-7023-4848-9853-f5400a64e80f/transactions"
        }
      }
    },
    "CoreAccountJsonV1": {
      "required": [
        "id",
        "iban",
        "currency",
        "accountType",
        "cashAccountType",
        "_links",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Main Account"
        },
        "cashAccountType": {
          "type": "string",
          "example": "CurrentAccount"
        },
        "id": {
          "type": "string",
          "example": "3dc3d5b3-7023-4848-9853-f5400a64e80f"
        },
        "accountType": {
          "type": "string",
          "example": "Girokonto"
        },
        "currency": {
          "type": "string",
          "example": "EUR"
        },
        "iban": {
          "type": "string",
          "example": "DE2310010010123456789"
        },
        "_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Balances"
          }
        }
      }
    },
    "CoreAccountsJsonV1": {
      "required": [
        "account$minuslist"
      ],
      "properties": {
        "account$minuslist": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoreAccountJsonV1"
          }
        }
      }
    },
    "AmountOfMoneyV1": {
      "required": [
        "currency",
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "example": "String"
        },
        "currency": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "AccountInner": {
      "required": [
        "SchemeName",
        "Identification",
        "Name"
      ],
      "properties": {
        "SecondaryIdentification": {
          "type": "string",
          "example": "00021"
        },
        "Name": {
          "type": "string",
          "example": "Mr Kevin"
        },
        "Identification": {
          "type": "string",
          "example": "80200110203345"
        },
        "SchemeName": {
          "type": "string",
          "example": "SortCodeAccountNumber"
        }
      }
    },
    "Account": {
      "required": [
        "AccountId",
        "Currency",
        "AccountType",
        "AccountSubType",
        "Nickname",
        "Account"
      ],
      "properties": {
        "AccountSubType": {
          "type": "string",
          "example": "CurrentAccount"
        },
        "Nickname": {
          "type": "string",
          "example": "Bills"
        },
        "Currency": {
          "type": "string",
          "example": "GBP"
        },
        "AccountType": {
          "type": "string",
          "example": "Personal"
        },
        "AccountId": {
          "type": "string",
          "example": "22289"
        },
        "Account": {
          "$ref": "#/definitions/AccountInner"
        }
      }
    },
    "AccountList": {
      "required": [
        "Account"
      ],
      "properties": {
        "Account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        }
      }
    },
    "Links": {
      "required": [
        "Self"
      ],
      "properties": {
        "Self": {
          "type": "string",
          "example": "https://api.openbankproject.com/open-banking/v2.0/accounts/"
        }
      }
    },
    "MetaUK": {
      "required": [
        "TotalPages"
      ],
      "properties": {
        "TotalPages": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        }
      }
    },
    "Accounts": {
      "required": [
        "Data",
        "Links",
        "Meta"
      ],
      "properties": {
        "Meta": {
          "$ref": "#/definitions/MetaUK"
        },
        "Links": {
          "$ref": "#/definitions/Links"
        },
        "Data": {
          "$ref": "#/definitions/AccountList"
        }
      }
    },
    "ClosingBookedBody": {
      "required": [
        "amount",
        "date"
      ],
      "properties": {
        "date": {
          "type": "string",
          "example": "2017-10-25"
        },
        "amount": {
          "$ref": "#/definitions/AmountOfMoneyV1"
        }
      }
    },
    "ExpectedBody": {
      "required": [
        "amount",
        "lastActionDateTime"
      ],
      "properties": {
        "lastActionDateTime": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "amount": {
          "$ref": "#/definitions/AmountOfMoneyV1"
        }
      }
    },
    "AccountBalance": {
      "required": [
        "closingBooked",
        "expected"
      ],
      "properties": {
        "expected": {
          "$ref": "#/definitions/ExpectedBody"
        },
        "closingBooked": {
          "$ref": "#/definitions/ClosingBookedBody"
        }
      }
    },
    "AccountBalances": {
      "required": [
        "balances"
      ],
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountBalance"
          }
        }
      }
    },
    "TransactionJsonV1": {
      "required": [
        "transactionId",
        "creditorName",
        "creditorAccount",
        "amount",
        "bookingDate",
        "valueDate",
        "remittanceInformationUnstructured"
      ],
      "properties": {
        "remittanceInformationUnstructured": {
          "type": "string",
          "example": "String"
        },
        "creditorAccount": {
          "$ref": "#/definitions/IbanJson"
        },
        "amount": {
          "$ref": "#/definitions/AmountOfMoneyV1"
        },
        "valueDate": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "creditorName": {
          "type": "string",
          "example": "String"
        },
        "bookingDate": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "transactionId": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ViewAccount": {
      "required": [
        "viewAccount"
      ],
      "properties": {
        "viewAccount": {
          "type": "string",
          "example": "/v1/accounts/3dc3d5b3-7023-4848-9853- f5400a64e80f"
        }
      }
    },
    "TransactionsJsonV1": {
      "required": [
        "transactions_booked",
        "transactions_pending",
        "_links"
      ],
      "properties": {
        "_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewAccount"
          }
        },
        "transactions_pending": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionJsonV1"
          }
        },
        "transactions_booked": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionJsonV1"
          }
        }
      }
    },
    "AccountIdJson": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        }
      }
    },
    "AccountsIdsJsonV300": {
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountIdJson"
          }
        }
      }
    },
    "AdapterInfoJsonV300": {
      "required": [
        "name",
        "version",
        "git_commit",
        "date"
      ],
      "properties": {
        "date": {
          "type": "string",
          "example": "2013-01-21T23:08:00Z"
        },
        "git_commit": {
          "type": "string",
          "example": "String"
        },
        "version": {
          "type": "string",
          "example": "String"
        },
        "name": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ThisAccountJsonV300": {
      "required": [
        "id",
        "bank_routing",
        "account_routings",
        "holders"
      ],
      "properties": {
        "holders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountHolderJSON"
          }
        },
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "bank_routing": {
          "$ref": "#/definitions/BankRoutingJsonV121"
        },
        "id": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "OtherAccountJsonV300": {
      "required": [
        "id",
        "holder",
        "bank_routing",
        "account_routings",
        "metadata"
      ],
      "properties": {
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "holder": {
          "$ref": "#/definitions/AccountHolderJSON"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "metadata": {
          "$ref": "#/definitions/OtherAccountMetadataJSON"
        },
        "bank_routing": {
          "$ref": "#/definitions/BankRoutingJsonV121"
        }
      }
    },
    "OtherAccountsJsonV300": {
      "required": [
        "other_accounts"
      ],
      "properties": {
        "other_accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OtherAccountJsonV300"
          }
        }
      }
    },
    "TransactionJsonV300": {
      "required": [
        "id",
        "this_account",
        "other_account",
        "details",
        "metadata"
      ],
      "properties": {
        "this_account": {
          "$ref": "#/definitions/ThisAccountJsonV300"
        },
        "id": {
          "type": "string",
          "example": "String"
        },
        "details": {
          "$ref": "#/definitions/TransactionDetailsJSON"
        },
        "metadata": {
          "$ref": "#/definitions/TransactionMetadataJSON"
        },
        "other_account": {
          "$ref": "#/definitions/OtherAccountJsonV300"
        }
      }
    },
    "TransactionsJsonV300": {
      "required": [
        "transactions"
      ],
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionJsonV300"
          }
        }
      }
    },
    "CoreCounterpartyJsonV300": {
      "required": [
        "id",
        "holder",
        "bank_routing",
        "account_routings"
      ],
      "properties": {
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "bank_routing": {
          "$ref": "#/definitions/BankRoutingJsonV121"
        },
        "holder": {
          "$ref": "#/definitions/AccountHolderJSON"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        }
      }
    },
    "CoreTransactionJsonV300": {
      "required": [
        "id",
        "this_account",
        "other_account",
        "details"
      ],
      "properties": {
        "details": {
          "$ref": "#/definitions/CoreTransactionDetailsJSON"
        },
        "other_account": {
          "$ref": "#/definitions/CoreCounterpartyJsonV300"
        },
        "this_account": {
          "$ref": "#/definitions/ThisAccountJsonV300"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        }
      }
    },
    "CoreCounterpartiesJsonV300": {
      "required": [
        "counterparties"
      ],
      "properties": {
        "counterparties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoreCounterpartyJsonV300"
          }
        }
      }
    },
    "CoreTransactionsJsonV300": {
      "required": [
        "transactions"
      ],
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoreTransactionJsonV300"
          }
        }
      }
    },
    "AccountHeldJson": {
      "required": [
        "id",
        "bank_id",
        "number",
        "account_routings"
      ],
      "properties": {
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "number": {
          "type": "string",
          "example": "123"
        },
        "bank_id": {
          "type": "string",
          "example": "123"
        },
        "id": {
          "type": "string",
          "example": "12314"
        }
      }
    },
    "CoreAccountsHeldJsonV300": {
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountHeldJson"
          }
        }
      }
    },
    "ModeratedAccountJsonV300": {
      "required": [
        "id",
        "bank_id",
        "label",
        "number",
        "owners",
        "type",
        "balance",
        "views_available",
        "account_routings"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "String"
        },
        "views_available": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewJsonV300"
          }
        },
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "label": {
          "type": "string",
          "example": "String"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserJSONV121"
          }
        },
        "balance": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "id": {
          "type": "string",
          "example": "String"
        },
        "type": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "ModeratedCoreAccountJsonV300": {
      "required": [
        "id",
        "bank_id",
        "label",
        "number",
        "owners",
        "type",
        "balance",
        "account_routings",
        "account_rules"
      ],
      "properties": {
        "number": {
          "type": "string",
          "example": "String"
        },
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "label": {
          "type": "string",
          "example": "String"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserJSONV121"
          }
        },
        "balance": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "bank_id": {
          "type": "string",
          "example": "String"
        },
        "id": {
          "type": "string",
          "example": "5995d6a2-01b3-423c-a173-5481df49bdaf"
        },
        "type": {
          "type": "string",
          "example": "String"
        },
        "account_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRuleJsonV300"
          }
        }
      }
    },
    "ModeratedCoreAccountsJsonV300": {
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModeratedCoreAccountJsonV300"
          }
        }
      }
    },
    "AggregateMetricJSON": {
      "required": [
        "count",
        "average_response_time",
        "minimum_response_time",
        "maximum_response_time"
      ],
      "properties": {
        "maximum_response_time": {
          "type": "number",
          "format": "double",
          "example": "9039.0"
        },
        "minimum_response_time": {
          "type": "number",
          "format": "double",
          "example": "1.0"
        },
        "average_response_time": {
          "type": "number",
          "format": "double",
          "example": "65.21"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "example": "7076"
        }
      }
    },
    "BankTransactionCodeJson": {
      "required": [
        "Code",
        "SubCode"
      ],
      "properties": {
        "SubCode": {
          "type": "string",
          "example": "DomesticCreditTransfer"
        },
        "Code": {
          "type": "string",
          "example": "ReceivedCreditTransfer"
        }
      }
    },
    "BalanceUKOpenBankingJson": {
      "required": [
        "Amount",
        "CreditDebitIndicator",
        "Type"
      ],
      "properties": {
        "Type": {
          "type": "string",
          "example": "InterimBooked"
        },
        "CreditDebitIndicator": {
          "type": "string",
          "example": "Credit"
        },
        "Amount": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        }
      }
    },
    "TransactionCodeJson": {
      "required": [
        "Code",
        "Issuer"
      ],
      "properties": {
        "Issuer": {
          "type": "string",
          "example": "AlphaBank"
        },
        "Code": {
          "type": "string",
          "example": "Transfer"
        }
      }
    },
    "TransactionInnerJson": {
      "required": [
        "AccountId",
        "TransactionId",
        "TransactionReference",
        "Amount",
        "CreditDebitIndicator",
        "Status",
        "BookingDateTime",
        "ValueDateTime",
        "TransactionInformation",
        "BankTransactionCode",
        "ProprietaryBankTransactionCode",
        "Balance"
      ],
      "properties": {
        "TransactionInformation": {
          "type": "string",
          "example": "Cash from Aubrey"
        },
        "Balance": {
          "$ref": "#/definitions/BalanceUKOpenBankingJson"
        },
        "BookingDateTime": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "CreditDebitIndicator": {
          "type": "string",
          "example": "Credit"
        },
        "TransactionReference": {
          "type": "string",
          "example": "Ref 1"
        },
        "Amount": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "ProprietaryBankTransactionCode": {
          "$ref": "#/definitions/TransactionCodeJson"
        },
        "TransactionId": {
          "type": "string",
          "example": "123"
        },
        "AccountId": {
          "type": "string",
          "example": "123"
        },
        "ValueDateTime": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "BankTransactionCode": {
          "$ref": "#/definitions/BankTransactionCodeJson"
        },
        "Status": {
          "type": "string",
          "example": "Booked"
        }
      }
    },
    "TransactionsInnerJson": {
      "required": [
        "Transaction"
      ],
      "properties": {
        "Transaction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionInnerJson"
          }
        }
      }
    },
    "MetaInnerJson": {
      "required": [
        "TotalPages",
        "FirstAvailableDateTime",
        "LastAvailableDateTime"
      ],
      "properties": {
        "LastAvailableDateTime": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "FirstAvailableDateTime": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "TotalPages": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        }
      }
    },
    "TransactionsJsonUKV200": {
      "required": [
        "Data",
        "Links",
        "Meta"
      ],
      "properties": {
        "Meta": {
          "$ref": "#/definitions/MetaInnerJson"
        },
        "Links": {
          "$ref": "#/definitions/Links"
        },
        "Data": {
          "$ref": "#/definitions/TransactionsInnerJson"
        }
      }
    },
    "CreditLineJson": {
      "required": [
        "Included",
        "Amount",
        "Type"
      ],
      "properties": {
        "Type": {
          "type": "string",
          "example": "Pre-Agreed"
        },
        "Amount": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "Included": {
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "BalanceJsonUKV200": {
      "required": [
        "AccountId",
        "Amount",
        "CreditDebitIndicator",
        "Type",
        "DateTime",
        "CreditLine"
      ],
      "properties": {
        "CreditDebitIndicator": {
          "type": "string",
          "example": "Credit"
        },
        "Amount": {
          "$ref": "#/definitions/AmountOfMoneyJsonV121"
        },
        "DateTime": {
          "type": "string",
          "format": "date",
          "example": "Tue Sep 19 00:00:00 UTC 2017"
        },
        "AccountId": {
          "type": "string",
          "example": "22289"
        },
        "CreditLine": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditLineJson"
          }
        },
        "Type": {
          "type": "string",
          "example": "InterimAvailable"
        }
      }
    },
    "DataJsonUKV200": {
      "required": [
        "Balance"
      ],
      "properties": {
        "Balance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BalanceJsonUKV200"
          }
        }
      }
    },
    "MetaBisJson": {
      "required": [
        "TotalPages"
      ],
      "properties": {
        "TotalPages": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        }
      }
    },
    "AccountBalancesUKV200": {
      "required": [
        "Data",
        "Links",
        "Meta"
      ],
      "properties": {
        "Meta": {
          "$ref": "#/definitions/MetaBisJson"
        },
        "Links": {
          "$ref": "#/definitions/Links"
        },
        "Data": {
          "$ref": "#/definitions/DataJsonUKV200"
        }
      }
    },
    "ScopeJson": {
      "required": [
        "scope_id",
        "role_name",
        "bank_id"
      ],
      "properties": {
        "bank_id": {
          "type": "string",
          "example": "gh.29.uk"
        },
        "role_name": {
          "type": "string",
          "example": "CanGetEntitlementsForAnyUserAtOneBank"
        },
        "scope_id": {
          "type": "string",
          "example": "88625da4-a671-435e-9d24-e5b6e5cc404f"
        }
      }
    },
    "ScopeJsons": {
      "required": [
        "list"
      ],
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopeJson"
          }
        }
      }
    },
    "OrderObjectJson": {
      "required": [
        "order_id",
        "order_date",
        "number_of_checkbooks",
        "distribution_channel",
        "status",
        "first_check_number",
        "shipping_code"
      ],
      "properties": {
        "order_id": {
          "type": "string",
          "example": "xjksajfkj"
        },
        "number_of_checkbooks": {
          "type": "string",
          "example": "4"
        },
        "first_check_number": {
          "type": "string",
          "example": "5165276"
        },
        "order_date": {
          "type": "string",
          "example": "07082013"
        },
        "status": {
          "type": "string",
          "example": "2"
        },
        "shipping_code": {
          "type": "string",
          "example": "1"
        },
        "distribution_channel": {
          "type": "string",
          "example": "1201"
        }
      }
    },
    "OrderJson": {
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/OrderObjectJson"
        }
      }
    },
    "AccountV310Json": {
      "required": [
        "bank_id",
        "account_id",
        "account_type",
        "account_routings",
        "branch_routings"
      ],
      "properties": {
        "account_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRoutingJsonV121"
          }
        },
        "account_type": {
          "type": "string",
          "example": "330"
        },
        "bank_id": {
          "type": "string",
          "example": "10"
        },
        "account_id": {
          "type": "string",
          "example": "xjfsafjj"
        },
        "branch_routings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BranchRoutingJsonV141"
          }
        }
      }
    },
    "CheckbookOrdersJson": {
      "required": [
        "account",
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderJson"
          }
        },
        "account": {
          "$ref": "#/definitions/AccountV310Json"
        }
      }
    },
    "CardObjectJson": {
      "required": [
        "card_type",
        "card_description",
        "use_type"
      ],
      "properties": {
        "use_type": {
          "type": "string",
          "example": "3"
        },
        "card_description": {
          "type": "string",
          "example": "good"
        },
        "card_type": {
          "type": "string",
          "example": "5"
        }
      }
    },
    "CreditCardOrderStatusResponseJson": {
      "required": [
        "cards"
      ],
      "properties": {
        "cards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardObjectJson"
          }
        }
      }
    },
    "CreditLimitOrderResponseJson": {
      "required": [
        "execution_time",
        "execution_date",
        "token",
        "short_reference"
      ],
      "properties": {
        "short_reference": {
          "type": "string",
          "example": "String"
        },
        "token": {
          "type": "string",
          "example": "String"
        },
        "execution_date": {
          "type": "string",
          "example": "String"
        },
        "execution_time": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "CreditLimitOrderJson": {
      "required": [
        "rank_amount_1",
        "nominal_interest_1",
        "rank_amount_2",
        "nominal_interest_2"
      ],
      "properties": {
        "nominal_interest_2": {
          "type": "string",
          "example": "String"
        },
        "rank_amount_2": {
          "type": "string",
          "example": "String"
        },
        "nominal_interest_1": {
          "type": "string",
          "example": "String"
        },
        "rank_amount_1": {
          "type": "string",
          "example": "String"
        }
      }
    },
    "TopApiJson": {
      "required": [
        "count",
        "Implemented_by_partial_function",
        "implemented_in_version"
      ],
      "properties": {
        "implemented_in_version": {
          "type": "string",
          "example": "v1.2.1"
        },
        "Implemented_by_partial_function": {
          "type": "string",
          "example": "getBanks"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "example": "7076"
        }
      }
    },
    "TopConsumerJson": {
      "required": [
        "count",
        "consumer_id",
        "app_name",
        "developer_email"
      ],
      "properties": {
        "developer_email": {
          "type": "string",
          "example": "tesobe@tesobe.com"
        },
        "app_name": {
          "type": "string",
          "example": "Api Explorer"
        },
        "consumer_id": {
          "type": "string",
          "example": "12312312"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "example": "7076"
        }
      }
    },
    "NoSupportYet": {
      "properties": {}
    },
    "$colon$colon": {
      "required": [
        "serialVersionUID",
        "head",
        "tl"
      ],
      "properties": {
        "tl": {
          "$ref": "#/definitions/Nil$"
        },
        "head": {
          "$ref": "#/definitions/TopConsumerJson"
        }
      }
    },
    "GlossaryItemsJsonV300": {
      "required": [
        "glossary_items"
      ],
      "properties": {
        "glossary_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlossaryItemJsonV300"
          }
        }
      }
    },
    "EmptyClassJson": {
      "required": [
        "jsonString"
      ],
      "properties": {
        "jsonString": {
          "type": "string",
          "example": "{}"
        }
      }
    }
  }
}